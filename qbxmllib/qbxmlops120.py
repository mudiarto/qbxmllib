#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Tue Mar 19 12:18:16 2013 by generateDS.py version 2.7c.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class QBXMLMsgsRq(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, onError=None, responseData='includeAll', oldMessageSetID=None, newMessageSetID=None, HostQueryRq=None, CompanyQueryRq=None, AccountQueryRq=None, CustomerAddRq=None, CustomerModRq=None, CustomerQueryRq=None, ItemInventoryAddRq=None, ItemInventoryModRq=None, ItemInventoryQueryRq=None, ItemQueryRq=None, SalesReceiptAddRq=None, SalesReceiptModRq=None, SalesReceiptQueryRq=None):
        self.onError = _cast(None, onError)
        self.responseData = _cast(None, responseData)
        self.oldMessageSetID = _cast(None, oldMessageSetID)
        self.newMessageSetID = _cast(None, newMessageSetID)
        if HostQueryRq is None:
            self.HostQueryRq = []
        else:
            self.HostQueryRq = HostQueryRq
        if CompanyQueryRq is None:
            self.CompanyQueryRq = []
        else:
            self.CompanyQueryRq = CompanyQueryRq
        if AccountQueryRq is None:
            self.AccountQueryRq = []
        else:
            self.AccountQueryRq = AccountQueryRq
        if CustomerAddRq is None:
            self.CustomerAddRq = []
        else:
            self.CustomerAddRq = CustomerAddRq
        if CustomerModRq is None:
            self.CustomerModRq = []
        else:
            self.CustomerModRq = CustomerModRq
        if CustomerQueryRq is None:
            self.CustomerQueryRq = []
        else:
            self.CustomerQueryRq = CustomerQueryRq
        if ItemInventoryAddRq is None:
            self.ItemInventoryAddRq = []
        else:
            self.ItemInventoryAddRq = ItemInventoryAddRq
        if ItemInventoryModRq is None:
            self.ItemInventoryModRq = []
        else:
            self.ItemInventoryModRq = ItemInventoryModRq
        if ItemInventoryQueryRq is None:
            self.ItemInventoryQueryRq = []
        else:
            self.ItemInventoryQueryRq = ItemInventoryQueryRq
        if ItemQueryRq is None:
            self.ItemQueryRq = []
        else:
            self.ItemQueryRq = ItemQueryRq
        if SalesReceiptAddRq is None:
            self.SalesReceiptAddRq = []
        else:
            self.SalesReceiptAddRq = SalesReceiptAddRq
        if SalesReceiptModRq is None:
            self.SalesReceiptModRq = []
        else:
            self.SalesReceiptModRq = SalesReceiptModRq
        if SalesReceiptQueryRq is None:
            self.SalesReceiptQueryRq = []
        else:
            self.SalesReceiptQueryRq = SalesReceiptQueryRq
    def factory(*args_, **kwargs_):
        if QBXMLMsgsRq.subclass:
            return QBXMLMsgsRq.subclass(*args_, **kwargs_)
        else:
            return QBXMLMsgsRq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HostQueryRq(self): return self.HostQueryRq
    def set_HostQueryRq(self, HostQueryRq): self.HostQueryRq = HostQueryRq
    def add_HostQueryRq(self, value): self.HostQueryRq.append(value)
    def insert_HostQueryRq(self, index, value): self.HostQueryRq[index] = value
    def get_CompanyQueryRq(self): return self.CompanyQueryRq
    def set_CompanyQueryRq(self, CompanyQueryRq): self.CompanyQueryRq = CompanyQueryRq
    def add_CompanyQueryRq(self, value): self.CompanyQueryRq.append(value)
    def insert_CompanyQueryRq(self, index, value): self.CompanyQueryRq[index] = value
    def get_AccountQueryRq(self): return self.AccountQueryRq
    def set_AccountQueryRq(self, AccountQueryRq): self.AccountQueryRq = AccountQueryRq
    def add_AccountQueryRq(self, value): self.AccountQueryRq.append(value)
    def insert_AccountQueryRq(self, index, value): self.AccountQueryRq[index] = value
    def get_CustomerAddRq(self): return self.CustomerAddRq
    def set_CustomerAddRq(self, CustomerAddRq): self.CustomerAddRq = CustomerAddRq
    def add_CustomerAddRq(self, value): self.CustomerAddRq.append(value)
    def insert_CustomerAddRq(self, index, value): self.CustomerAddRq[index] = value
    def get_CustomerModRq(self): return self.CustomerModRq
    def set_CustomerModRq(self, CustomerModRq): self.CustomerModRq = CustomerModRq
    def add_CustomerModRq(self, value): self.CustomerModRq.append(value)
    def insert_CustomerModRq(self, index, value): self.CustomerModRq[index] = value
    def get_CustomerQueryRq(self): return self.CustomerQueryRq
    def set_CustomerQueryRq(self, CustomerQueryRq): self.CustomerQueryRq = CustomerQueryRq
    def add_CustomerQueryRq(self, value): self.CustomerQueryRq.append(value)
    def insert_CustomerQueryRq(self, index, value): self.CustomerQueryRq[index] = value
    def get_ItemInventoryAddRq(self): return self.ItemInventoryAddRq
    def set_ItemInventoryAddRq(self, ItemInventoryAddRq): self.ItemInventoryAddRq = ItemInventoryAddRq
    def add_ItemInventoryAddRq(self, value): self.ItemInventoryAddRq.append(value)
    def insert_ItemInventoryAddRq(self, index, value): self.ItemInventoryAddRq[index] = value
    def get_ItemInventoryModRq(self): return self.ItemInventoryModRq
    def set_ItemInventoryModRq(self, ItemInventoryModRq): self.ItemInventoryModRq = ItemInventoryModRq
    def add_ItemInventoryModRq(self, value): self.ItemInventoryModRq.append(value)
    def insert_ItemInventoryModRq(self, index, value): self.ItemInventoryModRq[index] = value
    def get_ItemInventoryQueryRq(self): return self.ItemInventoryQueryRq
    def set_ItemInventoryQueryRq(self, ItemInventoryQueryRq): self.ItemInventoryQueryRq = ItemInventoryQueryRq
    def add_ItemInventoryQueryRq(self, value): self.ItemInventoryQueryRq.append(value)
    def insert_ItemInventoryQueryRq(self, index, value): self.ItemInventoryQueryRq[index] = value
    def get_ItemQueryRq(self): return self.ItemQueryRq
    def set_ItemQueryRq(self, ItemQueryRq): self.ItemQueryRq = ItemQueryRq
    def add_ItemQueryRq(self, value): self.ItemQueryRq.append(value)
    def insert_ItemQueryRq(self, index, value): self.ItemQueryRq[index] = value
    def get_SalesReceiptAddRq(self): return self.SalesReceiptAddRq
    def set_SalesReceiptAddRq(self, SalesReceiptAddRq): self.SalesReceiptAddRq = SalesReceiptAddRq
    def add_SalesReceiptAddRq(self, value): self.SalesReceiptAddRq.append(value)
    def insert_SalesReceiptAddRq(self, index, value): self.SalesReceiptAddRq[index] = value
    def get_SalesReceiptModRq(self): return self.SalesReceiptModRq
    def set_SalesReceiptModRq(self, SalesReceiptModRq): self.SalesReceiptModRq = SalesReceiptModRq
    def add_SalesReceiptModRq(self, value): self.SalesReceiptModRq.append(value)
    def insert_SalesReceiptModRq(self, index, value): self.SalesReceiptModRq[index] = value
    def get_SalesReceiptQueryRq(self): return self.SalesReceiptQueryRq
    def set_SalesReceiptQueryRq(self, SalesReceiptQueryRq): self.SalesReceiptQueryRq = SalesReceiptQueryRq
    def add_SalesReceiptQueryRq(self, value): self.SalesReceiptQueryRq.append(value)
    def insert_SalesReceiptQueryRq(self, index, value): self.SalesReceiptQueryRq[index] = value
    def get_onError(self): return self.onError
    def set_onError(self, onError): self.onError = onError
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_responseData(self): return self.responseData
    def set_responseData(self, responseData): self.responseData = responseData
    def get_oldMessageSetID(self): return self.oldMessageSetID
    def set_oldMessageSetID(self, oldMessageSetID): self.oldMessageSetID = oldMessageSetID
    def get_newMessageSetID(self): return self.newMessageSetID
    def set_newMessageSetID(self, newMessageSetID): self.newMessageSetID = newMessageSetID
    def export(self, outfile, level, namespace_='', name_='QBXMLMsgsRq', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QBXMLMsgsRq')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QBXMLMsgsRq'):
        if self.onError is not None and 'onError' not in already_processed:
            already_processed.append('onError')
            outfile.write(' onError=%s' % (quote_attrib(self.onError), ))
        if self.responseData is not None and 'responseData' not in already_processed:
            already_processed.append('responseData')
            outfile.write(' responseData=%s' % (quote_attrib(self.responseData), ))
        if self.oldMessageSetID is not None and 'oldMessageSetID' not in already_processed:
            already_processed.append('oldMessageSetID')
            outfile.write(' oldMessageSetID=%s' % (quote_attrib(self.oldMessageSetID), ))
        if self.newMessageSetID is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            outfile.write(' newMessageSetID=%s' % (quote_attrib(self.newMessageSetID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='QBXMLMsgsRq', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for HostQueryRq_ in self.HostQueryRq:
            HostQueryRq_.export(outfile, level, namespace_, name_='HostQueryRq', pretty_print=pretty_print)
        for CompanyQueryRq_ in self.CompanyQueryRq:
            CompanyQueryRq_.export(outfile, level, namespace_, name_='CompanyQueryRq', pretty_print=pretty_print)
        for AccountQueryRq_ in self.AccountQueryRq:
            AccountQueryRq_.export(outfile, level, namespace_, name_='AccountQueryRq', pretty_print=pretty_print)
        for CustomerAddRq_ in self.CustomerAddRq:
            CustomerAddRq_.export(outfile, level, namespace_, name_='CustomerAddRq', pretty_print=pretty_print)
        for CustomerModRq_ in self.CustomerModRq:
            CustomerModRq_.export(outfile, level, namespace_, name_='CustomerModRq', pretty_print=pretty_print)
        for CustomerQueryRq_ in self.CustomerQueryRq:
            CustomerQueryRq_.export(outfile, level, namespace_, name_='CustomerQueryRq', pretty_print=pretty_print)
        for ItemInventoryAddRq_ in self.ItemInventoryAddRq:
            ItemInventoryAddRq_.export(outfile, level, namespace_, name_='ItemInventoryAddRq', pretty_print=pretty_print)
        for ItemInventoryModRq_ in self.ItemInventoryModRq:
            ItemInventoryModRq_.export(outfile, level, namespace_, name_='ItemInventoryModRq', pretty_print=pretty_print)
        for ItemInventoryQueryRq_ in self.ItemInventoryQueryRq:
            ItemInventoryQueryRq_.export(outfile, level, namespace_, name_='ItemInventoryQueryRq', pretty_print=pretty_print)
        for ItemQueryRq_ in self.ItemQueryRq:
            ItemQueryRq_.export(outfile, level, namespace_, name_='ItemQueryRq', pretty_print=pretty_print)
        for SalesReceiptAddRq_ in self.SalesReceiptAddRq:
            SalesReceiptAddRq_.export(outfile, level, namespace_, name_='SalesReceiptAddRq', pretty_print=pretty_print)
        for SalesReceiptModRq_ in self.SalesReceiptModRq:
            SalesReceiptModRq_.export(outfile, level, namespace_, name_='SalesReceiptModRq', pretty_print=pretty_print)
        for SalesReceiptQueryRq_ in self.SalesReceiptQueryRq:
            SalesReceiptQueryRq_.export(outfile, level, namespace_, name_='SalesReceiptQueryRq', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.HostQueryRq or
            self.CompanyQueryRq or
            self.AccountQueryRq or
            self.CustomerAddRq or
            self.CustomerModRq or
            self.CustomerQueryRq or
            self.ItemInventoryAddRq or
            self.ItemInventoryModRq or
            self.ItemInventoryQueryRq or
            self.ItemQueryRq or
            self.SalesReceiptAddRq or
            self.SalesReceiptModRq or
            self.SalesReceiptQueryRq
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QBXMLMsgsRq'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.onError is not None and 'onError' not in already_processed:
            already_processed.append('onError')
            showIndent(outfile, level)
            outfile.write('onError = "%s",\n' % (self.onError,))
        if self.responseData is not None and 'responseData' not in already_processed:
            already_processed.append('responseData')
            showIndent(outfile, level)
            outfile.write('responseData = "%s",\n' % (self.responseData,))
        if self.oldMessageSetID is not None and 'oldMessageSetID' not in already_processed:
            already_processed.append('oldMessageSetID')
            showIndent(outfile, level)
            outfile.write('oldMessageSetID = "%s",\n' % (self.oldMessageSetID,))
        if self.newMessageSetID is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            showIndent(outfile, level)
            outfile.write('newMessageSetID = "%s",\n' % (self.newMessageSetID,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('HostQueryRq=[\n')
        level += 1
        for HostQueryRq_ in self.HostQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.HostQueryRqType(\n')
            HostQueryRq_.exportLiteral(outfile, level, name_='HostQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CompanyQueryRq=[\n')
        level += 1
        for CompanyQueryRq_ in self.CompanyQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.CompanyQueryRqType(\n')
            CompanyQueryRq_.exportLiteral(outfile, level, name_='CompanyQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('AccountQueryRq=[\n')
        level += 1
        for AccountQueryRq_ in self.AccountQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.AccountQueryRqType(\n')
            AccountQueryRq_.exportLiteral(outfile, level, name_='AccountQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerAddRq=[\n')
        level += 1
        for CustomerAddRq_ in self.CustomerAddRq:
            showIndent(outfile, level)
            outfile.write('model_.CustomerAddRqType(\n')
            CustomerAddRq_.exportLiteral(outfile, level, name_='CustomerAddRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerModRq=[\n')
        level += 1
        for CustomerModRq_ in self.CustomerModRq:
            showIndent(outfile, level)
            outfile.write('model_.CustomerModRqType(\n')
            CustomerModRq_.exportLiteral(outfile, level, name_='CustomerModRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerQueryRq=[\n')
        level += 1
        for CustomerQueryRq_ in self.CustomerQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.CustomerQueryRqType(\n')
            CustomerQueryRq_.exportLiteral(outfile, level, name_='CustomerQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryAddRq=[\n')
        level += 1
        for ItemInventoryAddRq_ in self.ItemInventoryAddRq:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryAddRqType(\n')
            ItemInventoryAddRq_.exportLiteral(outfile, level, name_='ItemInventoryAddRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryModRq=[\n')
        level += 1
        for ItemInventoryModRq_ in self.ItemInventoryModRq:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryModRqType(\n')
            ItemInventoryModRq_.exportLiteral(outfile, level, name_='ItemInventoryModRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryQueryRq=[\n')
        level += 1
        for ItemInventoryQueryRq_ in self.ItemInventoryQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryQueryRqType(\n')
            ItemInventoryQueryRq_.exportLiteral(outfile, level, name_='ItemInventoryQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemQueryRq=[\n')
        level += 1
        for ItemQueryRq_ in self.ItemQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.ItemQueryRqType(\n')
            ItemQueryRq_.exportLiteral(outfile, level, name_='ItemQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptAddRq=[\n')
        level += 1
        for SalesReceiptAddRq_ in self.SalesReceiptAddRq:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptAddRqType(\n')
            SalesReceiptAddRq_.exportLiteral(outfile, level, name_='SalesReceiptAddRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptModRq=[\n')
        level += 1
        for SalesReceiptModRq_ in self.SalesReceiptModRq:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptModRqType(\n')
            SalesReceiptModRq_.exportLiteral(outfile, level, name_='SalesReceiptModRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptQueryRq=[\n')
        level += 1
        for SalesReceiptQueryRq_ in self.SalesReceiptQueryRq:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptQueryRqType(\n')
            SalesReceiptQueryRq_.exportLiteral(outfile, level, name_='SalesReceiptQueryRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('onError', node)
        if value is not None and 'onError' not in already_processed:
            already_processed.append('onError')
            self.onError = value
            self.validate_STRTYPE(self.onError)    # validate type STRTYPE
        value = find_attr_value_('responseData', node)
        if value is not None and 'responseData' not in already_processed:
            already_processed.append('responseData')
            self.responseData = value
            self.validate_STRTYPE(self.responseData)    # validate type STRTYPE
        value = find_attr_value_('oldMessageSetID', node)
        if value is not None and 'oldMessageSetID' not in already_processed:
            already_processed.append('oldMessageSetID')
            self.oldMessageSetID = value
            self.validate_STRTYPE(self.oldMessageSetID)    # validate type STRTYPE
        value = find_attr_value_('newMessageSetID', node)
        if value is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            self.newMessageSetID = value
            self.validate_STRTYPE(self.newMessageSetID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HostQueryRq':
            obj_ = HostQueryRqType.factory()
            obj_.build(child_)
            self.HostQueryRq.append(obj_)
        elif nodeName_ == 'CompanyQueryRq':
            obj_ = CompanyQueryRqType.factory()
            obj_.build(child_)
            self.CompanyQueryRq.append(obj_)
        elif nodeName_ == 'AccountQueryRq':
            obj_ = AccountQueryRqType.factory()
            obj_.build(child_)
            self.AccountQueryRq.append(obj_)
        elif nodeName_ == 'CustomerAddRq':
            obj_ = CustomerAddRqType.factory()
            obj_.build(child_)
            self.CustomerAddRq.append(obj_)
        elif nodeName_ == 'CustomerModRq':
            obj_ = CustomerModRqType.factory()
            obj_.build(child_)
            self.CustomerModRq.append(obj_)
        elif nodeName_ == 'CustomerQueryRq':
            obj_ = CustomerQueryRqType.factory()
            obj_.build(child_)
            self.CustomerQueryRq.append(obj_)
        elif nodeName_ == 'ItemInventoryAddRq':
            obj_ = ItemInventoryAddRqType.factory()
            obj_.build(child_)
            self.ItemInventoryAddRq.append(obj_)
        elif nodeName_ == 'ItemInventoryModRq':
            obj_ = ItemInventoryModRqType.factory()
            obj_.build(child_)
            self.ItemInventoryModRq.append(obj_)
        elif nodeName_ == 'ItemInventoryQueryRq':
            obj_ = ItemInventoryQueryRqType.factory()
            obj_.build(child_)
            self.ItemInventoryQueryRq.append(obj_)
        elif nodeName_ == 'ItemQueryRq':
            obj_ = ItemQueryRqType.factory()
            obj_.build(child_)
            self.ItemQueryRq.append(obj_)
        elif nodeName_ == 'SalesReceiptAddRq':
            obj_ = SalesReceiptAddRqType.factory()
            obj_.build(child_)
            self.SalesReceiptAddRq.append(obj_)
        elif nodeName_ == 'SalesReceiptModRq':
            obj_ = SalesReceiptModRqType.factory()
            obj_.build(child_)
            self.SalesReceiptModRq.append(obj_)
        elif nodeName_ == 'SalesReceiptQueryRq':
            obj_ = SalesReceiptQueryRqType.factory()
            obj_.build(child_)
            self.SalesReceiptQueryRq.append(obj_)
# end class QBXMLMsgsRq


class QBXMLMsgsRs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, newMessageSetID=None, messageSetStatusCode=None, HostQueryRs=None, CompanyQueryRs=None, CustomerAddRs=None, CustomerModRs=None, CustomerQueryRs=None, ItemInventoryAddRs=None, ItemInventoryModRs=None, ItemInventoryQueryRs=None, ItemQueryRs=None, SalesReceiptAddRs=None, SalesReceiptModRs=None, SalesReceiptQueryRs=None):
        self.newMessageSetID = _cast(None, newMessageSetID)
        self.messageSetStatusCode = _cast(None, messageSetStatusCode)
        if HostQueryRs is None:
            self.HostQueryRs = []
        else:
            self.HostQueryRs = HostQueryRs
        if CompanyQueryRs is None:
            self.CompanyQueryRs = []
        else:
            self.CompanyQueryRs = CompanyQueryRs
        if CustomerAddRs is None:
            self.CustomerAddRs = []
        else:
            self.CustomerAddRs = CustomerAddRs
        if CustomerModRs is None:
            self.CustomerModRs = []
        else:
            self.CustomerModRs = CustomerModRs
        if CustomerQueryRs is None:
            self.CustomerQueryRs = []
        else:
            self.CustomerQueryRs = CustomerQueryRs
        if ItemInventoryAddRs is None:
            self.ItemInventoryAddRs = []
        else:
            self.ItemInventoryAddRs = ItemInventoryAddRs
        if ItemInventoryModRs is None:
            self.ItemInventoryModRs = []
        else:
            self.ItemInventoryModRs = ItemInventoryModRs
        if ItemInventoryQueryRs is None:
            self.ItemInventoryQueryRs = []
        else:
            self.ItemInventoryQueryRs = ItemInventoryQueryRs
        if ItemQueryRs is None:
            self.ItemQueryRs = []
        else:
            self.ItemQueryRs = ItemQueryRs
        if SalesReceiptAddRs is None:
            self.SalesReceiptAddRs = []
        else:
            self.SalesReceiptAddRs = SalesReceiptAddRs
        if SalesReceiptModRs is None:
            self.SalesReceiptModRs = []
        else:
            self.SalesReceiptModRs = SalesReceiptModRs
        if SalesReceiptQueryRs is None:
            self.SalesReceiptQueryRs = []
        else:
            self.SalesReceiptQueryRs = SalesReceiptQueryRs
    def factory(*args_, **kwargs_):
        if QBXMLMsgsRs.subclass:
            return QBXMLMsgsRs.subclass(*args_, **kwargs_)
        else:
            return QBXMLMsgsRs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HostQueryRs(self): return self.HostQueryRs
    def set_HostQueryRs(self, HostQueryRs): self.HostQueryRs = HostQueryRs
    def add_HostQueryRs(self, value): self.HostQueryRs.append(value)
    def insert_HostQueryRs(self, index, value): self.HostQueryRs[index] = value
    def get_CompanyQueryRs(self): return self.CompanyQueryRs
    def set_CompanyQueryRs(self, CompanyQueryRs): self.CompanyQueryRs = CompanyQueryRs
    def add_CompanyQueryRs(self, value): self.CompanyQueryRs.append(value)
    def insert_CompanyQueryRs(self, index, value): self.CompanyQueryRs[index] = value
    def get_CustomerAddRs(self): return self.CustomerAddRs
    def set_CustomerAddRs(self, CustomerAddRs): self.CustomerAddRs = CustomerAddRs
    def add_CustomerAddRs(self, value): self.CustomerAddRs.append(value)
    def insert_CustomerAddRs(self, index, value): self.CustomerAddRs[index] = value
    def get_CustomerModRs(self): return self.CustomerModRs
    def set_CustomerModRs(self, CustomerModRs): self.CustomerModRs = CustomerModRs
    def add_CustomerModRs(self, value): self.CustomerModRs.append(value)
    def insert_CustomerModRs(self, index, value): self.CustomerModRs[index] = value
    def get_CustomerQueryRs(self): return self.CustomerQueryRs
    def set_CustomerQueryRs(self, CustomerQueryRs): self.CustomerQueryRs = CustomerQueryRs
    def add_CustomerQueryRs(self, value): self.CustomerQueryRs.append(value)
    def insert_CustomerQueryRs(self, index, value): self.CustomerQueryRs[index] = value
    def get_ItemInventoryAddRs(self): return self.ItemInventoryAddRs
    def set_ItemInventoryAddRs(self, ItemInventoryAddRs): self.ItemInventoryAddRs = ItemInventoryAddRs
    def add_ItemInventoryAddRs(self, value): self.ItemInventoryAddRs.append(value)
    def insert_ItemInventoryAddRs(self, index, value): self.ItemInventoryAddRs[index] = value
    def get_ItemInventoryModRs(self): return self.ItemInventoryModRs
    def set_ItemInventoryModRs(self, ItemInventoryModRs): self.ItemInventoryModRs = ItemInventoryModRs
    def add_ItemInventoryModRs(self, value): self.ItemInventoryModRs.append(value)
    def insert_ItemInventoryModRs(self, index, value): self.ItemInventoryModRs[index] = value
    def get_ItemInventoryQueryRs(self): return self.ItemInventoryQueryRs
    def set_ItemInventoryQueryRs(self, ItemInventoryQueryRs): self.ItemInventoryQueryRs = ItemInventoryQueryRs
    def add_ItemInventoryQueryRs(self, value): self.ItemInventoryQueryRs.append(value)
    def insert_ItemInventoryQueryRs(self, index, value): self.ItemInventoryQueryRs[index] = value
    def get_ItemQueryRs(self): return self.ItemQueryRs
    def set_ItemQueryRs(self, ItemQueryRs): self.ItemQueryRs = ItemQueryRs
    def add_ItemQueryRs(self, value): self.ItemQueryRs.append(value)
    def insert_ItemQueryRs(self, index, value): self.ItemQueryRs[index] = value
    def get_SalesReceiptAddRs(self): return self.SalesReceiptAddRs
    def set_SalesReceiptAddRs(self, SalesReceiptAddRs): self.SalesReceiptAddRs = SalesReceiptAddRs
    def add_SalesReceiptAddRs(self, value): self.SalesReceiptAddRs.append(value)
    def insert_SalesReceiptAddRs(self, index, value): self.SalesReceiptAddRs[index] = value
    def get_SalesReceiptModRs(self): return self.SalesReceiptModRs
    def set_SalesReceiptModRs(self, SalesReceiptModRs): self.SalesReceiptModRs = SalesReceiptModRs
    def add_SalesReceiptModRs(self, value): self.SalesReceiptModRs.append(value)
    def insert_SalesReceiptModRs(self, index, value): self.SalesReceiptModRs[index] = value
    def get_SalesReceiptQueryRs(self): return self.SalesReceiptQueryRs
    def set_SalesReceiptQueryRs(self, SalesReceiptQueryRs): self.SalesReceiptQueryRs = SalesReceiptQueryRs
    def add_SalesReceiptQueryRs(self, value): self.SalesReceiptQueryRs.append(value)
    def insert_SalesReceiptQueryRs(self, index, value): self.SalesReceiptQueryRs[index] = value
    def get_newMessageSetID(self): return self.newMessageSetID
    def set_newMessageSetID(self, newMessageSetID): self.newMessageSetID = newMessageSetID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_messageSetStatusCode(self): return self.messageSetStatusCode
    def set_messageSetStatusCode(self, messageSetStatusCode): self.messageSetStatusCode = messageSetStatusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='QBXMLMsgsRs', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QBXMLMsgsRs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QBXMLMsgsRs'):
        if self.newMessageSetID is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            outfile.write(' newMessageSetID=%s' % (quote_attrib(self.newMessageSetID), ))
        if self.messageSetStatusCode is not None and 'messageSetStatusCode' not in already_processed:
            already_processed.append('messageSetStatusCode')
            outfile.write(' messageSetStatusCode=%s' % (quote_attrib(self.messageSetStatusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='QBXMLMsgsRs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for HostQueryRs_ in self.HostQueryRs:
            HostQueryRs_.export(outfile, level, namespace_, name_='HostQueryRs', pretty_print=pretty_print)
        for CompanyQueryRs_ in self.CompanyQueryRs:
            CompanyQueryRs_.export(outfile, level, namespace_, name_='CompanyQueryRs', pretty_print=pretty_print)
        for CustomerAddRs_ in self.CustomerAddRs:
            CustomerAddRs_.export(outfile, level, namespace_, name_='CustomerAddRs', pretty_print=pretty_print)
        for CustomerModRs_ in self.CustomerModRs:
            CustomerModRs_.export(outfile, level, namespace_, name_='CustomerModRs', pretty_print=pretty_print)
        for CustomerQueryRs_ in self.CustomerQueryRs:
            CustomerQueryRs_.export(outfile, level, namespace_, name_='CustomerQueryRs', pretty_print=pretty_print)
        for ItemInventoryAddRs_ in self.ItemInventoryAddRs:
            ItemInventoryAddRs_.export(outfile, level, namespace_, name_='ItemInventoryAddRs', pretty_print=pretty_print)
        for ItemInventoryModRs_ in self.ItemInventoryModRs:
            ItemInventoryModRs_.export(outfile, level, namespace_, name_='ItemInventoryModRs', pretty_print=pretty_print)
        for ItemInventoryQueryRs_ in self.ItemInventoryQueryRs:
            ItemInventoryQueryRs_.export(outfile, level, namespace_, name_='ItemInventoryQueryRs', pretty_print=pretty_print)
        for ItemQueryRs_ in self.ItemQueryRs:
            ItemQueryRs_.export(outfile, level, namespace_, name_='ItemQueryRs', pretty_print=pretty_print)
        for SalesReceiptAddRs_ in self.SalesReceiptAddRs:
            SalesReceiptAddRs_.export(outfile, level, namespace_, name_='SalesReceiptAddRs', pretty_print=pretty_print)
        for SalesReceiptModRs_ in self.SalesReceiptModRs:
            SalesReceiptModRs_.export(outfile, level, namespace_, name_='SalesReceiptModRs', pretty_print=pretty_print)
        for SalesReceiptQueryRs_ in self.SalesReceiptQueryRs:
            SalesReceiptQueryRs_.export(outfile, level, namespace_, name_='SalesReceiptQueryRs', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.HostQueryRs or
            self.CompanyQueryRs or
            self.CustomerAddRs or
            self.CustomerModRs or
            self.CustomerQueryRs or
            self.ItemInventoryAddRs or
            self.ItemInventoryModRs or
            self.ItemInventoryQueryRs or
            self.ItemQueryRs or
            self.SalesReceiptAddRs or
            self.SalesReceiptModRs or
            self.SalesReceiptQueryRs
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QBXMLMsgsRs'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.newMessageSetID is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            showIndent(outfile, level)
            outfile.write('newMessageSetID = "%s",\n' % (self.newMessageSetID,))
        if self.messageSetStatusCode is not None and 'messageSetStatusCode' not in already_processed:
            already_processed.append('messageSetStatusCode')
            showIndent(outfile, level)
            outfile.write('messageSetStatusCode = %d,\n' % (self.messageSetStatusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('HostQueryRs=[\n')
        level += 1
        for HostQueryRs_ in self.HostQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.HostQueryRsType(\n')
            HostQueryRs_.exportLiteral(outfile, level, name_='HostQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CompanyQueryRs=[\n')
        level += 1
        for CompanyQueryRs_ in self.CompanyQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.CompanyQueryRsType(\n')
            CompanyQueryRs_.exportLiteral(outfile, level, name_='CompanyQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerAddRs=[\n')
        level += 1
        for CustomerAddRs_ in self.CustomerAddRs:
            showIndent(outfile, level)
            outfile.write('model_.CustomerAddRsType(\n')
            CustomerAddRs_.exportLiteral(outfile, level, name_='CustomerAddRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerModRs=[\n')
        level += 1
        for CustomerModRs_ in self.CustomerModRs:
            showIndent(outfile, level)
            outfile.write('model_.CustomerModRsType(\n')
            CustomerModRs_.exportLiteral(outfile, level, name_='CustomerModRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('CustomerQueryRs=[\n')
        level += 1
        for CustomerQueryRs_ in self.CustomerQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.CustomerQueryRsType(\n')
            CustomerQueryRs_.exportLiteral(outfile, level, name_='CustomerQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryAddRs=[\n')
        level += 1
        for ItemInventoryAddRs_ in self.ItemInventoryAddRs:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryAddRsType(\n')
            ItemInventoryAddRs_.exportLiteral(outfile, level, name_='ItemInventoryAddRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryModRs=[\n')
        level += 1
        for ItemInventoryModRs_ in self.ItemInventoryModRs:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryModRsType(\n')
            ItemInventoryModRs_.exportLiteral(outfile, level, name_='ItemInventoryModRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryQueryRs=[\n')
        level += 1
        for ItemInventoryQueryRs_ in self.ItemInventoryQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryQueryRsType(\n')
            ItemInventoryQueryRs_.exportLiteral(outfile, level, name_='ItemInventoryQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemQueryRs=[\n')
        level += 1
        for ItemQueryRs_ in self.ItemQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.ItemQueryRsType(\n')
            ItemQueryRs_.exportLiteral(outfile, level, name_='ItemQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptAddRs=[\n')
        level += 1
        for SalesReceiptAddRs_ in self.SalesReceiptAddRs:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptAddRsType(\n')
            SalesReceiptAddRs_.exportLiteral(outfile, level, name_='SalesReceiptAddRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptModRs=[\n')
        level += 1
        for SalesReceiptModRs_ in self.SalesReceiptModRs:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptModRsType(\n')
            SalesReceiptModRs_.exportLiteral(outfile, level, name_='SalesReceiptModRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptQueryRs=[\n')
        level += 1
        for SalesReceiptQueryRs_ in self.SalesReceiptQueryRs:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptQueryRsType(\n')
            SalesReceiptQueryRs_.exportLiteral(outfile, level, name_='SalesReceiptQueryRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('newMessageSetID', node)
        if value is not None and 'newMessageSetID' not in already_processed:
            already_processed.append('newMessageSetID')
            self.newMessageSetID = value
            self.validate_STRTYPE(self.newMessageSetID)    # validate type STRTYPE
        value = find_attr_value_('messageSetStatusCode', node)
        if value is not None and 'messageSetStatusCode' not in already_processed:
            already_processed.append('messageSetStatusCode')
            try:
                self.messageSetStatusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.messageSetStatusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HostQueryRs':
            obj_ = HostQueryRsType.factory()
            obj_.build(child_)
            self.HostQueryRs.append(obj_)
        elif nodeName_ == 'CompanyQueryRs':
            obj_ = CompanyQueryRsType.factory()
            obj_.build(child_)
            self.CompanyQueryRs.append(obj_)
        elif nodeName_ == 'CustomerAddRs':
            obj_ = CustomerAddRsType.factory()
            obj_.build(child_)
            self.CustomerAddRs.append(obj_)
        elif nodeName_ == 'CustomerModRs':
            obj_ = CustomerModRsType.factory()
            obj_.build(child_)
            self.CustomerModRs.append(obj_)
        elif nodeName_ == 'CustomerQueryRs':
            obj_ = CustomerQueryRsType.factory()
            obj_.build(child_)
            self.CustomerQueryRs.append(obj_)
        elif nodeName_ == 'ItemInventoryAddRs':
            obj_ = ItemInventoryAddRsType.factory()
            obj_.build(child_)
            self.ItemInventoryAddRs.append(obj_)
        elif nodeName_ == 'ItemInventoryModRs':
            obj_ = ItemInventoryModRsType.factory()
            obj_.build(child_)
            self.ItemInventoryModRs.append(obj_)
        elif nodeName_ == 'ItemInventoryQueryRs':
            obj_ = ItemInventoryQueryRsType.factory()
            obj_.build(child_)
            self.ItemInventoryQueryRs.append(obj_)
        elif nodeName_ == 'ItemQueryRs':
            obj_ = ItemQueryRsType.factory()
            obj_.build(child_)
            self.ItemQueryRs.append(obj_)
        elif nodeName_ == 'SalesReceiptAddRs':
            obj_ = SalesReceiptAddRsType.factory()
            obj_.build(child_)
            self.SalesReceiptAddRs.append(obj_)
        elif nodeName_ == 'SalesReceiptModRs':
            obj_ = SalesReceiptModRsType.factory()
            obj_.build(child_)
            self.SalesReceiptModRs.append(obj_)
        elif nodeName_ == 'SalesReceiptQueryRs':
            obj_ = SalesReceiptQueryRsType.factory()
            obj_.build(child_)
            self.SalesReceiptQueryRs.append(obj_)
# end class QBXMLMsgsRs


class HostQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, IncludeListMetaData=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.IncludeListMetaData = IncludeListMetaData
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if HostQueryRqType.subclass:
            return HostQueryRqType.subclass(*args_, **kwargs_)
        else:
            return HostQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IncludeListMetaData(self): return self.IncludeListMetaData
    def set_IncludeListMetaData(self, IncludeListMetaData): self.IncludeListMetaData = IncludeListMetaData
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='HostQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HostQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HostQueryRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='HostQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IncludeListMetaData is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeListMetaData>%s</%sIncludeListMetaData>%s' % (namespace_, self.gds_format_string(quote_xml(self.IncludeListMetaData).encode(ExternalEncoding), input_name='IncludeListMetaData'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.IncludeListMetaData is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='HostQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IncludeListMetaData is not None:
            showIndent(outfile, level)
            outfile.write('IncludeListMetaData=%s,\n' % quote_python(self.IncludeListMetaData).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IncludeListMetaData':
            IncludeListMetaData_ = child_.text
            IncludeListMetaData_ = self.gds_validate_string(IncludeListMetaData_, node, 'IncludeListMetaData')
            self.IncludeListMetaData = IncludeListMetaData_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class HostQueryRqType


class IncludeRetElement(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if IncludeRetElement.subclass:
            return IncludeRetElement.subclass(*args_, **kwargs_)
        else:
            return IncludeRetElement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='IncludeRetElement', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IncludeRetElement')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IncludeRetElement'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IncludeRetElement', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IncludeRetElement'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class IncludeRetElement


class CompanyQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, IncludeRetElement=None, OwnerID=None):
        self.requestID = _cast(None, requestID)
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if CompanyQueryRqType.subclass:
            return CompanyQueryRqType.subclass(*args_, **kwargs_)
        else:
            return CompanyQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='CompanyQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyQueryRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class CompanyQueryRqType


class AccountQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, metaData='NoMetaData', ListID=None, FullName=None, MaxReturned=None, ActiveStatus=None, FromModifiedDate=None, ToModifiedDate=None, NameFilter=None, NameRangeFilter=None, AccountType=None, CurrencyFilter=None, IncludeRetElement=None, OwnerID=None):
        self.requestID = _cast(None, requestID)
        self.metaData = _cast(None, metaData)
        if ListID is None:
            self.ListID = []
        else:
            self.ListID = ListID
        if FullName is None:
            self.FullName = []
        else:
            self.FullName = FullName
        self.MaxReturned = MaxReturned
        self.ActiveStatus = ActiveStatus
        self.FromModifiedDate = FromModifiedDate
        self.ToModifiedDate = ToModifiedDate
        self.NameFilter = NameFilter
        self.NameRangeFilter = NameRangeFilter
        if AccountType is None:
            self.AccountType = []
        else:
            self.AccountType = AccountType
        self.CurrencyFilter = CurrencyFilter
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if AccountQueryRqType.subclass:
            return AccountQueryRqType.subclass(*args_, **kwargs_)
        else:
            return AccountQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def add_ListID(self, value): self.ListID.append(value)
    def insert_ListID(self, index, value): self.ListID[index] = value
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def add_FullName(self, value): self.FullName.append(value)
    def insert_FullName(self, index, value): self.FullName[index] = value
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def get_MaxReturned(self): return self.MaxReturned
    def set_MaxReturned(self, MaxReturned): self.MaxReturned = MaxReturned
    def get_ActiveStatus(self): return self.ActiveStatus
    def set_ActiveStatus(self, ActiveStatus): self.ActiveStatus = ActiveStatus
    def get_FromModifiedDate(self): return self.FromModifiedDate
    def set_FromModifiedDate(self, FromModifiedDate): self.FromModifiedDate = FromModifiedDate
    def get_ToModifiedDate(self): return self.ToModifiedDate
    def set_ToModifiedDate(self, ToModifiedDate): self.ToModifiedDate = ToModifiedDate
    def get_NameFilter(self): return self.NameFilter
    def set_NameFilter(self, NameFilter): self.NameFilter = NameFilter
    def get_NameRangeFilter(self): return self.NameRangeFilter
    def set_NameRangeFilter(self, NameRangeFilter): self.NameRangeFilter = NameRangeFilter
    def get_AccountType(self): return self.AccountType
    def set_AccountType(self, AccountType): self.AccountType = AccountType
    def add_AccountType(self, value): self.AccountType.append(value)
    def insert_AccountType(self, index, value): self.AccountType[index] = value
    def get_CurrencyFilter(self): return self.CurrencyFilter
    def set_CurrencyFilter(self, CurrencyFilter): self.CurrencyFilter = CurrencyFilter
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_metaData(self): return self.metaData
    def set_metaData(self, metaData): self.metaData = metaData
    def export(self, outfile, level, namespace_='', name_='AccountQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountQueryRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            outfile.write(' metaData=%s' % (quote_attrib(self.metaData), ))
    def exportChildren(self, outfile, level, namespace_='', name_='AccountQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ListID_ in self.ListID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(ListID_).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        for FullName_ in self.FullName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(FullName_).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.MaxReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxReturned>%s</%sMaxReturned>%s' % (namespace_, self.gds_format_string(quote_xml(self.MaxReturned).encode(ExternalEncoding), input_name='MaxReturned'), namespace_, eol_))
        if self.ActiveStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveStatus>%s</%sActiveStatus>%s' % (namespace_, self.gds_format_string(quote_xml(self.ActiveStatus).encode(ExternalEncoding), input_name='ActiveStatus'), namespace_, eol_))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromModifiedDate>%s</%sFromModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.FromModifiedDate).encode(ExternalEncoding), input_name='FromModifiedDate'), namespace_, eol_))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToModifiedDate>%s</%sToModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ToModifiedDate).encode(ExternalEncoding), input_name='ToModifiedDate'), namespace_, eol_))
        if self.NameFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameFilter>%s</%sNameFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameFilter).encode(ExternalEncoding), input_name='NameFilter'), namespace_, eol_))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameRangeFilter>%s</%sNameRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameRangeFilter).encode(ExternalEncoding), input_name='NameRangeFilter'), namespace_, eol_))
        for AccountType_ in self.AccountType:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountType>%s</%sAccountType>%s' % (namespace_, self.gds_format_string(quote_xml(AccountType_).encode(ExternalEncoding), input_name='AccountType'), namespace_, eol_))
        if self.CurrencyFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyFilter>%s</%sCurrencyFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyFilter).encode(ExternalEncoding), input_name='CurrencyFilter'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID or
            self.FullName or
            self.MaxReturned is not None or
            self.ActiveStatus is not None or
            self.FromModifiedDate is not None or
            self.ToModifiedDate is not None or
            self.NameFilter is not None or
            self.NameRangeFilter is not None or
            self.AccountType or
            self.CurrencyFilter is not None or
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AccountQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            showIndent(outfile, level)
            outfile.write('metaData = "%s",\n' % (self.metaData,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ListID=[\n')
        level += 1
        for ListID_ in self.ListID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ListID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FullName=[\n')
        level += 1
        for FullName_ in self.FullName:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(FullName_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.MaxReturned is not None:
            showIndent(outfile, level)
            outfile.write('MaxReturned=%s,\n' % quote_python(self.MaxReturned).encode(ExternalEncoding))
        if self.ActiveStatus is not None:
            showIndent(outfile, level)
            outfile.write('ActiveStatus=%s,\n' % quote_python(self.ActiveStatus).encode(ExternalEncoding))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('FromModifiedDate=%s,\n' % quote_python(self.FromModifiedDate).encode(ExternalEncoding))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('ToModifiedDate=%s,\n' % quote_python(self.ToModifiedDate).encode(ExternalEncoding))
        if self.NameFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameFilter=%s,\n' % quote_python(self.NameFilter).encode(ExternalEncoding))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameRangeFilter=%s,\n' % quote_python(self.NameRangeFilter).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AccountType=[\n')
        level += 1
        for AccountType_ in self.AccountType:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(AccountType_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CurrencyFilter is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyFilter=%s,\n' % quote_python(self.CurrencyFilter).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('metaData', node)
        if value is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            self.metaData = value
            self.validate_STRTYPE(self.metaData)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID.append(ListID_)
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName.append(FullName_)
            self.validate_FullName(self.FullName)    # validate type FullName
        elif nodeName_ == 'MaxReturned':
            MaxReturned_ = child_.text
            MaxReturned_ = self.gds_validate_string(MaxReturned_, node, 'MaxReturned')
            self.MaxReturned = MaxReturned_
        elif nodeName_ == 'ActiveStatus':
            ActiveStatus_ = child_.text
            ActiveStatus_ = self.gds_validate_string(ActiveStatus_, node, 'ActiveStatus')
            self.ActiveStatus = ActiveStatus_
        elif nodeName_ == 'FromModifiedDate':
            FromModifiedDate_ = child_.text
            FromModifiedDate_ = self.gds_validate_string(FromModifiedDate_, node, 'FromModifiedDate')
            self.FromModifiedDate = FromModifiedDate_
        elif nodeName_ == 'ToModifiedDate':
            ToModifiedDate_ = child_.text
            ToModifiedDate_ = self.gds_validate_string(ToModifiedDate_, node, 'ToModifiedDate')
            self.ToModifiedDate = ToModifiedDate_
        elif nodeName_ == 'NameFilter':
            NameFilter_ = child_.text
            NameFilter_ = self.gds_validate_string(NameFilter_, node, 'NameFilter')
            self.NameFilter = NameFilter_
        elif nodeName_ == 'NameRangeFilter':
            NameRangeFilter_ = child_.text
            NameRangeFilter_ = self.gds_validate_string(NameRangeFilter_, node, 'NameRangeFilter')
            self.NameRangeFilter = NameRangeFilter_
        elif nodeName_ == 'AccountType':
            AccountType_ = child_.text
            AccountType_ = self.gds_validate_string(AccountType_, node, 'AccountType')
            self.AccountType.append(AccountType_)
        elif nodeName_ == 'CurrencyFilter':
            CurrencyFilter_ = child_.text
            CurrencyFilter_ = self.gds_validate_string(CurrencyFilter_, node, 'CurrencyFilter')
            self.CurrencyFilter = CurrencyFilter_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class AccountQueryRqType


class CustomerAddRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, CustomerAdd=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.CustomerAdd = CustomerAdd
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if CustomerAddRqType.subclass:
            return CustomerAddRqType.subclass(*args_, **kwargs_)
        else:
            return CustomerAddRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerAdd(self): return self.CustomerAdd
    def set_CustomerAdd(self, CustomerAdd): self.CustomerAdd = CustomerAdd
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='CustomerAddRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerAddRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerAddRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerAddRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerAdd is not None:
            self.CustomerAdd.export(outfile, level, namespace_, name_='CustomerAdd', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.CustomerAdd is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerAddRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerAdd is not None:
            showIndent(outfile, level)
            outfile.write('CustomerAdd=model_.CustomerAdd(\n')
            self.CustomerAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerAdd':
            obj_ = CustomerAdd.factory()
            obj_.build(child_)
            self.set_CustomerAdd(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class CustomerAddRqType


class CustomerModRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, CustomerMod=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.CustomerMod = CustomerMod
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if CustomerModRqType.subclass:
            return CustomerModRqType.subclass(*args_, **kwargs_)
        else:
            return CustomerModRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerMod(self): return self.CustomerMod
    def set_CustomerMod(self, CustomerMod): self.CustomerMod = CustomerMod
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='CustomerModRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerModRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerModRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerModRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerMod is not None:
            self.CustomerMod.export(outfile, level, namespace_, name_='CustomerMod', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.CustomerMod is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerModRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerMod is not None:
            showIndent(outfile, level)
            outfile.write('CustomerMod=model_.CustomerMod(\n')
            self.CustomerMod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerMod':
            obj_ = CustomerMod.factory()
            obj_.build(child_)
            self.set_CustomerMod(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class CustomerModRqType


class CustomerQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, requestID=None, iterator=None, metaData='NoMetaData', ListID=None, FullName=None, MaxReturned=None, ActiveStatus=None, FromModifiedDate=None, ToModifiedDate=None, NameFilter=None, NameRangeFilter=None, TotalBalanceFilter=None, CurrencyFilter=None, ClassFilter=None, IncludeRetElement=None, OwnerID=None):
        self.iteratorID = _cast(None, iteratorID)
        self.requestID = _cast(None, requestID)
        self.iterator = _cast(None, iterator)
        self.metaData = _cast(None, metaData)
        if ListID is None:
            self.ListID = []
        else:
            self.ListID = ListID
        if FullName is None:
            self.FullName = []
        else:
            self.FullName = FullName
        self.MaxReturned = MaxReturned
        self.ActiveStatus = ActiveStatus
        self.FromModifiedDate = FromModifiedDate
        self.ToModifiedDate = ToModifiedDate
        self.NameFilter = NameFilter
        self.NameRangeFilter = NameRangeFilter
        self.TotalBalanceFilter = TotalBalanceFilter
        self.CurrencyFilter = CurrencyFilter
        self.ClassFilter = ClassFilter
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if CustomerQueryRqType.subclass:
            return CustomerQueryRqType.subclass(*args_, **kwargs_)
        else:
            return CustomerQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def add_ListID(self, value): self.ListID.append(value)
    def insert_ListID(self, index, value): self.ListID[index] = value
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def add_FullName(self, value): self.FullName.append(value)
    def insert_FullName(self, index, value): self.FullName[index] = value
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def get_MaxReturned(self): return self.MaxReturned
    def set_MaxReturned(self, MaxReturned): self.MaxReturned = MaxReturned
    def get_ActiveStatus(self): return self.ActiveStatus
    def set_ActiveStatus(self, ActiveStatus): self.ActiveStatus = ActiveStatus
    def get_FromModifiedDate(self): return self.FromModifiedDate
    def set_FromModifiedDate(self, FromModifiedDate): self.FromModifiedDate = FromModifiedDate
    def get_ToModifiedDate(self): return self.ToModifiedDate
    def set_ToModifiedDate(self, ToModifiedDate): self.ToModifiedDate = ToModifiedDate
    def get_NameFilter(self): return self.NameFilter
    def set_NameFilter(self, NameFilter): self.NameFilter = NameFilter
    def get_NameRangeFilter(self): return self.NameRangeFilter
    def set_NameRangeFilter(self, NameRangeFilter): self.NameRangeFilter = NameRangeFilter
    def get_TotalBalanceFilter(self): return self.TotalBalanceFilter
    def set_TotalBalanceFilter(self, TotalBalanceFilter): self.TotalBalanceFilter = TotalBalanceFilter
    def get_CurrencyFilter(self): return self.CurrencyFilter
    def set_CurrencyFilter(self, CurrencyFilter): self.CurrencyFilter = CurrencyFilter
    def get_ClassFilter(self): return self.ClassFilter
    def set_ClassFilter(self, ClassFilter): self.ClassFilter = ClassFilter
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_iterator(self): return self.iterator
    def set_iterator(self, iterator): self.iterator = iterator
    def get_metaData(self): return self.metaData
    def set_metaData(self, metaData): self.metaData = metaData
    def export(self, outfile, level, namespace_='', name_='CustomerQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerQueryRqType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            outfile.write(' iterator=%s' % (quote_attrib(self.iterator), ))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            outfile.write(' metaData=%s' % (quote_attrib(self.metaData), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ListID_ in self.ListID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(ListID_).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        for FullName_ in self.FullName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(FullName_).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.MaxReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxReturned>%s</%sMaxReturned>%s' % (namespace_, self.gds_format_string(quote_xml(self.MaxReturned).encode(ExternalEncoding), input_name='MaxReturned'), namespace_, eol_))
        if self.ActiveStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveStatus>%s</%sActiveStatus>%s' % (namespace_, self.gds_format_string(quote_xml(self.ActiveStatus).encode(ExternalEncoding), input_name='ActiveStatus'), namespace_, eol_))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromModifiedDate>%s</%sFromModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.FromModifiedDate).encode(ExternalEncoding), input_name='FromModifiedDate'), namespace_, eol_))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToModifiedDate>%s</%sToModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ToModifiedDate).encode(ExternalEncoding), input_name='ToModifiedDate'), namespace_, eol_))
        if self.NameFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameFilter>%s</%sNameFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameFilter).encode(ExternalEncoding), input_name='NameFilter'), namespace_, eol_))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameRangeFilter>%s</%sNameRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameRangeFilter).encode(ExternalEncoding), input_name='NameRangeFilter'), namespace_, eol_))
        if self.TotalBalanceFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalBalanceFilter>%s</%sTotalBalanceFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalBalanceFilter).encode(ExternalEncoding), input_name='TotalBalanceFilter'), namespace_, eol_))
        if self.CurrencyFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyFilter>%s</%sCurrencyFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyFilter).encode(ExternalEncoding), input_name='CurrencyFilter'), namespace_, eol_))
        if self.ClassFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassFilter>%s</%sClassFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClassFilter).encode(ExternalEncoding), input_name='ClassFilter'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID or
            self.FullName or
            self.MaxReturned is not None or
            self.ActiveStatus is not None or
            self.FromModifiedDate is not None or
            self.ToModifiedDate is not None or
            self.NameFilter is not None or
            self.NameRangeFilter is not None or
            self.TotalBalanceFilter is not None or
            self.CurrencyFilter is not None or
            self.ClassFilter is not None or
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            showIndent(outfile, level)
            outfile.write('iterator = "%s",\n' % (self.iterator,))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            showIndent(outfile, level)
            outfile.write('metaData = "%s",\n' % (self.metaData,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ListID=[\n')
        level += 1
        for ListID_ in self.ListID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ListID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FullName=[\n')
        level += 1
        for FullName_ in self.FullName:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(FullName_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.MaxReturned is not None:
            showIndent(outfile, level)
            outfile.write('MaxReturned=%s,\n' % quote_python(self.MaxReturned).encode(ExternalEncoding))
        if self.ActiveStatus is not None:
            showIndent(outfile, level)
            outfile.write('ActiveStatus=%s,\n' % quote_python(self.ActiveStatus).encode(ExternalEncoding))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('FromModifiedDate=%s,\n' % quote_python(self.FromModifiedDate).encode(ExternalEncoding))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('ToModifiedDate=%s,\n' % quote_python(self.ToModifiedDate).encode(ExternalEncoding))
        if self.NameFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameFilter=%s,\n' % quote_python(self.NameFilter).encode(ExternalEncoding))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameRangeFilter=%s,\n' % quote_python(self.NameRangeFilter).encode(ExternalEncoding))
        if self.TotalBalanceFilter is not None:
            showIndent(outfile, level)
            outfile.write('TotalBalanceFilter=%s,\n' % quote_python(self.TotalBalanceFilter).encode(ExternalEncoding))
        if self.CurrencyFilter is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyFilter=%s,\n' % quote_python(self.CurrencyFilter).encode(ExternalEncoding))
        if self.ClassFilter is not None:
            showIndent(outfile, level)
            outfile.write('ClassFilter=%s,\n' % quote_python(self.ClassFilter).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('iterator', node)
        if value is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            self.iterator = value
            self.validate_STRTYPE(self.iterator)    # validate type STRTYPE
        value = find_attr_value_('metaData', node)
        if value is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            self.metaData = value
            self.validate_STRTYPE(self.metaData)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID.append(ListID_)
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName.append(FullName_)
            self.validate_FullName(self.FullName)    # validate type FullName
        elif nodeName_ == 'MaxReturned':
            MaxReturned_ = child_.text
            MaxReturned_ = self.gds_validate_string(MaxReturned_, node, 'MaxReturned')
            self.MaxReturned = MaxReturned_
        elif nodeName_ == 'ActiveStatus':
            ActiveStatus_ = child_.text
            ActiveStatus_ = self.gds_validate_string(ActiveStatus_, node, 'ActiveStatus')
            self.ActiveStatus = ActiveStatus_
        elif nodeName_ == 'FromModifiedDate':
            FromModifiedDate_ = child_.text
            FromModifiedDate_ = self.gds_validate_string(FromModifiedDate_, node, 'FromModifiedDate')
            self.FromModifiedDate = FromModifiedDate_
        elif nodeName_ == 'ToModifiedDate':
            ToModifiedDate_ = child_.text
            ToModifiedDate_ = self.gds_validate_string(ToModifiedDate_, node, 'ToModifiedDate')
            self.ToModifiedDate = ToModifiedDate_
        elif nodeName_ == 'NameFilter':
            NameFilter_ = child_.text
            NameFilter_ = self.gds_validate_string(NameFilter_, node, 'NameFilter')
            self.NameFilter = NameFilter_
        elif nodeName_ == 'NameRangeFilter':
            NameRangeFilter_ = child_.text
            NameRangeFilter_ = self.gds_validate_string(NameRangeFilter_, node, 'NameRangeFilter')
            self.NameRangeFilter = NameRangeFilter_
        elif nodeName_ == 'TotalBalanceFilter':
            TotalBalanceFilter_ = child_.text
            TotalBalanceFilter_ = self.gds_validate_string(TotalBalanceFilter_, node, 'TotalBalanceFilter')
            self.TotalBalanceFilter = TotalBalanceFilter_
        elif nodeName_ == 'CurrencyFilter':
            CurrencyFilter_ = child_.text
            CurrencyFilter_ = self.gds_validate_string(CurrencyFilter_, node, 'CurrencyFilter')
            self.CurrencyFilter = CurrencyFilter_
        elif nodeName_ == 'ClassFilter':
            ClassFilter_ = child_.text
            ClassFilter_ = self.gds_validate_string(ClassFilter_, node, 'ClassFilter')
            self.ClassFilter = ClassFilter_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class CustomerQueryRqType


class ItemInventoryAddRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, ItemInventoryAdd=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.ItemInventoryAdd = ItemInventoryAdd
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if ItemInventoryAddRqType.subclass:
            return ItemInventoryAddRqType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryAddRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryAdd(self): return self.ItemInventoryAdd
    def set_ItemInventoryAdd(self, ItemInventoryAdd): self.ItemInventoryAdd = ItemInventoryAdd
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='ItemInventoryAddRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryAddRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryAddRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryAddRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemInventoryAdd is not None:
            self.ItemInventoryAdd.export(outfile, level, namespace_, name_='ItemInventoryAdd', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ItemInventoryAdd is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryAddRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemInventoryAdd is not None:
            showIndent(outfile, level)
            outfile.write('ItemInventoryAdd=model_.ItemInventoryAdd(\n')
            self.ItemInventoryAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryAdd':
            obj_ = ItemInventoryAdd.factory()
            obj_.build(child_)
            self.set_ItemInventoryAdd(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class ItemInventoryAddRqType


class ItemInventoryModRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, ItemInventoryMod=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.ItemInventoryMod = ItemInventoryMod
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if ItemInventoryModRqType.subclass:
            return ItemInventoryModRqType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryModRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryMod(self): return self.ItemInventoryMod
    def set_ItemInventoryMod(self, ItemInventoryMod): self.ItemInventoryMod = ItemInventoryMod
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='ItemInventoryModRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryModRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryModRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryModRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemInventoryMod is not None:
            self.ItemInventoryMod.export(outfile, level, namespace_, name_='ItemInventoryMod', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ItemInventoryMod is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryModRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemInventoryMod is not None:
            showIndent(outfile, level)
            outfile.write('ItemInventoryMod=model_.ItemInventoryMod(\n')
            self.ItemInventoryMod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryMod':
            obj_ = ItemInventoryMod.factory()
            obj_.build(child_)
            self.set_ItemInventoryMod(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class ItemInventoryModRqType


class ItemInventoryQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, requestID=None, iterator=None, metaData='NoMetaData', ListID=None, FullName=None, MaxReturned=None, ActiveStatus=None, FromModifiedDate=None, ToModifiedDate=None, NameFilter=None, NameRangeFilter=None, ClassFilter=None, IncludeRetElement=None, OwnerID=None):
        self.iteratorID = _cast(None, iteratorID)
        self.requestID = _cast(None, requestID)
        self.iterator = _cast(None, iterator)
        self.metaData = _cast(None, metaData)
        if ListID is None:
            self.ListID = []
        else:
            self.ListID = ListID
        if FullName is None:
            self.FullName = []
        else:
            self.FullName = FullName
        self.MaxReturned = MaxReturned
        self.ActiveStatus = ActiveStatus
        self.FromModifiedDate = FromModifiedDate
        self.ToModifiedDate = ToModifiedDate
        self.NameFilter = NameFilter
        self.NameRangeFilter = NameRangeFilter
        self.ClassFilter = ClassFilter
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if ItemInventoryQueryRqType.subclass:
            return ItemInventoryQueryRqType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def add_ListID(self, value): self.ListID.append(value)
    def insert_ListID(self, index, value): self.ListID[index] = value
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def add_FullName(self, value): self.FullName.append(value)
    def insert_FullName(self, index, value): self.FullName[index] = value
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def get_MaxReturned(self): return self.MaxReturned
    def set_MaxReturned(self, MaxReturned): self.MaxReturned = MaxReturned
    def get_ActiveStatus(self): return self.ActiveStatus
    def set_ActiveStatus(self, ActiveStatus): self.ActiveStatus = ActiveStatus
    def get_FromModifiedDate(self): return self.FromModifiedDate
    def set_FromModifiedDate(self, FromModifiedDate): self.FromModifiedDate = FromModifiedDate
    def get_ToModifiedDate(self): return self.ToModifiedDate
    def set_ToModifiedDate(self, ToModifiedDate): self.ToModifiedDate = ToModifiedDate
    def get_NameFilter(self): return self.NameFilter
    def set_NameFilter(self, NameFilter): self.NameFilter = NameFilter
    def get_NameRangeFilter(self): return self.NameRangeFilter
    def set_NameRangeFilter(self, NameRangeFilter): self.NameRangeFilter = NameRangeFilter
    def get_ClassFilter(self): return self.ClassFilter
    def set_ClassFilter(self, ClassFilter): self.ClassFilter = ClassFilter
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_iterator(self): return self.iterator
    def set_iterator(self, iterator): self.iterator = iterator
    def get_metaData(self): return self.metaData
    def set_metaData(self, metaData): self.metaData = metaData
    def export(self, outfile, level, namespace_='', name_='ItemInventoryQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryQueryRqType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            outfile.write(' iterator=%s' % (quote_attrib(self.iterator), ))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            outfile.write(' metaData=%s' % (quote_attrib(self.metaData), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ListID_ in self.ListID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(ListID_).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        for FullName_ in self.FullName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(FullName_).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.MaxReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxReturned>%s</%sMaxReturned>%s' % (namespace_, self.gds_format_string(quote_xml(self.MaxReturned).encode(ExternalEncoding), input_name='MaxReturned'), namespace_, eol_))
        if self.ActiveStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveStatus>%s</%sActiveStatus>%s' % (namespace_, self.gds_format_string(quote_xml(self.ActiveStatus).encode(ExternalEncoding), input_name='ActiveStatus'), namespace_, eol_))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromModifiedDate>%s</%sFromModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.FromModifiedDate).encode(ExternalEncoding), input_name='FromModifiedDate'), namespace_, eol_))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToModifiedDate>%s</%sToModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ToModifiedDate).encode(ExternalEncoding), input_name='ToModifiedDate'), namespace_, eol_))
        if self.NameFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameFilter>%s</%sNameFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameFilter).encode(ExternalEncoding), input_name='NameFilter'), namespace_, eol_))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameRangeFilter>%s</%sNameRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameRangeFilter).encode(ExternalEncoding), input_name='NameRangeFilter'), namespace_, eol_))
        if self.ClassFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClassFilter>%s</%sClassFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClassFilter).encode(ExternalEncoding), input_name='ClassFilter'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID or
            self.FullName or
            self.MaxReturned is not None or
            self.ActiveStatus is not None or
            self.FromModifiedDate is not None or
            self.ToModifiedDate is not None or
            self.NameFilter is not None or
            self.NameRangeFilter is not None or
            self.ClassFilter is not None or
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            showIndent(outfile, level)
            outfile.write('iterator = "%s",\n' % (self.iterator,))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            showIndent(outfile, level)
            outfile.write('metaData = "%s",\n' % (self.metaData,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ListID=[\n')
        level += 1
        for ListID_ in self.ListID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ListID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FullName=[\n')
        level += 1
        for FullName_ in self.FullName:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(FullName_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.MaxReturned is not None:
            showIndent(outfile, level)
            outfile.write('MaxReturned=%s,\n' % quote_python(self.MaxReturned).encode(ExternalEncoding))
        if self.ActiveStatus is not None:
            showIndent(outfile, level)
            outfile.write('ActiveStatus=%s,\n' % quote_python(self.ActiveStatus).encode(ExternalEncoding))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('FromModifiedDate=%s,\n' % quote_python(self.FromModifiedDate).encode(ExternalEncoding))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('ToModifiedDate=%s,\n' % quote_python(self.ToModifiedDate).encode(ExternalEncoding))
        if self.NameFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameFilter=%s,\n' % quote_python(self.NameFilter).encode(ExternalEncoding))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameRangeFilter=%s,\n' % quote_python(self.NameRangeFilter).encode(ExternalEncoding))
        if self.ClassFilter is not None:
            showIndent(outfile, level)
            outfile.write('ClassFilter=%s,\n' % quote_python(self.ClassFilter).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('iterator', node)
        if value is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            self.iterator = value
            self.validate_STRTYPE(self.iterator)    # validate type STRTYPE
        value = find_attr_value_('metaData', node)
        if value is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            self.metaData = value
            self.validate_STRTYPE(self.metaData)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID.append(ListID_)
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName.append(FullName_)
            self.validate_FullName(self.FullName)    # validate type FullName
        elif nodeName_ == 'MaxReturned':
            MaxReturned_ = child_.text
            MaxReturned_ = self.gds_validate_string(MaxReturned_, node, 'MaxReturned')
            self.MaxReturned = MaxReturned_
        elif nodeName_ == 'ActiveStatus':
            ActiveStatus_ = child_.text
            ActiveStatus_ = self.gds_validate_string(ActiveStatus_, node, 'ActiveStatus')
            self.ActiveStatus = ActiveStatus_
        elif nodeName_ == 'FromModifiedDate':
            FromModifiedDate_ = child_.text
            FromModifiedDate_ = self.gds_validate_string(FromModifiedDate_, node, 'FromModifiedDate')
            self.FromModifiedDate = FromModifiedDate_
        elif nodeName_ == 'ToModifiedDate':
            ToModifiedDate_ = child_.text
            ToModifiedDate_ = self.gds_validate_string(ToModifiedDate_, node, 'ToModifiedDate')
            self.ToModifiedDate = ToModifiedDate_
        elif nodeName_ == 'NameFilter':
            NameFilter_ = child_.text
            NameFilter_ = self.gds_validate_string(NameFilter_, node, 'NameFilter')
            self.NameFilter = NameFilter_
        elif nodeName_ == 'NameRangeFilter':
            NameRangeFilter_ = child_.text
            NameRangeFilter_ = self.gds_validate_string(NameRangeFilter_, node, 'NameRangeFilter')
            self.NameRangeFilter = NameRangeFilter_
        elif nodeName_ == 'ClassFilter':
            ClassFilter_ = child_.text
            ClassFilter_ = self.gds_validate_string(ClassFilter_, node, 'ClassFilter')
            self.ClassFilter = ClassFilter_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class ItemInventoryQueryRqType


class ItemQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, requestID=None, iterator=None, metaData='NoMetaData', ListID=None, FullName=None, MaxReturned=None, ActiveStatus=None, FromModifiedDate=None, ToModifiedDate=None, NameFilter=None, NameRangeFilter=None, IncludeRetElement=None, OwnerID=None):
        self.iteratorID = _cast(None, iteratorID)
        self.requestID = _cast(None, requestID)
        self.iterator = _cast(None, iterator)
        self.metaData = _cast(None, metaData)
        if ListID is None:
            self.ListID = []
        else:
            self.ListID = ListID
        if FullName is None:
            self.FullName = []
        else:
            self.FullName = FullName
        self.MaxReturned = MaxReturned
        self.ActiveStatus = ActiveStatus
        self.FromModifiedDate = FromModifiedDate
        self.ToModifiedDate = ToModifiedDate
        self.NameFilter = NameFilter
        self.NameRangeFilter = NameRangeFilter
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if ItemQueryRqType.subclass:
            return ItemQueryRqType.subclass(*args_, **kwargs_)
        else:
            return ItemQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def add_ListID(self, value): self.ListID.append(value)
    def insert_ListID(self, index, value): self.ListID[index] = value
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def add_FullName(self, value): self.FullName.append(value)
    def insert_FullName(self, index, value): self.FullName[index] = value
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def get_MaxReturned(self): return self.MaxReturned
    def set_MaxReturned(self, MaxReturned): self.MaxReturned = MaxReturned
    def get_ActiveStatus(self): return self.ActiveStatus
    def set_ActiveStatus(self, ActiveStatus): self.ActiveStatus = ActiveStatus
    def get_FromModifiedDate(self): return self.FromModifiedDate
    def set_FromModifiedDate(self, FromModifiedDate): self.FromModifiedDate = FromModifiedDate
    def get_ToModifiedDate(self): return self.ToModifiedDate
    def set_ToModifiedDate(self, ToModifiedDate): self.ToModifiedDate = ToModifiedDate
    def get_NameFilter(self): return self.NameFilter
    def set_NameFilter(self, NameFilter): self.NameFilter = NameFilter
    def get_NameRangeFilter(self): return self.NameRangeFilter
    def set_NameRangeFilter(self, NameRangeFilter): self.NameRangeFilter = NameRangeFilter
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_iterator(self): return self.iterator
    def set_iterator(self, iterator): self.iterator = iterator
    def get_metaData(self): return self.metaData
    def set_metaData(self, metaData): self.metaData = metaData
    def export(self, outfile, level, namespace_='', name_='ItemQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemQueryRqType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            outfile.write(' iterator=%s' % (quote_attrib(self.iterator), ))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            outfile.write(' metaData=%s' % (quote_attrib(self.metaData), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ListID_ in self.ListID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(ListID_).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        for FullName_ in self.FullName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(FullName_).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.MaxReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxReturned>%s</%sMaxReturned>%s' % (namespace_, self.gds_format_string(quote_xml(self.MaxReturned).encode(ExternalEncoding), input_name='MaxReturned'), namespace_, eol_))
        if self.ActiveStatus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sActiveStatus>%s</%sActiveStatus>%s' % (namespace_, self.gds_format_string(quote_xml(self.ActiveStatus).encode(ExternalEncoding), input_name='ActiveStatus'), namespace_, eol_))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromModifiedDate>%s</%sFromModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.FromModifiedDate).encode(ExternalEncoding), input_name='FromModifiedDate'), namespace_, eol_))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToModifiedDate>%s</%sToModifiedDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ToModifiedDate).encode(ExternalEncoding), input_name='ToModifiedDate'), namespace_, eol_))
        if self.NameFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameFilter>%s</%sNameFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameFilter).encode(ExternalEncoding), input_name='NameFilter'), namespace_, eol_))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameRangeFilter>%s</%sNameRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameRangeFilter).encode(ExternalEncoding), input_name='NameRangeFilter'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID or
            self.FullName or
            self.MaxReturned is not None or
            self.ActiveStatus is not None or
            self.FromModifiedDate is not None or
            self.ToModifiedDate is not None or
            self.NameFilter is not None or
            self.NameRangeFilter is not None or
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            showIndent(outfile, level)
            outfile.write('iterator = "%s",\n' % (self.iterator,))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            showIndent(outfile, level)
            outfile.write('metaData = "%s",\n' % (self.metaData,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ListID=[\n')
        level += 1
        for ListID_ in self.ListID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(ListID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('FullName=[\n')
        level += 1
        for FullName_ in self.FullName:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(FullName_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.MaxReturned is not None:
            showIndent(outfile, level)
            outfile.write('MaxReturned=%s,\n' % quote_python(self.MaxReturned).encode(ExternalEncoding))
        if self.ActiveStatus is not None:
            showIndent(outfile, level)
            outfile.write('ActiveStatus=%s,\n' % quote_python(self.ActiveStatus).encode(ExternalEncoding))
        if self.FromModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('FromModifiedDate=%s,\n' % quote_python(self.FromModifiedDate).encode(ExternalEncoding))
        if self.ToModifiedDate is not None:
            showIndent(outfile, level)
            outfile.write('ToModifiedDate=%s,\n' % quote_python(self.ToModifiedDate).encode(ExternalEncoding))
        if self.NameFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameFilter=%s,\n' % quote_python(self.NameFilter).encode(ExternalEncoding))
        if self.NameRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('NameRangeFilter=%s,\n' % quote_python(self.NameRangeFilter).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('iterator', node)
        if value is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            self.iterator = value
            self.validate_STRTYPE(self.iterator)    # validate type STRTYPE
        value = find_attr_value_('metaData', node)
        if value is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            self.metaData = value
            self.validate_STRTYPE(self.metaData)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID.append(ListID_)
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName.append(FullName_)
            self.validate_FullName(self.FullName)    # validate type FullName
        elif nodeName_ == 'MaxReturned':
            MaxReturned_ = child_.text
            MaxReturned_ = self.gds_validate_string(MaxReturned_, node, 'MaxReturned')
            self.MaxReturned = MaxReturned_
        elif nodeName_ == 'ActiveStatus':
            ActiveStatus_ = child_.text
            ActiveStatus_ = self.gds_validate_string(ActiveStatus_, node, 'ActiveStatus')
            self.ActiveStatus = ActiveStatus_
        elif nodeName_ == 'FromModifiedDate':
            FromModifiedDate_ = child_.text
            FromModifiedDate_ = self.gds_validate_string(FromModifiedDate_, node, 'FromModifiedDate')
            self.FromModifiedDate = FromModifiedDate_
        elif nodeName_ == 'ToModifiedDate':
            ToModifiedDate_ = child_.text
            ToModifiedDate_ = self.gds_validate_string(ToModifiedDate_, node, 'ToModifiedDate')
            self.ToModifiedDate = ToModifiedDate_
        elif nodeName_ == 'NameFilter':
            NameFilter_ = child_.text
            NameFilter_ = self.gds_validate_string(NameFilter_, node, 'NameFilter')
            self.NameFilter = NameFilter_
        elif nodeName_ == 'NameRangeFilter':
            NameRangeFilter_ = child_.text
            NameRangeFilter_ = self.gds_validate_string(NameRangeFilter_, node, 'NameRangeFilter')
            self.NameRangeFilter = NameRangeFilter_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class ItemQueryRqType


class SalesReceiptAddRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, SalesReceiptAdd=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.SalesReceiptAdd = SalesReceiptAdd
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if SalesReceiptAddRqType.subclass:
            return SalesReceiptAddRqType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptAddRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesReceiptAdd(self): return self.SalesReceiptAdd
    def set_SalesReceiptAdd(self, SalesReceiptAdd): self.SalesReceiptAdd = SalesReceiptAdd
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptAddRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptAddRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptAddRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptAddRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesReceiptAdd is not None:
            self.SalesReceiptAdd.export(outfile, level, namespace_, name_='SalesReceiptAdd', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.SalesReceiptAdd is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptAddRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesReceiptAdd is not None:
            showIndent(outfile, level)
            outfile.write('SalesReceiptAdd=model_.SalesReceiptAdd(\n')
            self.SalesReceiptAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesReceiptAdd':
            obj_ = SalesReceiptAdd.factory()
            obj_.build(child_)
            self.set_SalesReceiptAdd(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class SalesReceiptAddRqType


class SalesReceiptModRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, SalesReceiptMod=None, IncludeRetElement=None):
        self.requestID = _cast(None, requestID)
        self.SalesReceiptMod = SalesReceiptMod
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
    def factory(*args_, **kwargs_):
        if SalesReceiptModRqType.subclass:
            return SalesReceiptModRqType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptModRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesReceiptMod(self): return self.SalesReceiptMod
    def set_SalesReceiptMod(self, SalesReceiptMod): self.SalesReceiptMod = SalesReceiptMod
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptModRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptModRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptModRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptModRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesReceiptMod is not None:
            self.SalesReceiptMod.export(outfile, level, namespace_, name_='SalesReceiptMod', pretty_print=pretty_print)
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.SalesReceiptMod is not None or
            self.IncludeRetElement
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptModRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesReceiptMod is not None:
            showIndent(outfile, level)
            outfile.write('SalesReceiptMod=model_.SalesReceiptMod(\n')
            self.SalesReceiptMod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesReceiptMod':
            obj_ = SalesReceiptMod.factory()
            obj_.build(child_)
            self.set_SalesReceiptMod(obj_)
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
# end class SalesReceiptModRqType


class SalesReceiptQueryRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, requestID=None, iterator=None, metaData='NoMetaData', TxnID=None, RefNumber=None, RefNumberCaseSensitive=None, MaxReturned=None, ModifiedDateRangeFilter=None, TxnDateRangeFilter=None, EntityFilter=None, AccountFilter=None, RefNumberFilter=None, RefNumberRangeFilter=None, CurrencyFilter=None, IncludeLineItems=None, IncludeRetElement=None, OwnerID=None):
        self.iteratorID = _cast(None, iteratorID)
        self.requestID = _cast(None, requestID)
        self.iterator = _cast(None, iterator)
        self.metaData = _cast(None, metaData)
        if TxnID is None:
            self.TxnID = []
        else:
            self.TxnID = TxnID
        if RefNumber is None:
            self.RefNumber = []
        else:
            self.RefNumber = RefNumber
        if RefNumberCaseSensitive is None:
            self.RefNumberCaseSensitive = []
        else:
            self.RefNumberCaseSensitive = RefNumberCaseSensitive
        self.MaxReturned = MaxReturned
        self.ModifiedDateRangeFilter = ModifiedDateRangeFilter
        self.TxnDateRangeFilter = TxnDateRangeFilter
        self.EntityFilter = EntityFilter
        self.AccountFilter = AccountFilter
        self.RefNumberFilter = RefNumberFilter
        self.RefNumberRangeFilter = RefNumberRangeFilter
        self.CurrencyFilter = CurrencyFilter
        self.IncludeLineItems = IncludeLineItems
        if IncludeRetElement is None:
            self.IncludeRetElement = []
        else:
            self.IncludeRetElement = IncludeRetElement
        if OwnerID is None:
            self.OwnerID = []
        else:
            self.OwnerID = OwnerID
    def factory(*args_, **kwargs_):
        if SalesReceiptQueryRqType.subclass:
            return SalesReceiptQueryRqType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptQueryRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnID(self): return self.TxnID
    def set_TxnID(self, TxnID): self.TxnID = TxnID
    def add_TxnID(self, value): self.TxnID.append(value)
    def insert_TxnID(self, index, value): self.TxnID[index] = value
    def get_RefNumber(self): return self.RefNumber
    def set_RefNumber(self, RefNumber): self.RefNumber = RefNumber
    def add_RefNumber(self, value): self.RefNumber.append(value)
    def insert_RefNumber(self, index, value): self.RefNumber[index] = value
    def validate_RefNumber(self, value):
        # Validate type RefNumber, a restriction on STRTYPE.
        pass
    def get_RefNumberCaseSensitive(self): return self.RefNumberCaseSensitive
    def set_RefNumberCaseSensitive(self, RefNumberCaseSensitive): self.RefNumberCaseSensitive = RefNumberCaseSensitive
    def add_RefNumberCaseSensitive(self, value): self.RefNumberCaseSensitive.append(value)
    def insert_RefNumberCaseSensitive(self, index, value): self.RefNumberCaseSensitive[index] = value
    def get_MaxReturned(self): return self.MaxReturned
    def set_MaxReturned(self, MaxReturned): self.MaxReturned = MaxReturned
    def get_ModifiedDateRangeFilter(self): return self.ModifiedDateRangeFilter
    def set_ModifiedDateRangeFilter(self, ModifiedDateRangeFilter): self.ModifiedDateRangeFilter = ModifiedDateRangeFilter
    def get_TxnDateRangeFilter(self): return self.TxnDateRangeFilter
    def set_TxnDateRangeFilter(self, TxnDateRangeFilter): self.TxnDateRangeFilter = TxnDateRangeFilter
    def get_EntityFilter(self): return self.EntityFilter
    def set_EntityFilter(self, EntityFilter): self.EntityFilter = EntityFilter
    def get_AccountFilter(self): return self.AccountFilter
    def set_AccountFilter(self, AccountFilter): self.AccountFilter = AccountFilter
    def get_RefNumberFilter(self): return self.RefNumberFilter
    def set_RefNumberFilter(self, RefNumberFilter): self.RefNumberFilter = RefNumberFilter
    def get_RefNumberRangeFilter(self): return self.RefNumberRangeFilter
    def set_RefNumberRangeFilter(self, RefNumberRangeFilter): self.RefNumberRangeFilter = RefNumberRangeFilter
    def get_CurrencyFilter(self): return self.CurrencyFilter
    def set_CurrencyFilter(self, CurrencyFilter): self.CurrencyFilter = CurrencyFilter
    def get_IncludeLineItems(self): return self.IncludeLineItems
    def set_IncludeLineItems(self, IncludeLineItems): self.IncludeLineItems = IncludeLineItems
    def get_IncludeRetElement(self): return self.IncludeRetElement
    def set_IncludeRetElement(self, IncludeRetElement): self.IncludeRetElement = IncludeRetElement
    def add_IncludeRetElement(self, value): self.IncludeRetElement.append(value)
    def insert_IncludeRetElement(self, index, value): self.IncludeRetElement[index] = value
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def add_OwnerID(self, value): self.OwnerID.append(value)
    def insert_OwnerID(self, index, value): self.OwnerID[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_iterator(self): return self.iterator
    def set_iterator(self, iterator): self.iterator = iterator
    def get_metaData(self): return self.metaData
    def set_metaData(self, metaData): self.metaData = metaData
    def export(self, outfile, level, namespace_='', name_='SalesReceiptQueryRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptQueryRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptQueryRqType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            outfile.write(' iterator=%s' % (quote_attrib(self.iterator), ))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            outfile.write(' metaData=%s' % (quote_attrib(self.metaData), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptQueryRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for TxnID_ in self.TxnID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnID>%s</%sTxnID>%s' % (namespace_, self.gds_format_string(quote_xml(TxnID_).encode(ExternalEncoding), input_name='TxnID'), namespace_, eol_))
        for RefNumber_ in self.RefNumber:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumber>%s</%sRefNumber>%s' % (namespace_, self.gds_format_string(quote_xml(RefNumber_).encode(ExternalEncoding), input_name='RefNumber'), namespace_, eol_))
        for RefNumberCaseSensitive_ in self.RefNumberCaseSensitive:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumberCaseSensitive>%s</%sRefNumberCaseSensitive>%s' % (namespace_, self.gds_format_string(quote_xml(RefNumberCaseSensitive_).encode(ExternalEncoding), input_name='RefNumberCaseSensitive'), namespace_, eol_))
        if self.MaxReturned is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxReturned>%s</%sMaxReturned>%s' % (namespace_, self.gds_format_string(quote_xml(self.MaxReturned).encode(ExternalEncoding), input_name='MaxReturned'), namespace_, eol_))
        if self.ModifiedDateRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sModifiedDateRangeFilter>%s</%sModifiedDateRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.ModifiedDateRangeFilter).encode(ExternalEncoding), input_name='ModifiedDateRangeFilter'), namespace_, eol_))
        if self.TxnDateRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnDateRangeFilter>%s</%sTxnDateRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnDateRangeFilter).encode(ExternalEncoding), input_name='TxnDateRangeFilter'), namespace_, eol_))
        if self.EntityFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEntityFilter>%s</%sEntityFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.EntityFilter).encode(ExternalEncoding), input_name='EntityFilter'), namespace_, eol_))
        if self.AccountFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountFilter>%s</%sAccountFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.AccountFilter).encode(ExternalEncoding), input_name='AccountFilter'), namespace_, eol_))
        if self.RefNumberFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumberFilter>%s</%sRefNumberFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.RefNumberFilter).encode(ExternalEncoding), input_name='RefNumberFilter'), namespace_, eol_))
        if self.RefNumberRangeFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumberRangeFilter>%s</%sRefNumberRangeFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.RefNumberRangeFilter).encode(ExternalEncoding), input_name='RefNumberRangeFilter'), namespace_, eol_))
        if self.CurrencyFilter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCurrencyFilter>%s</%sCurrencyFilter>%s' % (namespace_, self.gds_format_string(quote_xml(self.CurrencyFilter).encode(ExternalEncoding), input_name='CurrencyFilter'), namespace_, eol_))
        if self.IncludeLineItems is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeLineItems>%s</%sIncludeLineItems>%s' % (namespace_, self.gds_format_string(quote_xml(self.IncludeLineItems).encode(ExternalEncoding), input_name='IncludeLineItems'), namespace_, eol_))
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncludeRetElement>%s</%sIncludeRetElement>%s' % (namespace_, self.gds_format_string(quote_xml(IncludeRetElement_).encode(ExternalEncoding), input_name='IncludeRetElement'), namespace_, eol_))
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(OwnerID_).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.TxnID or
            self.RefNumber or
            self.RefNumberCaseSensitive or
            self.MaxReturned is not None or
            self.ModifiedDateRangeFilter is not None or
            self.TxnDateRangeFilter is not None or
            self.EntityFilter is not None or
            self.AccountFilter is not None or
            self.RefNumberFilter is not None or
            self.RefNumberRangeFilter is not None or
            self.CurrencyFilter is not None or
            self.IncludeLineItems is not None or
            self.IncludeRetElement or
            self.OwnerID
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptQueryRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.iterator is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            showIndent(outfile, level)
            outfile.write('iterator = "%s",\n' % (self.iterator,))
        if self.metaData is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            showIndent(outfile, level)
            outfile.write('metaData = "%s",\n' % (self.metaData,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('TxnID=[\n')
        level += 1
        for TxnID_ in self.TxnID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(TxnID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('RefNumber=[\n')
        level += 1
        for RefNumber_ in self.RefNumber:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(RefNumber_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('RefNumberCaseSensitive=[\n')
        level += 1
        for RefNumberCaseSensitive_ in self.RefNumberCaseSensitive:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(RefNumberCaseSensitive_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.MaxReturned is not None:
            showIndent(outfile, level)
            outfile.write('MaxReturned=%s,\n' % quote_python(self.MaxReturned).encode(ExternalEncoding))
        if self.ModifiedDateRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('ModifiedDateRangeFilter=%s,\n' % quote_python(self.ModifiedDateRangeFilter).encode(ExternalEncoding))
        if self.TxnDateRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('TxnDateRangeFilter=%s,\n' % quote_python(self.TxnDateRangeFilter).encode(ExternalEncoding))
        if self.EntityFilter is not None:
            showIndent(outfile, level)
            outfile.write('EntityFilter=%s,\n' % quote_python(self.EntityFilter).encode(ExternalEncoding))
        if self.AccountFilter is not None:
            showIndent(outfile, level)
            outfile.write('AccountFilter=%s,\n' % quote_python(self.AccountFilter).encode(ExternalEncoding))
        if self.RefNumberFilter is not None:
            showIndent(outfile, level)
            outfile.write('RefNumberFilter=%s,\n' % quote_python(self.RefNumberFilter).encode(ExternalEncoding))
        if self.RefNumberRangeFilter is not None:
            showIndent(outfile, level)
            outfile.write('RefNumberRangeFilter=%s,\n' % quote_python(self.RefNumberRangeFilter).encode(ExternalEncoding))
        if self.CurrencyFilter is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyFilter=%s,\n' % quote_python(self.CurrencyFilter).encode(ExternalEncoding))
        if self.IncludeLineItems is not None:
            showIndent(outfile, level)
            outfile.write('IncludeLineItems=%s,\n' % quote_python(self.IncludeLineItems).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('IncludeRetElement=[\n')
        level += 1
        for IncludeRetElement_ in self.IncludeRetElement:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(IncludeRetElement_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('OwnerID=[\n')
        level += 1
        for OwnerID_ in self.OwnerID:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(OwnerID_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('iterator', node)
        if value is not None and 'iterator' not in already_processed:
            already_processed.append('iterator')
            self.iterator = value
            self.validate_STRTYPE(self.iterator)    # validate type STRTYPE
        value = find_attr_value_('metaData', node)
        if value is not None and 'metaData' not in already_processed:
            already_processed.append('metaData')
            self.metaData = value
            self.validate_STRTYPE(self.metaData)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnID':
            TxnID_ = child_.text
            TxnID_ = self.gds_validate_string(TxnID_, node, 'TxnID')
            self.TxnID.append(TxnID_)
        elif nodeName_ == 'RefNumber':
            RefNumber_ = child_.text
            RefNumber_ = self.gds_validate_string(RefNumber_, node, 'RefNumber')
            self.RefNumber.append(RefNumber_)
            self.validate_RefNumber(self.RefNumber)    # validate type RefNumber
        elif nodeName_ == 'RefNumberCaseSensitive':
            RefNumberCaseSensitive_ = child_.text
            RefNumberCaseSensitive_ = self.gds_validate_string(RefNumberCaseSensitive_, node, 'RefNumberCaseSensitive')
            self.RefNumberCaseSensitive.append(RefNumberCaseSensitive_)
        elif nodeName_ == 'MaxReturned':
            MaxReturned_ = child_.text
            MaxReturned_ = self.gds_validate_string(MaxReturned_, node, 'MaxReturned')
            self.MaxReturned = MaxReturned_
        elif nodeName_ == 'ModifiedDateRangeFilter':
            ModifiedDateRangeFilter_ = child_.text
            ModifiedDateRangeFilter_ = self.gds_validate_string(ModifiedDateRangeFilter_, node, 'ModifiedDateRangeFilter')
            self.ModifiedDateRangeFilter = ModifiedDateRangeFilter_
        elif nodeName_ == 'TxnDateRangeFilter':
            TxnDateRangeFilter_ = child_.text
            TxnDateRangeFilter_ = self.gds_validate_string(TxnDateRangeFilter_, node, 'TxnDateRangeFilter')
            self.TxnDateRangeFilter = TxnDateRangeFilter_
        elif nodeName_ == 'EntityFilter':
            EntityFilter_ = child_.text
            EntityFilter_ = self.gds_validate_string(EntityFilter_, node, 'EntityFilter')
            self.EntityFilter = EntityFilter_
        elif nodeName_ == 'AccountFilter':
            AccountFilter_ = child_.text
            AccountFilter_ = self.gds_validate_string(AccountFilter_, node, 'AccountFilter')
            self.AccountFilter = AccountFilter_
        elif nodeName_ == 'RefNumberFilter':
            RefNumberFilter_ = child_.text
            RefNumberFilter_ = self.gds_validate_string(RefNumberFilter_, node, 'RefNumberFilter')
            self.RefNumberFilter = RefNumberFilter_
        elif nodeName_ == 'RefNumberRangeFilter':
            RefNumberRangeFilter_ = child_.text
            RefNumberRangeFilter_ = self.gds_validate_string(RefNumberRangeFilter_, node, 'RefNumberRangeFilter')
            self.RefNumberRangeFilter = RefNumberRangeFilter_
        elif nodeName_ == 'CurrencyFilter':
            CurrencyFilter_ = child_.text
            CurrencyFilter_ = self.gds_validate_string(CurrencyFilter_, node, 'CurrencyFilter')
            self.CurrencyFilter = CurrencyFilter_
        elif nodeName_ == 'IncludeLineItems':
            IncludeLineItems_ = child_.text
            IncludeLineItems_ = self.gds_validate_string(IncludeLineItems_, node, 'IncludeLineItems')
            self.IncludeLineItems = IncludeLineItems_
        elif nodeName_ == 'IncludeRetElement':
            IncludeRetElement_ = child_.text
            IncludeRetElement_ = self.gds_validate_string(IncludeRetElement_, node, 'IncludeRetElement')
            self.IncludeRetElement.append(IncludeRetElement_)
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID.append(OwnerID_)
# end class SalesReceiptQueryRqType


class HostQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, HostRet=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.HostRet = HostRet
    def factory(*args_, **kwargs_):
        if HostQueryRsType.subclass:
            return HostQueryRsType.subclass(*args_, **kwargs_)
        else:
            return HostQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HostRet(self): return self.HostRet
    def set_HostRet(self, HostRet): self.HostRet = HostRet
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='HostQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HostQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HostQueryRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='HostQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HostRet is not None:
            self.HostRet.export(outfile, level, namespace_, name_='HostRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.HostRet is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='HostQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.HostRet is not None:
            showIndent(outfile, level)
            outfile.write('HostRet=model_.HostRet(\n')
            self.HostRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HostRet':
            obj_ = HostRet.factory()
            obj_.build(child_)
            self.set_HostRet(obj_)
# end class HostQueryRsType


class CompanyQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, CompanyRet=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.CompanyRet = CompanyRet
    def factory(*args_, **kwargs_):
        if CompanyQueryRsType.subclass:
            return CompanyQueryRsType.subclass(*args_, **kwargs_)
        else:
            return CompanyQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CompanyRet(self): return self.CompanyRet
    def set_CompanyRet(self, CompanyRet): self.CompanyRet = CompanyRet
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='CompanyQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyQueryRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompanyRet is not None:
            self.CompanyRet.export(outfile, level, namespace_, name_='CompanyRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CompanyRet is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CompanyRet is not None:
            showIndent(outfile, level)
            outfile.write('CompanyRet=model_.CompanyRet(\n')
            self.CompanyRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompanyRet':
            obj_ = CompanyRet.factory()
            obj_.build(child_)
            self.set_CompanyRet(obj_)
# end class CompanyQueryRsType


class CustomerAddRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, CustomerRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.CustomerRet = CustomerRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if CustomerAddRsType.subclass:
            return CustomerAddRsType.subclass(*args_, **kwargs_)
        else:
            return CustomerAddRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerRet(self): return self.CustomerRet
    def set_CustomerRet(self, CustomerRet): self.CustomerRet = CustomerRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='CustomerAddRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerAddRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerAddRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerAddRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerRet is not None:
            self.CustomerRet.export(outfile, level, namespace_, name_='CustomerRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CustomerRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerAddRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerRet is not None:
            showIndent(outfile, level)
            outfile.write('CustomerRet=model_.CustomerRet(\n')
            self.CustomerRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerRet':
            obj_ = CustomerRet.factory()
            obj_.build(child_)
            self.set_CustomerRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class CustomerAddRsType


class CustomerModRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, CustomerRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.CustomerRet = CustomerRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if CustomerModRsType.subclass:
            return CustomerModRsType.subclass(*args_, **kwargs_)
        else:
            return CustomerModRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerRet(self): return self.CustomerRet
    def set_CustomerRet(self, CustomerRet): self.CustomerRet = CustomerRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='CustomerModRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerModRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerModRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerModRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerRet is not None:
            self.CustomerRet.export(outfile, level, namespace_, name_='CustomerRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CustomerRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerModRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerRet is not None:
            showIndent(outfile, level)
            outfile.write('CustomerRet=model_.CustomerRet(\n')
            self.CustomerRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerRet':
            obj_ = CustomerRet.factory()
            obj_.build(child_)
            self.set_CustomerRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class CustomerModRsType


class CustomerQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, iteratorRemainingCount=None, statusSeverity=None, retCount=None, requestID=None, statusMessage=None, statusCode=None, CustomerRet=None):
        self.iteratorID = _cast(None, iteratorID)
        self.iteratorRemainingCount = _cast(None, iteratorRemainingCount)
        self.statusSeverity = _cast(None, statusSeverity)
        self.retCount = _cast(None, retCount)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        if CustomerRet is None:
            self.CustomerRet = []
        else:
            self.CustomerRet = CustomerRet
    def factory(*args_, **kwargs_):
        if CustomerQueryRsType.subclass:
            return CustomerQueryRsType.subclass(*args_, **kwargs_)
        else:
            return CustomerQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerRet(self): return self.CustomerRet
    def set_CustomerRet(self, CustomerRet): self.CustomerRet = CustomerRet
    def add_CustomerRet(self, value): self.CustomerRet.append(value)
    def insert_CustomerRet(self, index, value): self.CustomerRet[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_iteratorRemainingCount(self): return self.iteratorRemainingCount
    def set_iteratorRemainingCount(self, iteratorRemainingCount): self.iteratorRemainingCount = iteratorRemainingCount
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def get_retCount(self): return self.retCount
    def set_retCount(self, retCount): self.retCount = retCount
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def export(self, outfile, level, namespace_='', name_='CustomerQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerQueryRsType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            outfile.write(' iteratorRemainingCount=%s' % (quote_attrib(self.iteratorRemainingCount), ))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            outfile.write(' retCount=%s' % (quote_attrib(self.retCount), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CustomerRet_ in self.CustomerRet:
            CustomerRet_.export(outfile, level, namespace_, name_='CustomerRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CustomerRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            showIndent(outfile, level)
            outfile.write('iteratorRemainingCount = %d,\n' % (self.iteratorRemainingCount,))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            showIndent(outfile, level)
            outfile.write('retCount = %d,\n' % (self.retCount,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('CustomerRet=[\n')
        level += 1
        for CustomerRet_ in self.CustomerRet:
            showIndent(outfile, level)
            outfile.write('model_.CustomerRet(\n')
            CustomerRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('iteratorRemainingCount', node)
        if value is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            try:
                self.iteratorRemainingCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.iteratorRemainingCount)    # validate type INTTYPE
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('retCount', node)
        if value is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            try:
                self.retCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.retCount)    # validate type INTTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerRet':
            obj_ = CustomerRet.factory()
            obj_.build(child_)
            self.CustomerRet.append(obj_)
# end class CustomerQueryRsType


class ItemInventoryAddRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, ItemInventoryRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.ItemInventoryRet = ItemInventoryRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if ItemInventoryAddRsType.subclass:
            return ItemInventoryAddRsType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryAddRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryRet(self): return self.ItemInventoryRet
    def set_ItemInventoryRet(self, ItemInventoryRet): self.ItemInventoryRet = ItemInventoryRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='ItemInventoryAddRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryAddRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryAddRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryAddRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemInventoryRet is not None:
            self.ItemInventoryRet.export(outfile, level, namespace_, name_='ItemInventoryRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemInventoryRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryAddRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemInventoryRet is not None:
            showIndent(outfile, level)
            outfile.write('ItemInventoryRet=model_.ItemInventoryRet(\n')
            self.ItemInventoryRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryRet':
            obj_ = ItemInventoryRet.factory()
            obj_.build(child_)
            self.set_ItemInventoryRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class ItemInventoryAddRsType


class ItemInventoryModRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, ItemInventoryRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.ItemInventoryRet = ItemInventoryRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if ItemInventoryModRsType.subclass:
            return ItemInventoryModRsType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryModRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryRet(self): return self.ItemInventoryRet
    def set_ItemInventoryRet(self, ItemInventoryRet): self.ItemInventoryRet = ItemInventoryRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='ItemInventoryModRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryModRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryModRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryModRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemInventoryRet is not None:
            self.ItemInventoryRet.export(outfile, level, namespace_, name_='ItemInventoryRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemInventoryRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryModRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemInventoryRet is not None:
            showIndent(outfile, level)
            outfile.write('ItemInventoryRet=model_.ItemInventoryRet(\n')
            self.ItemInventoryRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryRet':
            obj_ = ItemInventoryRet.factory()
            obj_.build(child_)
            self.set_ItemInventoryRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class ItemInventoryModRsType


class ItemInventoryQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, iteratorRemainingCount=None, statusSeverity=None, retCount=None, requestID=None, statusMessage=None, statusCode=None, ItemInventoryRet=None):
        self.iteratorID = _cast(None, iteratorID)
        self.iteratorRemainingCount = _cast(None, iteratorRemainingCount)
        self.statusSeverity = _cast(None, statusSeverity)
        self.retCount = _cast(None, retCount)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        if ItemInventoryRet is None:
            self.ItemInventoryRet = []
        else:
            self.ItemInventoryRet = ItemInventoryRet
    def factory(*args_, **kwargs_):
        if ItemInventoryQueryRsType.subclass:
            return ItemInventoryQueryRsType.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryRet(self): return self.ItemInventoryRet
    def set_ItemInventoryRet(self, ItemInventoryRet): self.ItemInventoryRet = ItemInventoryRet
    def add_ItemInventoryRet(self, value): self.ItemInventoryRet.append(value)
    def insert_ItemInventoryRet(self, index, value): self.ItemInventoryRet[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_iteratorRemainingCount(self): return self.iteratorRemainingCount
    def set_iteratorRemainingCount(self, iteratorRemainingCount): self.iteratorRemainingCount = iteratorRemainingCount
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def get_retCount(self): return self.retCount
    def set_retCount(self, retCount): self.retCount = retCount
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def export(self, outfile, level, namespace_='', name_='ItemInventoryQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryQueryRsType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            outfile.write(' iteratorRemainingCount=%s' % (quote_attrib(self.iteratorRemainingCount), ))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            outfile.write(' retCount=%s' % (quote_attrib(self.retCount), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemInventoryRet_ in self.ItemInventoryRet:
            ItemInventoryRet_.export(outfile, level, namespace_, name_='ItemInventoryRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemInventoryRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            showIndent(outfile, level)
            outfile.write('iteratorRemainingCount = %d,\n' % (self.iteratorRemainingCount,))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            showIndent(outfile, level)
            outfile.write('retCount = %d,\n' % (self.retCount,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ItemInventoryRet=[\n')
        level += 1
        for ItemInventoryRet_ in self.ItemInventoryRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryRet(\n')
            ItemInventoryRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('iteratorRemainingCount', node)
        if value is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            try:
                self.iteratorRemainingCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.iteratorRemainingCount)    # validate type INTTYPE
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('retCount', node)
        if value is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            try:
                self.retCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.retCount)    # validate type INTTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryRet':
            obj_ = ItemInventoryRet.factory()
            obj_.build(child_)
            self.ItemInventoryRet.append(obj_)
# end class ItemInventoryQueryRsType


class ItemQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, iteratorRemainingCount=None, statusSeverity=None, retCount=None, requestID=None, statusMessage=None, statusCode=None, ItemServiceRet=None, ItemNonInventoryRet=None, ItemOtherChargeRet=None, ItemInventoryRet=None, ItemInventoryAssemblyRet=None, ItemFixedAssetRet=None, ItemSubtotalRet=None, ItemDiscountRet=None, ItemPaymentRet=None, ItemSalesTaxRet=None, ItemSalesTaxGroupRet=None, ItemGroupRet=None):
        self.iteratorID = _cast(None, iteratorID)
        self.iteratorRemainingCount = _cast(None, iteratorRemainingCount)
        self.statusSeverity = _cast(None, statusSeverity)
        self.retCount = _cast(None, retCount)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        if ItemServiceRet is None:
            self.ItemServiceRet = []
        else:
            self.ItemServiceRet = ItemServiceRet
        if ItemNonInventoryRet is None:
            self.ItemNonInventoryRet = []
        else:
            self.ItemNonInventoryRet = ItemNonInventoryRet
        if ItemOtherChargeRet is None:
            self.ItemOtherChargeRet = []
        else:
            self.ItemOtherChargeRet = ItemOtherChargeRet
        if ItemInventoryRet is None:
            self.ItemInventoryRet = []
        else:
            self.ItemInventoryRet = ItemInventoryRet
        if ItemInventoryAssemblyRet is None:
            self.ItemInventoryAssemblyRet = []
        else:
            self.ItemInventoryAssemblyRet = ItemInventoryAssemblyRet
        if ItemFixedAssetRet is None:
            self.ItemFixedAssetRet = []
        else:
            self.ItemFixedAssetRet = ItemFixedAssetRet
        if ItemSubtotalRet is None:
            self.ItemSubtotalRet = []
        else:
            self.ItemSubtotalRet = ItemSubtotalRet
        if ItemDiscountRet is None:
            self.ItemDiscountRet = []
        else:
            self.ItemDiscountRet = ItemDiscountRet
        if ItemPaymentRet is None:
            self.ItemPaymentRet = []
        else:
            self.ItemPaymentRet = ItemPaymentRet
        if ItemSalesTaxRet is None:
            self.ItemSalesTaxRet = []
        else:
            self.ItemSalesTaxRet = ItemSalesTaxRet
        if ItemSalesTaxGroupRet is None:
            self.ItemSalesTaxGroupRet = []
        else:
            self.ItemSalesTaxGroupRet = ItemSalesTaxGroupRet
        if ItemGroupRet is None:
            self.ItemGroupRet = []
        else:
            self.ItemGroupRet = ItemGroupRet
    def factory(*args_, **kwargs_):
        if ItemQueryRsType.subclass:
            return ItemQueryRsType.subclass(*args_, **kwargs_)
        else:
            return ItemQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemServiceRet(self): return self.ItemServiceRet
    def set_ItemServiceRet(self, ItemServiceRet): self.ItemServiceRet = ItemServiceRet
    def add_ItemServiceRet(self, value): self.ItemServiceRet.append(value)
    def insert_ItemServiceRet(self, index, value): self.ItemServiceRet[index] = value
    def get_ItemNonInventoryRet(self): return self.ItemNonInventoryRet
    def set_ItemNonInventoryRet(self, ItemNonInventoryRet): self.ItemNonInventoryRet = ItemNonInventoryRet
    def add_ItemNonInventoryRet(self, value): self.ItemNonInventoryRet.append(value)
    def insert_ItemNonInventoryRet(self, index, value): self.ItemNonInventoryRet[index] = value
    def get_ItemOtherChargeRet(self): return self.ItemOtherChargeRet
    def set_ItemOtherChargeRet(self, ItemOtherChargeRet): self.ItemOtherChargeRet = ItemOtherChargeRet
    def add_ItemOtherChargeRet(self, value): self.ItemOtherChargeRet.append(value)
    def insert_ItemOtherChargeRet(self, index, value): self.ItemOtherChargeRet[index] = value
    def get_ItemInventoryRet(self): return self.ItemInventoryRet
    def set_ItemInventoryRet(self, ItemInventoryRet): self.ItemInventoryRet = ItemInventoryRet
    def add_ItemInventoryRet(self, value): self.ItemInventoryRet.append(value)
    def insert_ItemInventoryRet(self, index, value): self.ItemInventoryRet[index] = value
    def get_ItemInventoryAssemblyRet(self): return self.ItemInventoryAssemblyRet
    def set_ItemInventoryAssemblyRet(self, ItemInventoryAssemblyRet): self.ItemInventoryAssemblyRet = ItemInventoryAssemblyRet
    def add_ItemInventoryAssemblyRet(self, value): self.ItemInventoryAssemblyRet.append(value)
    def insert_ItemInventoryAssemblyRet(self, index, value): self.ItemInventoryAssemblyRet[index] = value
    def get_ItemFixedAssetRet(self): return self.ItemFixedAssetRet
    def set_ItemFixedAssetRet(self, ItemFixedAssetRet): self.ItemFixedAssetRet = ItemFixedAssetRet
    def add_ItemFixedAssetRet(self, value): self.ItemFixedAssetRet.append(value)
    def insert_ItemFixedAssetRet(self, index, value): self.ItemFixedAssetRet[index] = value
    def get_ItemSubtotalRet(self): return self.ItemSubtotalRet
    def set_ItemSubtotalRet(self, ItemSubtotalRet): self.ItemSubtotalRet = ItemSubtotalRet
    def add_ItemSubtotalRet(self, value): self.ItemSubtotalRet.append(value)
    def insert_ItemSubtotalRet(self, index, value): self.ItemSubtotalRet[index] = value
    def get_ItemDiscountRet(self): return self.ItemDiscountRet
    def set_ItemDiscountRet(self, ItemDiscountRet): self.ItemDiscountRet = ItemDiscountRet
    def add_ItemDiscountRet(self, value): self.ItemDiscountRet.append(value)
    def insert_ItemDiscountRet(self, index, value): self.ItemDiscountRet[index] = value
    def get_ItemPaymentRet(self): return self.ItemPaymentRet
    def set_ItemPaymentRet(self, ItemPaymentRet): self.ItemPaymentRet = ItemPaymentRet
    def add_ItemPaymentRet(self, value): self.ItemPaymentRet.append(value)
    def insert_ItemPaymentRet(self, index, value): self.ItemPaymentRet[index] = value
    def get_ItemSalesTaxRet(self): return self.ItemSalesTaxRet
    def set_ItemSalesTaxRet(self, ItemSalesTaxRet): self.ItemSalesTaxRet = ItemSalesTaxRet
    def add_ItemSalesTaxRet(self, value): self.ItemSalesTaxRet.append(value)
    def insert_ItemSalesTaxRet(self, index, value): self.ItemSalesTaxRet[index] = value
    def get_ItemSalesTaxGroupRet(self): return self.ItemSalesTaxGroupRet
    def set_ItemSalesTaxGroupRet(self, ItemSalesTaxGroupRet): self.ItemSalesTaxGroupRet = ItemSalesTaxGroupRet
    def add_ItemSalesTaxGroupRet(self, value): self.ItemSalesTaxGroupRet.append(value)
    def insert_ItemSalesTaxGroupRet(self, index, value): self.ItemSalesTaxGroupRet[index] = value
    def get_ItemGroupRet(self): return self.ItemGroupRet
    def set_ItemGroupRet(self, ItemGroupRet): self.ItemGroupRet = ItemGroupRet
    def add_ItemGroupRet(self, value): self.ItemGroupRet.append(value)
    def insert_ItemGroupRet(self, index, value): self.ItemGroupRet[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_iteratorRemainingCount(self): return self.iteratorRemainingCount
    def set_iteratorRemainingCount(self, iteratorRemainingCount): self.iteratorRemainingCount = iteratorRemainingCount
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def get_retCount(self): return self.retCount
    def set_retCount(self, retCount): self.retCount = retCount
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def export(self, outfile, level, namespace_='', name_='ItemQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemQueryRsType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            outfile.write(' iteratorRemainingCount=%s' % (quote_attrib(self.iteratorRemainingCount), ))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            outfile.write(' retCount=%s' % (quote_attrib(self.retCount), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ItemQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for ItemServiceRet_ in self.ItemServiceRet:
            ItemServiceRet_.export(outfile, level, namespace_, name_='ItemServiceRet', pretty_print=pretty_print)
        for ItemNonInventoryRet_ in self.ItemNonInventoryRet:
            ItemNonInventoryRet_.export(outfile, level, namespace_, name_='ItemNonInventoryRet', pretty_print=pretty_print)
        for ItemOtherChargeRet_ in self.ItemOtherChargeRet:
            ItemOtherChargeRet_.export(outfile, level, namespace_, name_='ItemOtherChargeRet', pretty_print=pretty_print)
        for ItemInventoryRet_ in self.ItemInventoryRet:
            ItemInventoryRet_.export(outfile, level, namespace_, name_='ItemInventoryRet', pretty_print=pretty_print)
        for ItemInventoryAssemblyRet_ in self.ItemInventoryAssemblyRet:
            ItemInventoryAssemblyRet_.export(outfile, level, namespace_, name_='ItemInventoryAssemblyRet', pretty_print=pretty_print)
        for ItemFixedAssetRet_ in self.ItemFixedAssetRet:
            ItemFixedAssetRet_.export(outfile, level, namespace_, name_='ItemFixedAssetRet', pretty_print=pretty_print)
        for ItemSubtotalRet_ in self.ItemSubtotalRet:
            ItemSubtotalRet_.export(outfile, level, namespace_, name_='ItemSubtotalRet', pretty_print=pretty_print)
        for ItemDiscountRet_ in self.ItemDiscountRet:
            ItemDiscountRet_.export(outfile, level, namespace_, name_='ItemDiscountRet', pretty_print=pretty_print)
        for ItemPaymentRet_ in self.ItemPaymentRet:
            ItemPaymentRet_.export(outfile, level, namespace_, name_='ItemPaymentRet', pretty_print=pretty_print)
        for ItemSalesTaxRet_ in self.ItemSalesTaxRet:
            ItemSalesTaxRet_.export(outfile, level, namespace_, name_='ItemSalesTaxRet', pretty_print=pretty_print)
        for ItemSalesTaxGroupRet_ in self.ItemSalesTaxGroupRet:
            ItemSalesTaxGroupRet_.export(outfile, level, namespace_, name_='ItemSalesTaxGroupRet', pretty_print=pretty_print)
        for ItemGroupRet_ in self.ItemGroupRet:
            ItemGroupRet_.export(outfile, level, namespace_, name_='ItemGroupRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemServiceRet or
            self.ItemNonInventoryRet or
            self.ItemOtherChargeRet or
            self.ItemInventoryRet or
            self.ItemInventoryAssemblyRet or
            self.ItemFixedAssetRet or
            self.ItemSubtotalRet or
            self.ItemDiscountRet or
            self.ItemPaymentRet or
            self.ItemSalesTaxRet or
            self.ItemSalesTaxGroupRet or
            self.ItemGroupRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            showIndent(outfile, level)
            outfile.write('iteratorRemainingCount = %d,\n' % (self.iteratorRemainingCount,))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            showIndent(outfile, level)
            outfile.write('retCount = %d,\n' % (self.retCount,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('ItemServiceRet=[\n')
        level += 1
        for ItemServiceRet_ in self.ItemServiceRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemServiceRet(\n')
            ItemServiceRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemNonInventoryRet=[\n')
        level += 1
        for ItemNonInventoryRet_ in self.ItemNonInventoryRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemNonInventoryRet(\n')
            ItemNonInventoryRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemOtherChargeRet=[\n')
        level += 1
        for ItemOtherChargeRet_ in self.ItemOtherChargeRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemOtherChargeRet(\n')
            ItemOtherChargeRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryRet=[\n')
        level += 1
        for ItemInventoryRet_ in self.ItemInventoryRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryRet(\n')
            ItemInventoryRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemInventoryAssemblyRet=[\n')
        level += 1
        for ItemInventoryAssemblyRet_ in self.ItemInventoryAssemblyRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryAssemblyRet(\n')
            ItemInventoryAssemblyRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemFixedAssetRet=[\n')
        level += 1
        for ItemFixedAssetRet_ in self.ItemFixedAssetRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemFixedAssetRet(\n')
            ItemFixedAssetRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemSubtotalRet=[\n')
        level += 1
        for ItemSubtotalRet_ in self.ItemSubtotalRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemSubtotalRet(\n')
            ItemSubtotalRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemDiscountRet=[\n')
        level += 1
        for ItemDiscountRet_ in self.ItemDiscountRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemDiscountRet(\n')
            ItemDiscountRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemPaymentRet=[\n')
        level += 1
        for ItemPaymentRet_ in self.ItemPaymentRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemPaymentRet(\n')
            ItemPaymentRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemSalesTaxRet=[\n')
        level += 1
        for ItemSalesTaxRet_ in self.ItemSalesTaxRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemSalesTaxRet(\n')
            ItemSalesTaxRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemSalesTaxGroupRet=[\n')
        level += 1
        for ItemSalesTaxGroupRet_ in self.ItemSalesTaxGroupRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemSalesTaxGroupRet(\n')
            ItemSalesTaxGroupRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ItemGroupRet=[\n')
        level += 1
        for ItemGroupRet_ in self.ItemGroupRet:
            showIndent(outfile, level)
            outfile.write('model_.ItemGroupRet(\n')
            ItemGroupRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('iteratorRemainingCount', node)
        if value is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            try:
                self.iteratorRemainingCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.iteratorRemainingCount)    # validate type INTTYPE
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('retCount', node)
        if value is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            try:
                self.retCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.retCount)    # validate type INTTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemServiceRet':
            obj_ = ItemServiceRet.factory()
            obj_.build(child_)
            self.ItemServiceRet.append(obj_)
        elif nodeName_ == 'ItemNonInventoryRet':
            obj_ = ItemNonInventoryRet.factory()
            obj_.build(child_)
            self.ItemNonInventoryRet.append(obj_)
        elif nodeName_ == 'ItemOtherChargeRet':
            obj_ = ItemOtherChargeRet.factory()
            obj_.build(child_)
            self.ItemOtherChargeRet.append(obj_)
        elif nodeName_ == 'ItemInventoryRet':
            obj_ = ItemInventoryRet.factory()
            obj_.build(child_)
            self.ItemInventoryRet.append(obj_)
        elif nodeName_ == 'ItemInventoryAssemblyRet':
            obj_ = ItemInventoryAssemblyRet.factory()
            obj_.build(child_)
            self.ItemInventoryAssemblyRet.append(obj_)
        elif nodeName_ == 'ItemFixedAssetRet':
            obj_ = ItemFixedAssetRet.factory()
            obj_.build(child_)
            self.ItemFixedAssetRet.append(obj_)
        elif nodeName_ == 'ItemSubtotalRet':
            obj_ = ItemSubtotalRet.factory()
            obj_.build(child_)
            self.ItemSubtotalRet.append(obj_)
        elif nodeName_ == 'ItemDiscountRet':
            obj_ = ItemDiscountRet.factory()
            obj_.build(child_)
            self.ItemDiscountRet.append(obj_)
        elif nodeName_ == 'ItemPaymentRet':
            obj_ = ItemPaymentRet.factory()
            obj_.build(child_)
            self.ItemPaymentRet.append(obj_)
        elif nodeName_ == 'ItemSalesTaxRet':
            obj_ = ItemSalesTaxRet.factory()
            obj_.build(child_)
            self.ItemSalesTaxRet.append(obj_)
        elif nodeName_ == 'ItemSalesTaxGroupRet':
            obj_ = ItemSalesTaxGroupRet.factory()
            obj_.build(child_)
            self.ItemSalesTaxGroupRet.append(obj_)
        elif nodeName_ == 'ItemGroupRet':
            obj_ = ItemGroupRet.factory()
            obj_.build(child_)
            self.ItemGroupRet.append(obj_)
# end class ItemQueryRsType


class SalesReceiptAddRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, SalesReceiptRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.SalesReceiptRet = SalesReceiptRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if SalesReceiptAddRsType.subclass:
            return SalesReceiptAddRsType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptAddRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesReceiptRet(self): return self.SalesReceiptRet
    def set_SalesReceiptRet(self, SalesReceiptRet): self.SalesReceiptRet = SalesReceiptRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptAddRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptAddRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptAddRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptAddRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesReceiptRet is not None:
            self.SalesReceiptRet.export(outfile, level, namespace_, name_='SalesReceiptRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SalesReceiptRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptAddRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesReceiptRet is not None:
            showIndent(outfile, level)
            outfile.write('SalesReceiptRet=model_.SalesReceiptRet(\n')
            self.SalesReceiptRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesReceiptRet':
            obj_ = SalesReceiptRet.factory()
            obj_.build(child_)
            self.set_SalesReceiptRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class SalesReceiptAddRsType


class SalesReceiptModRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, SalesReceiptRet=None, ErrorRecovery=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.SalesReceiptRet = SalesReceiptRet
        self.ErrorRecovery = ErrorRecovery
    def factory(*args_, **kwargs_):
        if SalesReceiptModRsType.subclass:
            return SalesReceiptModRsType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptModRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesReceiptRet(self): return self.SalesReceiptRet
    def set_SalesReceiptRet(self, SalesReceiptRet): self.SalesReceiptRet = SalesReceiptRet
    def get_ErrorRecovery(self): return self.ErrorRecovery
    def set_ErrorRecovery(self, ErrorRecovery): self.ErrorRecovery = ErrorRecovery
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptModRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptModRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptModRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptModRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesReceiptRet is not None:
            self.SalesReceiptRet.export(outfile, level, namespace_, name_='SalesReceiptRet', pretty_print=pretty_print)
        if self.ErrorRecovery is not None:
            self.ErrorRecovery.export(outfile, level, namespace_, name_='ErrorRecovery', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SalesReceiptRet is not None or
            self.ErrorRecovery is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptModRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesReceiptRet is not None:
            showIndent(outfile, level)
            outfile.write('SalesReceiptRet=model_.SalesReceiptRet(\n')
            self.SalesReceiptRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ErrorRecovery is not None:
            showIndent(outfile, level)
            outfile.write('ErrorRecovery=model_.ErrorRecovery(\n')
            self.ErrorRecovery.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesReceiptRet':
            obj_ = SalesReceiptRet.factory()
            obj_.build(child_)
            self.set_SalesReceiptRet(obj_)
        elif nodeName_ == 'ErrorRecovery':
            obj_ = ErrorRecovery.factory()
            obj_.build(child_)
            self.set_ErrorRecovery(obj_)
# end class SalesReceiptModRsType


class SalesReceiptQueryRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, iteratorID=None, iteratorRemainingCount=None, statusSeverity=None, retCount=None, requestID=None, statusMessage=None, statusCode=None, SalesReceiptRet=None):
        self.iteratorID = _cast(None, iteratorID)
        self.iteratorRemainingCount = _cast(None, iteratorRemainingCount)
        self.statusSeverity = _cast(None, statusSeverity)
        self.retCount = _cast(None, retCount)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        if SalesReceiptRet is None:
            self.SalesReceiptRet = []
        else:
            self.SalesReceiptRet = SalesReceiptRet
    def factory(*args_, **kwargs_):
        if SalesReceiptQueryRsType.subclass:
            return SalesReceiptQueryRsType.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptQueryRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesReceiptRet(self): return self.SalesReceiptRet
    def set_SalesReceiptRet(self, SalesReceiptRet): self.SalesReceiptRet = SalesReceiptRet
    def add_SalesReceiptRet(self, value): self.SalesReceiptRet.append(value)
    def insert_SalesReceiptRet(self, index, value): self.SalesReceiptRet[index] = value
    def get_iteratorID(self): return self.iteratorID
    def set_iteratorID(self, iteratorID): self.iteratorID = iteratorID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_iteratorRemainingCount(self): return self.iteratorRemainingCount
    def set_iteratorRemainingCount(self, iteratorRemainingCount): self.iteratorRemainingCount = iteratorRemainingCount
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def get_retCount(self): return self.retCount
    def set_retCount(self, retCount): self.retCount = retCount
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def export(self, outfile, level, namespace_='', name_='SalesReceiptQueryRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptQueryRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptQueryRsType'):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            outfile.write(' iteratorID=%s' % (quote_attrib(self.iteratorID), ))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            outfile.write(' iteratorRemainingCount=%s' % (quote_attrib(self.iteratorRemainingCount), ))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            outfile.write(' retCount=%s' % (quote_attrib(self.retCount), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptQueryRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SalesReceiptRet_ in self.SalesReceiptRet:
            SalesReceiptRet_.export(outfile, level, namespace_, name_='SalesReceiptRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SalesReceiptRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptQueryRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.iteratorID is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            showIndent(outfile, level)
            outfile.write('iteratorID = "%s",\n' % (self.iteratorID,))
        if self.iteratorRemainingCount is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            showIndent(outfile, level)
            outfile.write('iteratorRemainingCount = %d,\n' % (self.iteratorRemainingCount,))
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.retCount is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            showIndent(outfile, level)
            outfile.write('retCount = %d,\n' % (self.retCount,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SalesReceiptRet=[\n')
        level += 1
        for SalesReceiptRet_ in self.SalesReceiptRet:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptRet(\n')
            SalesReceiptRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('iteratorID', node)
        if value is not None and 'iteratorID' not in already_processed:
            already_processed.append('iteratorID')
            self.iteratorID = value
            self.validate_STRTYPE(self.iteratorID)    # validate type STRTYPE
        value = find_attr_value_('iteratorRemainingCount', node)
        if value is not None and 'iteratorRemainingCount' not in already_processed:
            already_processed.append('iteratorRemainingCount')
            try:
                self.iteratorRemainingCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.iteratorRemainingCount)    # validate type INTTYPE
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('retCount', node)
        if value is not None and 'retCount' not in already_processed:
            already_processed.append('retCount')
            try:
                self.retCount = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.retCount)    # validate type INTTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesReceiptRet':
            obj_ = SalesReceiptRet.factory()
            obj_.build(child_)
            self.SalesReceiptRet.append(obj_)
# end class SalesReceiptQueryRsType


class QBXML(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SignonMsgsRq=None, QBXMLMsgsRq=None, SignonMsgsRs=None, QBXMLMsgsRs=None):
        self.SignonMsgsRq = SignonMsgsRq
        self.QBXMLMsgsRq = QBXMLMsgsRq
        self.SignonMsgsRs = SignonMsgsRs
        self.QBXMLMsgsRs = QBXMLMsgsRs
    def factory(*args_, **kwargs_):
        if QBXML.subclass:
            return QBXML.subclass(*args_, **kwargs_)
        else:
            return QBXML(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignonMsgsRq(self): return self.SignonMsgsRq
    def set_SignonMsgsRq(self, SignonMsgsRq): self.SignonMsgsRq = SignonMsgsRq
    def get_QBXMLMsgsRq(self): return self.QBXMLMsgsRq
    def set_QBXMLMsgsRq(self, QBXMLMsgsRq): self.QBXMLMsgsRq = QBXMLMsgsRq
    def get_SignonMsgsRs(self): return self.SignonMsgsRs
    def set_SignonMsgsRs(self, SignonMsgsRs): self.SignonMsgsRs = SignonMsgsRs
    def get_QBXMLMsgsRs(self): return self.QBXMLMsgsRs
    def set_QBXMLMsgsRs(self, QBXMLMsgsRs): self.QBXMLMsgsRs = QBXMLMsgsRs
    def export(self, outfile, level, namespace_='', name_='QBXML', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QBXML')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QBXML'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QBXML', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignonMsgsRq is not None:
            self.SignonMsgsRq.export(outfile, level, namespace_, name_='SignonMsgsRq', pretty_print=pretty_print)
        if self.QBXMLMsgsRq is not None:
            self.QBXMLMsgsRq.export(outfile, level, namespace_, name_='QBXMLMsgsRq', pretty_print=pretty_print)
        if self.SignonMsgsRs is not None:
            self.SignonMsgsRs.export(outfile, level, namespace_, name_='SignonMsgsRs', pretty_print=pretty_print)
        if self.QBXMLMsgsRs is not None:
            self.QBXMLMsgsRs.export(outfile, level, namespace_, name_='QBXMLMsgsRs', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SignonMsgsRq is not None or
            self.QBXMLMsgsRq is not None or
            self.SignonMsgsRs is not None or
            self.QBXMLMsgsRs is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QBXML'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SignonMsgsRq is not None:
            showIndent(outfile, level)
            outfile.write('SignonMsgsRq=model_.SignonMsgsRq(\n')
            self.SignonMsgsRq.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.QBXMLMsgsRq is not None:
            showIndent(outfile, level)
            outfile.write('QBXMLMsgsRq=model_.QBXMLMsgsRq(\n')
            self.QBXMLMsgsRq.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SignonMsgsRs is not None:
            showIndent(outfile, level)
            outfile.write('SignonMsgsRs=model_.SignonMsgsRs(\n')
            self.SignonMsgsRs.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.QBXMLMsgsRs is not None:
            showIndent(outfile, level)
            outfile.write('QBXMLMsgsRs=model_.QBXMLMsgsRs(\n')
            self.QBXMLMsgsRs.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignonMsgsRq':
            obj_ = SignonMsgsRq.factory()
            obj_.build(child_)
            self.set_SignonMsgsRq(obj_)
        elif nodeName_ == 'QBXMLMsgsRq':
            obj_ = QBXMLMsgsRq.factory()
            obj_.build(child_)
            self.set_QBXMLMsgsRq(obj_)
        elif nodeName_ == 'SignonMsgsRs':
            obj_ = SignonMsgsRs.factory()
            obj_.build(child_)
            self.set_SignonMsgsRs(obj_)
        elif nodeName_ == 'QBXMLMsgsRs':
            obj_ = QBXMLMsgsRs.factory()
            obj_.build(child_)
            self.set_QBXMLMsgsRs(obj_)
# end class QBXML


class FirstMonthFiscalYear(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if FirstMonthFiscalYear.subclass:
            return FirstMonthFiscalYear.subclass(*args_, **kwargs_)
        else:
            return FirstMonthFiscalYear(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='FirstMonthFiscalYear', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FirstMonthFiscalYear')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FirstMonthFiscalYear'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FirstMonthFiscalYear', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FirstMonthFiscalYear'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FirstMonthFiscalYear


class FirstMonthIncomeTaxYear(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if FirstMonthIncomeTaxYear.subclass:
            return FirstMonthIncomeTaxYear.subclass(*args_, **kwargs_)
        else:
            return FirstMonthIncomeTaxYear(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='FirstMonthIncomeTaxYear', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FirstMonthIncomeTaxYear')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FirstMonthIncomeTaxYear'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FirstMonthIncomeTaxYear', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FirstMonthIncomeTaxYear'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FirstMonthIncomeTaxYear


class ExpirationMonth(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ExpirationMonth.subclass:
            return ExpirationMonth.subclass(*args_, **kwargs_)
        else:
            return ExpirationMonth(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ExpirationMonth', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpirationMonth')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpirationMonth'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpirationMonth', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ExpirationMonth'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ExpirationMonth


class AVSStreet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AVSStreet.subclass:
            return AVSStreet.subclass(*args_, **kwargs_)
        else:
            return AVSStreet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AVSStreet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AVSStreet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AVSStreet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AVSStreet', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AVSStreet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AVSStreet


class AVSZip(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AVSZip.subclass:
            return AVSZip.subclass(*args_, **kwargs_)
        else:
            return AVSZip(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AVSZip', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AVSZip')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AVSZip'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AVSZip', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AVSZip'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AVSZip


class CardSecurityCodeMatch(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CardSecurityCodeMatch.subclass:
            return CardSecurityCodeMatch.subclass(*args_, **kwargs_)
        else:
            return CardSecurityCodeMatch(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CardSecurityCodeMatch', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CardSecurityCodeMatch')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CardSecurityCodeMatch'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CardSecurityCodeMatch', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CardSecurityCodeMatch'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CardSecurityCodeMatch


class PaymentStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PaymentStatus.subclass:
            return PaymentStatus.subclass(*args_, **kwargs_)
        else:
            return PaymentStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PaymentStatus', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentStatus', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PaymentStatus'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PaymentStatus


class TransactionMode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TransactionMode.subclass:
            return TransactionMode.subclass(*args_, **kwargs_)
        else:
            return TransactionMode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='TransactionMode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TransactionMode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TransactionMode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TransactionMode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TransactionMode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TransactionMode


class JobStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if JobStatus.subclass:
            return JobStatus.subclass(*args_, **kwargs_)
        else:
            return JobStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='JobStatus', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JobStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JobStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JobStatus', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='JobStatus'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class JobStatus


class DeliveryMethod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if DeliveryMethod.subclass:
            return DeliveryMethod.subclass(*args_, **kwargs_)
        else:
            return DeliveryMethod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='DeliveryMethod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DeliveryMethod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DeliveryMethod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DeliveryMethod', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DeliveryMethod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DeliveryMethod


class TaxForm(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TaxForm.subclass:
            return TaxForm.subclass(*args_, **kwargs_)
        else:
            return TaxForm(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='TaxForm', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxForm')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxForm'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxForm', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TaxForm'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxForm


class AcquiredAs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if AcquiredAs.subclass:
            return AcquiredAs.subclass(*args_, **kwargs_)
        else:
            return AcquiredAs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AcquiredAs', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AcquiredAs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AcquiredAs'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AcquiredAs', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AcquiredAs'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AcquiredAs


class QBFileMode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if QBFileMode.subclass:
            return QBFileMode.subclass(*args_, **kwargs_)
        else:
            return QBFileMode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='QBFileMode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='QBFileMode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='QBFileMode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='QBFileMode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='QBFileMode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class QBFileMode


class SpecialItemType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SpecialItemType.subclass:
            return SpecialItemType.subclass(*args_, **kwargs_)
        else:
            return SpecialItemType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SpecialItemType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SpecialItemType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SpecialItemType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SpecialItemType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SpecialItemType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SpecialItemType


class SalesTaxCountry(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if SalesTaxCountry.subclass:
            return SalesTaxCountry.subclass(*args_, **kwargs_)
        else:
            return SalesTaxCountry(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SalesTaxCountry', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxCountry')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxCountry'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxCountry', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxCountry'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SalesTaxCountry


class CreditCardTxnType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CreditCardTxnType.subclass:
            return CreditCardTxnType.subclass(*args_, **kwargs_)
        else:
            return CreditCardTxnType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CreditCardTxnType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTxnType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardTxnType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardTxnType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTxnType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditCardTxnType


class ServiceStatus(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if ServiceStatus.subclass:
            return ServiceStatus.subclass(*args_, **kwargs_)
        else:
            return ServiceStatus(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ServiceStatus', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ServiceStatus')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ServiceStatus'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ServiceStatus', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ServiceStatus'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ServiceStatus


class PreferredDeliveryMethod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PreferredDeliveryMethod.subclass:
            return PreferredDeliveryMethod.subclass(*args_, **kwargs_)
        else:
            return PreferredDeliveryMethod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PreferredDeliveryMethod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PreferredDeliveryMethod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PreferredDeliveryMethod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PreferredDeliveryMethod', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PreferredDeliveryMethod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PreferredDeliveryMethod


class DataExtType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, valueOf_=None):
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if DataExtType.subclass:
            return DataExtType.subclass(*args_, **kwargs_)
        else:
            return DataExtType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='DataExtType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataExtType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DataExtType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DataExtType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataExtType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DataExtType


class ParentRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ParentRef.subclass:
            return ParentRef.subclass(*args_, **kwargs_)
        else:
            return ParentRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def export(self, outfile, level, namespace_='', name_='ParentRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ParentRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ParentRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ParentRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ParentRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
            self.validate_FullName(self.FullName)    # validate type FullName
# end class ParentRef


class CustomerRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if CustomerRef.subclass:
            return CustomerRef.subclass(*args_, **kwargs_)
        else:
            return CustomerRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='CustomerRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class CustomerRef


class FullName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if FullName.subclass:
            return FullName.subclass(*args_, **kwargs_)
        else:
            return FullName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='FullName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FullName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FullName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FullName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FullName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FullName


class ClassRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ClassRef.subclass:
            return ClassRef.subclass(*args_, **kwargs_)
        else:
            return ClassRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ClassRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClassRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ClassRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ClassRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClassRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ClassRef


class TermsRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if TermsRef.subclass:
            return TermsRef.subclass(*args_, **kwargs_)
        else:
            return TermsRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='TermsRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TermsRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TermsRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TermsRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TermsRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class TermsRef


class SalesRepRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if SalesRepRef.subclass:
            return SalesRepRef.subclass(*args_, **kwargs_)
        else:
            return SalesRepRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='SalesRepRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesRepRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesRepRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesRepRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesRepRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class SalesRepRef


class CustomerMsgRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if CustomerMsgRef.subclass:
            return CustomerMsgRef.subclass(*args_, **kwargs_)
        else:
            return CustomerMsgRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='CustomerMsgRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerMsgRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerMsgRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerMsgRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerMsgRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class CustomerMsgRef


class ItemRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ItemRef.subclass:
            return ItemRef.subclass(*args_, **kwargs_)
        else:
            return ItemRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def export(self, outfile, level, namespace_='', name_='ItemRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
            self.validate_FullName(self.FullName)    # validate type FullName
# end class ItemRef


class ItemGroupRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ItemGroupRef.subclass:
            return ItemGroupRef.subclass(*args_, **kwargs_)
        else:
            return ItemGroupRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ItemGroupRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemGroupRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemGroupRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemGroupRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemGroupRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ItemGroupRef


class ItemSalesTaxRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ItemSalesTaxRef.subclass:
            return ItemSalesTaxRef.subclass(*args_, **kwargs_)
        else:
            return ItemSalesTaxRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ItemSalesTaxRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemSalesTaxRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemSalesTaxRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemSalesTaxRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemSalesTaxRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ItemSalesTaxRef


class ItemInventoryRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ItemInventoryRef.subclass:
            return ItemInventoryRef.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ItemInventoryRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ItemInventoryRef


class AccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if AccountRef.subclass:
            return AccountRef.subclass(*args_, **kwargs_)
        else:
            return AccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='AccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class AccountRef


class ExpenseAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ExpenseAccountRef.subclass:
            return ExpenseAccountRef.subclass(*args_, **kwargs_)
        else:
            return ExpenseAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ExpenseAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ExpenseAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ExpenseAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ExpenseAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ExpenseAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ExpenseAccountRef


class PrefVendorRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if PrefVendorRef.subclass:
            return PrefVendorRef.subclass(*args_, **kwargs_)
        else:
            return PrefVendorRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='PrefVendorRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrefVendorRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrefVendorRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrefVendorRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PrefVendorRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class PrefVendorRef


class IncomeAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if IncomeAccountRef.subclass:
            return IncomeAccountRef.subclass(*args_, **kwargs_)
        else:
            return IncomeAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='IncomeAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='IncomeAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='IncomeAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='IncomeAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='IncomeAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class IncomeAccountRef


class COGSAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if COGSAccountRef.subclass:
            return COGSAccountRef.subclass(*args_, **kwargs_)
        else:
            return COGSAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='COGSAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='COGSAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='COGSAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='COGSAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='COGSAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class COGSAccountRef


class AssetAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if AssetAccountRef.subclass:
            return AssetAccountRef.subclass(*args_, **kwargs_)
        else:
            return AssetAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='AssetAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssetAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssetAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AssetAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AssetAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class AssetAccountRef


class DepositToAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if DepositToAccountRef.subclass:
            return DepositToAccountRef.subclass(*args_, **kwargs_)
        else:
            return DepositToAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='DepositToAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DepositToAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DepositToAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DepositToAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DepositToAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class DepositToAccountRef


class OverrideItemAccountRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if OverrideItemAccountRef.subclass:
            return OverrideItemAccountRef.subclass(*args_, **kwargs_)
        else:
            return OverrideItemAccountRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='OverrideItemAccountRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverrideItemAccountRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OverrideItemAccountRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OverrideItemAccountRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='OverrideItemAccountRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class OverrideItemAccountRef


class TaxVendorRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if TaxVendorRef.subclass:
            return TaxVendorRef.subclass(*args_, **kwargs_)
        else:
            return TaxVendorRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='TaxVendorRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxVendorRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxVendorRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxVendorRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TaxVendorRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class TaxVendorRef


class PaymentMethodRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if PaymentMethodRef.subclass:
            return PaymentMethodRef.subclass(*args_, **kwargs_)
        else:
            return PaymentMethodRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='PaymentMethodRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentMethodRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentMethodRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentMethodRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PaymentMethodRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class PaymentMethodRef


class PreferredPaymentMethodRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if PreferredPaymentMethodRef.subclass:
            return PreferredPaymentMethodRef.subclass(*args_, **kwargs_)
        else:
            return PreferredPaymentMethodRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='PreferredPaymentMethodRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PreferredPaymentMethodRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PreferredPaymentMethodRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PreferredPaymentMethodRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PreferredPaymentMethodRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class PreferredPaymentMethodRef


class ShipMethodRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if ShipMethodRef.subclass:
            return ShipMethodRef.subclass(*args_, **kwargs_)
        else:
            return ShipMethodRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='ShipMethodRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipMethodRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipMethodRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipMethodRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipMethodRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class ShipMethodRef


class CustomerTypeRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if CustomerTypeRef.subclass:
            return CustomerTypeRef.subclass(*args_, **kwargs_)
        else:
            return CustomerTypeRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='CustomerTypeRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerTypeRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerTypeRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerTypeRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerTypeRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class CustomerTypeRef


class JobTypeRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if JobTypeRef.subclass:
            return JobTypeRef.subclass(*args_, **kwargs_)
        else:
            return JobTypeRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='JobTypeRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JobTypeRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JobTypeRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JobTypeRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='JobTypeRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class JobTypeRef


class SalesTaxCodeRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if SalesTaxCodeRef.subclass:
            return SalesTaxCodeRef.subclass(*args_, **kwargs_)
        else:
            return SalesTaxCodeRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='SalesTaxCodeRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxCodeRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxCodeRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxCodeRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxCodeRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class SalesTaxCodeRef


class CustomerSalesTaxCodeRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if CustomerSalesTaxCodeRef.subclass:
            return CustomerSalesTaxCodeRef.subclass(*args_, **kwargs_)
        else:
            return CustomerSalesTaxCodeRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='CustomerSalesTaxCodeRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerSalesTaxCodeRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerSalesTaxCodeRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerSalesTaxCodeRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerSalesTaxCodeRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class CustomerSalesTaxCodeRef


class TemplateRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if TemplateRef.subclass:
            return TemplateRef.subclass(*args_, **kwargs_)
        else:
            return TemplateRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='TemplateRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TemplateRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TemplateRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TemplateRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class TemplateRef


class PriceLevelRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if PriceLevelRef.subclass:
            return PriceLevelRef.subclass(*args_, **kwargs_)
        else:
            return PriceLevelRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='PriceLevelRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceLevelRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceLevelRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceLevelRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PriceLevelRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class PriceLevelRef


class PurchaseTaxCodeRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if PurchaseTaxCodeRef.subclass:
            return PurchaseTaxCodeRef.subclass(*args_, **kwargs_)
        else:
            return PurchaseTaxCodeRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='PurchaseTaxCodeRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PurchaseTaxCodeRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PurchaseTaxCodeRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PurchaseTaxCodeRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PurchaseTaxCodeRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class PurchaseTaxCodeRef


class UnitOfMeasureSetRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if UnitOfMeasureSetRef.subclass:
            return UnitOfMeasureSetRef.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasureSetRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='UnitOfMeasureSetRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasureSetRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitOfMeasureSetRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnitOfMeasureSetRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnitOfMeasureSetRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class UnitOfMeasureSetRef


class OverrideUOMSetRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if OverrideUOMSetRef.subclass:
            return OverrideUOMSetRef.subclass(*args_, **kwargs_)
        else:
            return OverrideUOMSetRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='OverrideUOMSetRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='OverrideUOMSetRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='OverrideUOMSetRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='OverrideUOMSetRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='OverrideUOMSetRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class OverrideUOMSetRef


class SalesTaxReturnLineRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if SalesTaxReturnLineRef.subclass:
            return SalesTaxReturnLineRef.subclass(*args_, **kwargs_)
        else:
            return SalesTaxReturnLineRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def validate_FullName(self, value):
        # Validate type FullName, a restriction on STRTYPE.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesTaxReturnLineRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxReturnLineRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxReturnLineRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxReturnLineRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxReturnLineRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
            self.validate_FullName(self.FullName)    # validate type FullName
# end class SalesTaxReturnLineRef


class CurrencyRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if CurrencyRef.subclass:
            return CurrencyRef.subclass(*args_, **kwargs_)
        else:
            return CurrencyRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='CurrencyRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CurrencyRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CurrencyRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CurrencyRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CurrencyRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class CurrencyRef


class InventorySiteRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if InventorySiteRef.subclass:
            return InventorySiteRef.subclass(*args_, **kwargs_)
        else:
            return InventorySiteRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='InventorySiteRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InventorySiteRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InventorySiteRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InventorySiteRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InventorySiteRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class InventorySiteRef


class InventorySiteLocationRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, FullName=None):
        self.ListID = ListID
        self.FullName = FullName
    def factory(*args_, **kwargs_):
        if InventorySiteLocationRef.subclass:
            return InventorySiteLocationRef.subclass(*args_, **kwargs_)
        else:
            return InventorySiteLocationRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def export(self, outfile, level, namespace_='', name_='InventorySiteLocationRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InventorySiteLocationRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InventorySiteLocationRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InventorySiteLocationRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.FullName is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='InventorySiteLocationRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
# end class InventorySiteLocationRef


class Address(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
    def factory(*args_, **kwargs_):
        if Address.subclass:
            return Address.subclass(*args_, **kwargs_)
        else:
            return Address(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='Address', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Address')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Address'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Address', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Address'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class Address


class Addr1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Addr1.subclass:
            return Addr1.subclass(*args_, **kwargs_)
        else:
            return Addr1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Addr1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Addr1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Addr1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Addr1', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Addr1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Addr1


class Addr2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Addr2.subclass:
            return Addr2.subclass(*args_, **kwargs_)
        else:
            return Addr2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Addr2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Addr2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Addr2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Addr2', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Addr2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Addr2


class Addr3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Addr3.subclass:
            return Addr3.subclass(*args_, **kwargs_)
        else:
            return Addr3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Addr3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Addr3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Addr3'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Addr3', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Addr3'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Addr3


class Addr4(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Addr4.subclass:
            return Addr4.subclass(*args_, **kwargs_)
        else:
            return Addr4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Addr4', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Addr4')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Addr4'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Addr4', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Addr4'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Addr4


class Addr5(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Addr5.subclass:
            return Addr5.subclass(*args_, **kwargs_)
        else:
            return Addr5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Addr5', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Addr5')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Addr5'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Addr5', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Addr5'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Addr5


class City(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if City.subclass:
            return City.subclass(*args_, **kwargs_)
        else:
            return City(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='City', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='City')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='City'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='City', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='City'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class City


class State(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if State.subclass:
            return State.subclass(*args_, **kwargs_)
        else:
            return State(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='State', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='State')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='State'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='State', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='State'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class State


class PostalCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if PostalCode.subclass:
            return PostalCode.subclass(*args_, **kwargs_)
        else:
            return PostalCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PostalCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PostalCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PostalCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PostalCode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PostalCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PostalCode


class Country(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Country.subclass:
            return Country.subclass(*args_, **kwargs_)
        else:
            return Country(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Country', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Country')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Country'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Country', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Country'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Country


class Note(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Note.subclass:
            return Note.subclass(*args_, **kwargs_)
        else:
            return Note(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Note', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Note')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Note'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Note', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Note'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Note


class AddressBlock(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
    def factory(*args_, **kwargs_):
        if AddressBlock.subclass:
            return AddressBlock.subclass(*args_, **kwargs_)
        else:
            return AddressBlock(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def export(self, outfile, level, namespace_='', name_='AddressBlock', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AddressBlock')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AddressBlock'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AddressBlock', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AddressBlock'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
# end class AddressBlock


class ShipAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
    def factory(*args_, **kwargs_):
        if ShipAddress.subclass:
            return ShipAddress.subclass(*args_, **kwargs_)
        else:
            return ShipAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='ShipAddress', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class ShipAddress


class ShipAddressBlock(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
    def factory(*args_, **kwargs_):
        if ShipAddressBlock.subclass:
            return ShipAddressBlock.subclass(*args_, **kwargs_)
        else:
            return ShipAddressBlock(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def export(self, outfile, level, namespace_='', name_='ShipAddressBlock', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipAddressBlock')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipAddressBlock'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipAddressBlock', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipAddressBlock'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
# end class ShipAddressBlock


class LegalAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
    def factory(*args_, **kwargs_):
        if LegalAddress.subclass:
            return LegalAddress.subclass(*args_, **kwargs_)
        else:
            return LegalAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='LegalAddress', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LegalAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LegalAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LegalAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LegalAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class LegalAddress


class BillAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
    def factory(*args_, **kwargs_):
        if BillAddress.subclass:
            return BillAddress.subclass(*args_, **kwargs_)
        else:
            return BillAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='BillAddress', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BillAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BillAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BillAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class BillAddress


class BillAddressBlock(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
    def factory(*args_, **kwargs_):
        if BillAddressBlock.subclass:
            return BillAddressBlock.subclass(*args_, **kwargs_)
        else:
            return BillAddressBlock(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def export(self, outfile, level, namespace_='', name_='BillAddressBlock', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillAddressBlock')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BillAddressBlock'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BillAddressBlock', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BillAddressBlock'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
# end class BillAddressBlock


class CompanyAddressForCustomer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
    def factory(*args_, **kwargs_):
        if CompanyAddressForCustomer.subclass:
            return CompanyAddressForCustomer.subclass(*args_, **kwargs_)
        else:
            return CompanyAddressForCustomer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='CompanyAddressForCustomer', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyAddressForCustomer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyAddressForCustomer'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyAddressForCustomer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyAddressForCustomer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class CompanyAddressForCustomer


class CompanyAddressBlockForCustomer(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None):
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
    def factory(*args_, **kwargs_):
        if CompanyAddressBlockForCustomer.subclass:
            return CompanyAddressBlockForCustomer.subclass(*args_, **kwargs_)
        else:
            return CompanyAddressBlockForCustomer(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def export(self, outfile, level, namespace_='', name_='CompanyAddressBlockForCustomer', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyAddressBlockForCustomer')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyAddressBlockForCustomer'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyAddressBlockForCustomer', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyAddressBlockForCustomer'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
# end class CompanyAddressBlockForCustomer


class ShipToAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Addr1=None, Addr2=None, Addr3=None, Addr4=None, Addr5=None, City=None, State=None, PostalCode=None, Country=None, Note=None, DefaultShipTo=None):
        self.Name = Name
        self.Addr1 = Addr1
        self.Addr2 = Addr2
        self.Addr3 = Addr3
        self.Addr4 = Addr4
        self.Addr5 = Addr5
        self.City = City
        self.State = State
        self.PostalCode = PostalCode
        self.Country = Country
        self.Note = Note
        self.DefaultShipTo = DefaultShipTo
    def factory(*args_, **kwargs_):
        if ShipToAddress.subclass:
            return ShipToAddress.subclass(*args_, **kwargs_)
        else:
            return ShipToAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Addr1(self): return self.Addr1
    def set_Addr1(self, Addr1): self.Addr1 = Addr1
    def get_Addr2(self): return self.Addr2
    def set_Addr2(self, Addr2): self.Addr2 = Addr2
    def get_Addr3(self): return self.Addr3
    def set_Addr3(self, Addr3): self.Addr3 = Addr3
    def get_Addr4(self): return self.Addr4
    def set_Addr4(self, Addr4): self.Addr4 = Addr4
    def get_Addr5(self): return self.Addr5
    def set_Addr5(self, Addr5): self.Addr5 = Addr5
    def get_City(self): return self.City
    def set_City(self, City): self.City = City
    def get_State(self): return self.State
    def set_State(self, State): self.State = State
    def get_PostalCode(self): return self.PostalCode
    def set_PostalCode(self, PostalCode): self.PostalCode = PostalCode
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def get_DefaultShipTo(self): return self.DefaultShipTo
    def set_DefaultShipTo(self, DefaultShipTo): self.DefaultShipTo = DefaultShipTo
    def export(self, outfile, level, namespace_='', name_='ShipToAddress', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipToAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipToAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipToAddress', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.Addr1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr1>%s</%sAddr1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr1).encode(ExternalEncoding), input_name='Addr1'), namespace_, eol_))
        if self.Addr2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr2>%s</%sAddr2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr2).encode(ExternalEncoding), input_name='Addr2'), namespace_, eol_))
        if self.Addr3 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr3>%s</%sAddr3>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr3).encode(ExternalEncoding), input_name='Addr3'), namespace_, eol_))
        if self.Addr4 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr4>%s</%sAddr4>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr4).encode(ExternalEncoding), input_name='Addr4'), namespace_, eol_))
        if self.Addr5 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAddr5>%s</%sAddr5>%s' % (namespace_, self.gds_format_string(quote_xml(self.Addr5).encode(ExternalEncoding), input_name='Addr5'), namespace_, eol_))
        if self.City is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCity>%s</%sCity>%s' % (namespace_, self.gds_format_string(quote_xml(self.City).encode(ExternalEncoding), input_name='City'), namespace_, eol_))
        if self.State is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sState>%s</%sState>%s' % (namespace_, self.gds_format_string(quote_xml(self.State).encode(ExternalEncoding), input_name='State'), namespace_, eol_))
        if self.PostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPostalCode>%s</%sPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.PostalCode).encode(ExternalEncoding), input_name='PostalCode'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
        if self.DefaultShipTo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDefaultShipTo>%s</%sDefaultShipTo>%s' % (namespace_, self.gds_format_string(quote_xml(self.DefaultShipTo).encode(ExternalEncoding), input_name='DefaultShipTo'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Addr1 is not None or
            self.Addr2 is not None or
            self.Addr3 is not None or
            self.Addr4 is not None or
            self.Addr5 is not None or
            self.City is not None or
            self.State is not None or
            self.PostalCode is not None or
            self.Country is not None or
            self.Note is not None or
            self.DefaultShipTo is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipToAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Addr1 is not None:
            showIndent(outfile, level)
            outfile.write('Addr1=%s,\n' % quote_python(self.Addr1).encode(ExternalEncoding))
        if self.Addr2 is not None:
            showIndent(outfile, level)
            outfile.write('Addr2=%s,\n' % quote_python(self.Addr2).encode(ExternalEncoding))
        if self.Addr3 is not None:
            showIndent(outfile, level)
            outfile.write('Addr3=%s,\n' % quote_python(self.Addr3).encode(ExternalEncoding))
        if self.Addr4 is not None:
            showIndent(outfile, level)
            outfile.write('Addr4=%s,\n' % quote_python(self.Addr4).encode(ExternalEncoding))
        if self.Addr5 is not None:
            showIndent(outfile, level)
            outfile.write('Addr5=%s,\n' % quote_python(self.Addr5).encode(ExternalEncoding))
        if self.City is not None:
            showIndent(outfile, level)
            outfile.write('City=%s,\n' % quote_python(self.City).encode(ExternalEncoding))
        if self.State is not None:
            showIndent(outfile, level)
            outfile.write('State=%s,\n' % quote_python(self.State).encode(ExternalEncoding))
        if self.PostalCode is not None:
            showIndent(outfile, level)
            outfile.write('PostalCode=%s,\n' % quote_python(self.PostalCode).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
        if self.DefaultShipTo is not None:
            showIndent(outfile, level)
            outfile.write('DefaultShipTo=%s,\n' % quote_python(self.DefaultShipTo).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Addr1':
            Addr1_ = child_.text
            Addr1_ = self.gds_validate_string(Addr1_, node, 'Addr1')
            self.Addr1 = Addr1_
        elif nodeName_ == 'Addr2':
            Addr2_ = child_.text
            Addr2_ = self.gds_validate_string(Addr2_, node, 'Addr2')
            self.Addr2 = Addr2_
        elif nodeName_ == 'Addr3':
            Addr3_ = child_.text
            Addr3_ = self.gds_validate_string(Addr3_, node, 'Addr3')
            self.Addr3 = Addr3_
        elif nodeName_ == 'Addr4':
            Addr4_ = child_.text
            Addr4_ = self.gds_validate_string(Addr4_, node, 'Addr4')
            self.Addr4 = Addr4_
        elif nodeName_ == 'Addr5':
            Addr5_ = child_.text
            Addr5_ = self.gds_validate_string(Addr5_, node, 'Addr5')
            self.Addr5 = Addr5_
        elif nodeName_ == 'City':
            City_ = child_.text
            City_ = self.gds_validate_string(City_, node, 'City')
            self.City = City_
        elif nodeName_ == 'State':
            State_ = child_.text
            State_ = self.gds_validate_string(State_, node, 'State')
            self.State = State_
        elif nodeName_ == 'PostalCode':
            PostalCode_ = child_.text
            PostalCode_ = self.gds_validate_string(PostalCode_, node, 'PostalCode')
            self.PostalCode = PostalCode_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
        elif nodeName_ == 'DefaultShipTo':
            DefaultShipTo_ = child_.text
            DefaultShipTo_ = self.gds_validate_string(DefaultShipTo_, node, 'DefaultShipTo')
            self.DefaultShipTo = DefaultShipTo_
# end class ShipToAddress


class Name(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Name.subclass:
            return Name.subclass(*args_, **kwargs_)
        else:
            return Name(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Name', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Name')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Name'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Name', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Name'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Name


class AdditionalContactRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ContactName=None, ContactValue=None):
        self.ContactName = ContactName
        self.ContactValue = ContactValue
    def factory(*args_, **kwargs_):
        if AdditionalContactRef.subclass:
            return AdditionalContactRef.subclass(*args_, **kwargs_)
        else:
            return AdditionalContactRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ContactName(self): return self.ContactName
    def set_ContactName(self, ContactName): self.ContactName = ContactName
    def get_ContactValue(self): return self.ContactValue
    def set_ContactValue(self, ContactValue): self.ContactValue = ContactValue
    def export(self, outfile, level, namespace_='', name_='AdditionalContactRef', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalContactRef')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalContactRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalContactRef', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ContactName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactName>%s</%sContactName>%s' % (namespace_, self.gds_format_string(quote_xml(self.ContactName).encode(ExternalEncoding), input_name='ContactName'), namespace_, eol_))
        if self.ContactValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContactValue>%s</%sContactValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.ContactValue).encode(ExternalEncoding), input_name='ContactValue'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ContactName is not None or
            self.ContactValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AdditionalContactRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ContactName is not None:
            showIndent(outfile, level)
            outfile.write('ContactName=%s,\n' % quote_python(self.ContactName).encode(ExternalEncoding))
        if self.ContactValue is not None:
            showIndent(outfile, level)
            outfile.write('ContactValue=%s,\n' % quote_python(self.ContactValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ContactName':
            ContactName_ = child_.text
            ContactName_ = self.gds_validate_string(ContactName_, node, 'ContactName')
            self.ContactName = ContactName_
        elif nodeName_ == 'ContactValue':
            ContactValue_ = child_.text
            ContactValue_ = self.gds_validate_string(ContactValue_, node, 'ContactValue')
            self.ContactValue = ContactValue_
# end class AdditionalContactRef


class ContactName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ContactName.subclass:
            return ContactName.subclass(*args_, **kwargs_)
        else:
            return ContactName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ContactName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ContactName


class ContactValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ContactValue.subclass:
            return ContactValue.subclass(*args_, **kwargs_)
        else:
            return ContactValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ContactValue', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactValue', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactValue'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ContactValue


class BarCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, BarCodeValue=None, AssignEvenIfUsed=None, AllowOverride=None):
        self.BarCodeValue = BarCodeValue
        self.AssignEvenIfUsed = AssignEvenIfUsed
        self.AllowOverride = AllowOverride
    def factory(*args_, **kwargs_):
        if BarCode.subclass:
            return BarCode.subclass(*args_, **kwargs_)
        else:
            return BarCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_AssignEvenIfUsed(self): return self.AssignEvenIfUsed
    def set_AssignEvenIfUsed(self, AssignEvenIfUsed): self.AssignEvenIfUsed = AssignEvenIfUsed
    def get_AllowOverride(self): return self.AllowOverride
    def set_AllowOverride(self, AllowOverride): self.AllowOverride = AllowOverride
    def export(self, outfile, level, namespace_='', name_='BarCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BarCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BarCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BarCode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.AssignEvenIfUsed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssignEvenIfUsed>%s</%sAssignEvenIfUsed>%s' % (namespace_, self.gds_format_string(quote_xml(self.AssignEvenIfUsed).encode(ExternalEncoding), input_name='AssignEvenIfUsed'), namespace_, eol_))
        if self.AllowOverride is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAllowOverride>%s</%sAllowOverride>%s' % (namespace_, self.gds_format_string(quote_xml(self.AllowOverride).encode(ExternalEncoding), input_name='AllowOverride'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.BarCodeValue is not None or
            self.AssignEvenIfUsed is not None or
            self.AllowOverride is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BarCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.AssignEvenIfUsed is not None:
            showIndent(outfile, level)
            outfile.write('AssignEvenIfUsed=%s,\n' % quote_python(self.AssignEvenIfUsed).encode(ExternalEncoding))
        if self.AllowOverride is not None:
            showIndent(outfile, level)
            outfile.write('AllowOverride=%s,\n' % quote_python(self.AllowOverride).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'AssignEvenIfUsed':
            AssignEvenIfUsed_ = child_.text
            AssignEvenIfUsed_ = re_.sub(String_cleanup_pat_, " ", AssignEvenIfUsed_).strip()
            AssignEvenIfUsed_ = self.gds_validate_string(AssignEvenIfUsed_, node, 'AssignEvenIfUsed')
            self.AssignEvenIfUsed = AssignEvenIfUsed_
        elif nodeName_ == 'AllowOverride':
            AllowOverride_ = child_.text
            AllowOverride_ = re_.sub(String_cleanup_pat_, " ", AllowOverride_).strip()
            AllowOverride_ = self.gds_validate_string(AllowOverride_, node, 'AllowOverride')
            self.AllowOverride = AllowOverride_
# end class BarCode


class BarCodeValue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if BarCodeValue.subclass:
            return BarCodeValue.subclass(*args_, **kwargs_)
        else:
            return BarCodeValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='BarCodeValue', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BarCodeValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BarCodeValue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BarCodeValue', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BarCodeValue'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class BarCodeValue


class Contacts(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Salutation=None, FirstName=None, MiddleName=None, LastName=None, JobTitle=None, AdditionalContactRef=None):
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.JobTitle = JobTitle
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
    def factory(*args_, **kwargs_):
        if Contacts.subclass:
            return Contacts.subclass(*args_, **kwargs_)
        else:
            return Contacts(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def export(self, outfile, level, namespace_='', name_='Contacts', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contacts')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Contacts'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Contacts', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.JobTitle is not None or
            self.AdditionalContactRef
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Contacts'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
# end class Contacts


class Salutation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Salutation.subclass:
            return Salutation.subclass(*args_, **kwargs_)
        else:
            return Salutation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Salutation', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Salutation')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Salutation'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Salutation', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Salutation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Salutation


class FirstName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if FirstName.subclass:
            return FirstName.subclass(*args_, **kwargs_)
        else:
            return FirstName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='FirstName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FirstName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FirstName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FirstName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FirstName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FirstName


class MiddleName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MiddleName.subclass:
            return MiddleName.subclass(*args_, **kwargs_)
        else:
            return MiddleName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='MiddleName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MiddleName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MiddleName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MiddleName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MiddleName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MiddleName


class LastName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if LastName.subclass:
            return LastName.subclass(*args_, **kwargs_)
        else:
            return LastName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='LastName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LastName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LastName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LastName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LastName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LastName


class JobTitle(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if JobTitle.subclass:
            return JobTitle.subclass(*args_, **kwargs_)
        else:
            return JobTitle(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='JobTitle', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JobTitle')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JobTitle'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JobTitle', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='JobTitle'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class JobTitle


class ContactsMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, EditSequence=None, Salutation=None, FirstName=None, MiddleName=None, LastName=None, JobTitle=None, AdditionalContactRef=None):
        self.ListID = ListID
        self.EditSequence = EditSequence
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.JobTitle = JobTitle
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
    def factory(*args_, **kwargs_):
        if ContactsMod.subclass:
            return ContactsMod.subclass(*args_, **kwargs_)
        else:
            return ContactsMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def export(self, outfile, level, namespace_='', name_='ContactsMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.EditSequence is not None or
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.JobTitle is not None or
            self.AdditionalContactRef
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactsMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
# end class ContactsMod


class EditSequence(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if EditSequence.subclass:
            return EditSequence.subclass(*args_, **kwargs_)
        else:
            return EditSequence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='EditSequence', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EditSequence')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EditSequence'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EditSequence', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EditSequence'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EditSequence


class ContactsRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Contact=None, Salutation=None, FirstName=None, MiddleName=None, LastName=None, JobTitle=None, AdditionalContactRef=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Contact = Contact
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.JobTitle = JobTitle
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
    def factory(*args_, **kwargs_):
        if ContactsRet.subclass:
            return ContactsRet.subclass(*args_, **kwargs_)
        else:
            return ContactsRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def export(self, outfile, level, namespace_='', name_='ContactsRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ContactsRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ContactsRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ContactsRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContact>%s</%sContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.Contact).encode(ExternalEncoding), input_name='Contact'), namespace_, eol_))
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Contact is not None or
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.JobTitle is not None or
            self.AdditionalContactRef
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ContactsRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=%s,\n' % quote_python(self.Contact).encode(ExternalEncoding))
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Contact':
            Contact_ = child_.text
            Contact_ = self.gds_validate_string(Contact_, node, 'Contact')
            self.Contact = Contact_
        elif nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
# end class ContactsRet


class Contact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Contact.subclass:
            return Contact.subclass(*args_, **kwargs_)
        else:
            return Contact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Contact', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Contact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Contact'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Contact', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Contact'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Contact


class AdditionalNotes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Note=None):
        self.Note = Note
    def factory(*args_, **kwargs_):
        if AdditionalNotes.subclass:
            return AdditionalNotes.subclass(*args_, **kwargs_)
        else:
            return AdditionalNotes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='AdditionalNotes', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalNotes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalNotes'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalNotes', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AdditionalNotes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class AdditionalNotes


class AdditionalNotesMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteID=None, Note=None):
        self.NoteID = NoteID
        self.Note = Note
    def factory(*args_, **kwargs_):
        if AdditionalNotesMod.subclass:
            return AdditionalNotesMod.subclass(*args_, **kwargs_)
        else:
            return AdditionalNotesMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteID(self): return self.NoteID
    def set_NoteID(self, NoteID): self.NoteID = NoteID
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='AdditionalNotesMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalNotesMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalNotesMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalNotesMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteID>%s</%sNoteID>%s' % (namespace_, self.gds_format_integer(self.NoteID, input_name='NoteID'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.NoteID is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AdditionalNotesMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NoteID is not None:
            showIndent(outfile, level)
            outfile.write('NoteID=%d,\n' % self.NoteID)
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteID':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NoteID')
            self.NoteID = ival_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class AdditionalNotesMod


class AdditionalNotesRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NoteID=None, Date=None, Note=None):
        self.NoteID = NoteID
        self.Date = Date
        self.Note = Note
    def factory(*args_, **kwargs_):
        if AdditionalNotesRet.subclass:
            return AdditionalNotesRet.subclass(*args_, **kwargs_)
        else:
            return AdditionalNotesRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_NoteID(self): return self.NoteID
    def set_NoteID(self, NoteID): self.NoteID = NoteID
    def get_Date(self): return self.Date
    def set_Date(self, Date): self.Date = Date
    def get_Note(self): return self.Note
    def set_Note(self, Note): self.Note = Note
    def export(self, outfile, level, namespace_='', name_='AdditionalNotesRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AdditionalNotesRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AdditionalNotesRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AdditionalNotesRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NoteID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNoteID>%s</%sNoteID>%s' % (namespace_, self.gds_format_integer(self.NoteID, input_name='NoteID'), namespace_, eol_))
        if self.Date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDate>%s</%sDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.Date).encode(ExternalEncoding), input_name='Date'), namespace_, eol_))
        if self.Note is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNote>%s</%sNote>%s' % (namespace_, self.gds_format_string(quote_xml(self.Note).encode(ExternalEncoding), input_name='Note'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.NoteID is not None or
            self.Date is not None or
            self.Note is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AdditionalNotesRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.NoteID is not None:
            showIndent(outfile, level)
            outfile.write('NoteID=%d,\n' % self.NoteID)
        if self.Date is not None:
            showIndent(outfile, level)
            outfile.write('Date=%s,\n' % quote_python(self.Date).encode(ExternalEncoding))
        if self.Note is not None:
            showIndent(outfile, level)
            outfile.write('Note=%s,\n' % quote_python(self.Note).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NoteID':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NoteID')
            self.NoteID = ival_
        elif nodeName_ == 'Date':
            Date_ = child_.text
            Date_ = re_.sub(String_cleanup_pat_, " ", Date_).strip()
            Date_ = self.gds_validate_string(Date_, node, 'Date')
            self.Date = Date_
        elif nodeName_ == 'Note':
            Note_ = child_.text
            Note_ = self.gds_validate_string(Note_, node, 'Note')
            self.Note = Note_
# end class AdditionalNotesRet


class CreditCardInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CreditCardNumber=None, ExpirationMonth=None, ExpirationYear=None, NameOnCard=None, CreditCardAddress=None, CreditCardPostalCode=None):
        self.CreditCardNumber = CreditCardNumber
        self.ExpirationMonth = ExpirationMonth
        self.ExpirationYear = ExpirationYear
        self.NameOnCard = NameOnCard
        self.CreditCardAddress = CreditCardAddress
        self.CreditCardPostalCode = CreditCardPostalCode
    def factory(*args_, **kwargs_):
        if CreditCardInfo.subclass:
            return CreditCardInfo.subclass(*args_, **kwargs_)
        else:
            return CreditCardInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CreditCardNumber(self): return self.CreditCardNumber
    def set_CreditCardNumber(self, CreditCardNumber): self.CreditCardNumber = CreditCardNumber
    def get_ExpirationMonth(self): return self.ExpirationMonth
    def set_ExpirationMonth(self, ExpirationMonth): self.ExpirationMonth = ExpirationMonth
    def validate_ExpirationMonth(self, value):
        # Validate type ExpirationMonth, a restriction on INTTYPE.
        pass
    def get_ExpirationYear(self): return self.ExpirationYear
    def set_ExpirationYear(self, ExpirationYear): self.ExpirationYear = ExpirationYear
    def get_NameOnCard(self): return self.NameOnCard
    def set_NameOnCard(self, NameOnCard): self.NameOnCard = NameOnCard
    def get_CreditCardAddress(self): return self.CreditCardAddress
    def set_CreditCardAddress(self, CreditCardAddress): self.CreditCardAddress = CreditCardAddress
    def get_CreditCardPostalCode(self): return self.CreditCardPostalCode
    def set_CreditCardPostalCode(self, CreditCardPostalCode): self.CreditCardPostalCode = CreditCardPostalCode
    def export(self, outfile, level, namespace_='', name_='CreditCardInfo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreditCardNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardNumber>%s</%sCreditCardNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardNumber).encode(ExternalEncoding), input_name='CreditCardNumber'), namespace_, eol_))
        if self.ExpirationMonth is not None:
            self.ExpirationMonth.export(outfile, level, namespace_, name_='ExpirationMonth', pretty_print=pretty_print)
        if self.ExpirationYear is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationYear>%s</%sExpirationYear>%s' % (namespace_, self.gds_format_integer(self.ExpirationYear, input_name='ExpirationYear'), namespace_, eol_))
        if self.NameOnCard is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameOnCard>%s</%sNameOnCard>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameOnCard).encode(ExternalEncoding), input_name='NameOnCard'), namespace_, eol_))
        if self.CreditCardAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardAddress>%s</%sCreditCardAddress>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardAddress).encode(ExternalEncoding), input_name='CreditCardAddress'), namespace_, eol_))
        if self.CreditCardPostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardPostalCode>%s</%sCreditCardPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardPostalCode).encode(ExternalEncoding), input_name='CreditCardPostalCode'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.CreditCardNumber is not None or
            self.ExpirationMonth is not None or
            self.ExpirationYear is not None or
            self.NameOnCard is not None or
            self.CreditCardAddress is not None or
            self.CreditCardPostalCode is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CreditCardNumber is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardNumber=%s,\n' % quote_python(self.CreditCardNumber).encode(ExternalEncoding))
        if self.ExpirationMonth is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationMonth=model_.ExpirationMonth(\n')
            self.ExpirationMonth.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpirationYear is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationYear=%d,\n' % self.ExpirationYear)
        if self.NameOnCard is not None:
            showIndent(outfile, level)
            outfile.write('NameOnCard=%s,\n' % quote_python(self.NameOnCard).encode(ExternalEncoding))
        if self.CreditCardAddress is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardAddress=%s,\n' % quote_python(self.CreditCardAddress).encode(ExternalEncoding))
        if self.CreditCardPostalCode is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardPostalCode=%s,\n' % quote_python(self.CreditCardPostalCode).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CreditCardNumber':
            CreditCardNumber_ = child_.text
            CreditCardNumber_ = self.gds_validate_string(CreditCardNumber_, node, 'CreditCardNumber')
            self.CreditCardNumber = CreditCardNumber_
        elif nodeName_ == 'ExpirationMonth':
            obj_ = None
            self.set_ExpirationMonth(obj_)
            self.validate_ExpirationMonth(self.ExpirationMonth)    # validate type ExpirationMonth
        elif nodeName_ == 'ExpirationYear':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ExpirationYear')
            self.ExpirationYear = ival_
        elif nodeName_ == 'NameOnCard':
            NameOnCard_ = child_.text
            NameOnCard_ = self.gds_validate_string(NameOnCard_, node, 'NameOnCard')
            self.NameOnCard = NameOnCard_
        elif nodeName_ == 'CreditCardAddress':
            CreditCardAddress_ = child_.text
            CreditCardAddress_ = self.gds_validate_string(CreditCardAddress_, node, 'CreditCardAddress')
            self.CreditCardAddress = CreditCardAddress_
        elif nodeName_ == 'CreditCardPostalCode':
            CreditCardPostalCode_ = child_.text
            CreditCardPostalCode_ = self.gds_validate_string(CreditCardPostalCode_, node, 'CreditCardPostalCode')
            self.CreditCardPostalCode = CreditCardPostalCode_
# end class CreditCardInfo


class CreditCardNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CreditCardNumber.subclass:
            return CreditCardNumber.subclass(*args_, **kwargs_)
        else:
            return CreditCardNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CreditCardNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditCardNumber


class NameOnCard(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if NameOnCard.subclass:
            return NameOnCard.subclass(*args_, **kwargs_)
        else:
            return NameOnCard(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='NameOnCard', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NameOnCard')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NameOnCard'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='NameOnCard', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='NameOnCard'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NameOnCard


class CreditCardAddress(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CreditCardAddress.subclass:
            return CreditCardAddress.subclass(*args_, **kwargs_)
        else:
            return CreditCardAddress(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CreditCardAddress', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardAddress')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardAddress'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardAddress', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardAddress'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditCardAddress


class CreditCardPostalCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CreditCardPostalCode.subclass:
            return CreditCardPostalCode.subclass(*args_, **kwargs_)
        else:
            return CreditCardPostalCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CreditCardPostalCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardPostalCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardPostalCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardPostalCode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardPostalCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditCardPostalCode


class CreditCardTxnInputInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CreditCardNumber=None, ExpirationMonth=None, ExpirationYear=None, NameOnCard=None, CreditCardAddress=None, CreditCardPostalCode=None, CommercialCardCode=None, TransactionMode=None, CreditCardTxnType=None):
        self.CreditCardNumber = CreditCardNumber
        self.ExpirationMonth = ExpirationMonth
        self.ExpirationYear = ExpirationYear
        self.NameOnCard = NameOnCard
        self.CreditCardAddress = CreditCardAddress
        self.CreditCardPostalCode = CreditCardPostalCode
        self.CommercialCardCode = CommercialCardCode
        self.TransactionMode = TransactionMode
        self.CreditCardTxnType = CreditCardTxnType
    def factory(*args_, **kwargs_):
        if CreditCardTxnInputInfo.subclass:
            return CreditCardTxnInputInfo.subclass(*args_, **kwargs_)
        else:
            return CreditCardTxnInputInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CreditCardNumber(self): return self.CreditCardNumber
    def set_CreditCardNumber(self, CreditCardNumber): self.CreditCardNumber = CreditCardNumber
    def get_ExpirationMonth(self): return self.ExpirationMonth
    def set_ExpirationMonth(self, ExpirationMonth): self.ExpirationMonth = ExpirationMonth
    def validate_ExpirationMonth(self, value):
        # Validate type ExpirationMonth, a restriction on INTTYPE.
        pass
    def get_ExpirationYear(self): return self.ExpirationYear
    def set_ExpirationYear(self, ExpirationYear): self.ExpirationYear = ExpirationYear
    def get_NameOnCard(self): return self.NameOnCard
    def set_NameOnCard(self, NameOnCard): self.NameOnCard = NameOnCard
    def get_CreditCardAddress(self): return self.CreditCardAddress
    def set_CreditCardAddress(self, CreditCardAddress): self.CreditCardAddress = CreditCardAddress
    def get_CreditCardPostalCode(self): return self.CreditCardPostalCode
    def set_CreditCardPostalCode(self, CreditCardPostalCode): self.CreditCardPostalCode = CreditCardPostalCode
    def get_CommercialCardCode(self): return self.CommercialCardCode
    def set_CommercialCardCode(self, CommercialCardCode): self.CommercialCardCode = CommercialCardCode
    def get_TransactionMode(self): return self.TransactionMode
    def set_TransactionMode(self, TransactionMode): self.TransactionMode = TransactionMode
    def validate_TransactionMode(self, value):
        # Validate type TransactionMode, a restriction on ENUMTYPE.
        pass
    def get_CreditCardTxnType(self): return self.CreditCardTxnType
    def set_CreditCardTxnType(self, CreditCardTxnType): self.CreditCardTxnType = CreditCardTxnType
    def validate_CreditCardTxnType(self, value):
        # Validate type CreditCardTxnType, a restriction on ENUMTYPE.
        pass
    def export(self, outfile, level, namespace_='', name_='CreditCardTxnInputInfo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTxnInputInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardTxnInputInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardTxnInputInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreditCardNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardNumber>%s</%sCreditCardNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardNumber).encode(ExternalEncoding), input_name='CreditCardNumber'), namespace_, eol_))
        if self.ExpirationMonth is not None:
            self.ExpirationMonth.export(outfile, level, namespace_, name_='ExpirationMonth', pretty_print=pretty_print)
        if self.ExpirationYear is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExpirationYear>%s</%sExpirationYear>%s' % (namespace_, self.gds_format_integer(self.ExpirationYear, input_name='ExpirationYear'), namespace_, eol_))
        if self.NameOnCard is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNameOnCard>%s</%sNameOnCard>%s' % (namespace_, self.gds_format_string(quote_xml(self.NameOnCard).encode(ExternalEncoding), input_name='NameOnCard'), namespace_, eol_))
        if self.CreditCardAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardAddress>%s</%sCreditCardAddress>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardAddress).encode(ExternalEncoding), input_name='CreditCardAddress'), namespace_, eol_))
        if self.CreditCardPostalCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardPostalCode>%s</%sCreditCardPostalCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardPostalCode).encode(ExternalEncoding), input_name='CreditCardPostalCode'), namespace_, eol_))
        if self.CommercialCardCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCommercialCardCode>%s</%sCommercialCardCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.CommercialCardCode).encode(ExternalEncoding), input_name='CommercialCardCode'), namespace_, eol_))
        if self.TransactionMode is not None:
            self.TransactionMode.export(outfile, level, namespace_, name_='TransactionMode', pretty_print=pretty_print)
        if self.CreditCardTxnType is not None:
            self.CreditCardTxnType.export(outfile, level, namespace_, name_='CreditCardTxnType', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CreditCardNumber is not None or
            self.ExpirationMonth is not None or
            self.ExpirationYear is not None or
            self.NameOnCard is not None or
            self.CreditCardAddress is not None or
            self.CreditCardPostalCode is not None or
            self.CommercialCardCode is not None or
            self.TransactionMode is not None or
            self.CreditCardTxnType is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTxnInputInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CreditCardNumber is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardNumber=%s,\n' % quote_python(self.CreditCardNumber).encode(ExternalEncoding))
        if self.ExpirationMonth is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationMonth=model_.ExpirationMonth(\n')
            self.ExpirationMonth.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpirationYear is not None:
            showIndent(outfile, level)
            outfile.write('ExpirationYear=%d,\n' % self.ExpirationYear)
        if self.NameOnCard is not None:
            showIndent(outfile, level)
            outfile.write('NameOnCard=%s,\n' % quote_python(self.NameOnCard).encode(ExternalEncoding))
        if self.CreditCardAddress is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardAddress=%s,\n' % quote_python(self.CreditCardAddress).encode(ExternalEncoding))
        if self.CreditCardPostalCode is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardPostalCode=%s,\n' % quote_python(self.CreditCardPostalCode).encode(ExternalEncoding))
        if self.CommercialCardCode is not None:
            showIndent(outfile, level)
            outfile.write('CommercialCardCode=%s,\n' % quote_python(self.CommercialCardCode).encode(ExternalEncoding))
        if self.TransactionMode is not None:
            showIndent(outfile, level)
            outfile.write('TransactionMode=model_.TransactionMode(\n')
            self.TransactionMode.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardTxnType is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnType=model_.CreditCardTxnType(\n')
            self.CreditCardTxnType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CreditCardNumber':
            CreditCardNumber_ = child_.text
            CreditCardNumber_ = self.gds_validate_string(CreditCardNumber_, node, 'CreditCardNumber')
            self.CreditCardNumber = CreditCardNumber_
        elif nodeName_ == 'ExpirationMonth':
            obj_ = None
            self.set_ExpirationMonth(obj_)
            self.validate_ExpirationMonth(self.ExpirationMonth)    # validate type ExpirationMonth
        elif nodeName_ == 'ExpirationYear':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ExpirationYear')
            self.ExpirationYear = ival_
        elif nodeName_ == 'NameOnCard':
            NameOnCard_ = child_.text
            NameOnCard_ = self.gds_validate_string(NameOnCard_, node, 'NameOnCard')
            self.NameOnCard = NameOnCard_
        elif nodeName_ == 'CreditCardAddress':
            CreditCardAddress_ = child_.text
            CreditCardAddress_ = self.gds_validate_string(CreditCardAddress_, node, 'CreditCardAddress')
            self.CreditCardAddress = CreditCardAddress_
        elif nodeName_ == 'CreditCardPostalCode':
            CreditCardPostalCode_ = child_.text
            CreditCardPostalCode_ = self.gds_validate_string(CreditCardPostalCode_, node, 'CreditCardPostalCode')
            self.CreditCardPostalCode = CreditCardPostalCode_
        elif nodeName_ == 'CommercialCardCode':
            CommercialCardCode_ = child_.text
            CommercialCardCode_ = self.gds_validate_string(CommercialCardCode_, node, 'CommercialCardCode')
            self.CommercialCardCode = CommercialCardCode_
        elif nodeName_ == 'TransactionMode':
            obj_ = None
            self.set_TransactionMode(obj_)
            self.validate_TransactionMode(self.TransactionMode)    # validate type TransactionMode
        elif nodeName_ == 'CreditCardTxnType':
            obj_ = None
            self.set_CreditCardTxnType(obj_)
            self.validate_CreditCardTxnType(self.CreditCardTxnType)    # validate type CreditCardTxnType
# end class CreditCardTxnInputInfo


class CommercialCardCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CommercialCardCode.subclass:
            return CommercialCardCode.subclass(*args_, **kwargs_)
        else:
            return CommercialCardCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CommercialCardCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CommercialCardCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CommercialCardCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CommercialCardCode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CommercialCardCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CommercialCardCode


class CreditCardTxnResultInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ResultCode=None, ResultMessage=None, CreditCardTransID=None, MerchantAccountNumber=None, AuthorizationCode=None, AVSStreet=None, AVSZip=None, CardSecurityCodeMatch=None, ReconBatchID=None, PaymentGroupingCode=None, PaymentStatus=None, TxnAuthorizationTime=None, TxnAuthorizationStamp=None, ClientTransID=None):
        self.ResultCode = ResultCode
        self.ResultMessage = ResultMessage
        self.CreditCardTransID = CreditCardTransID
        self.MerchantAccountNumber = MerchantAccountNumber
        self.AuthorizationCode = AuthorizationCode
        self.AVSStreet = AVSStreet
        self.AVSZip = AVSZip
        self.CardSecurityCodeMatch = CardSecurityCodeMatch
        self.ReconBatchID = ReconBatchID
        self.PaymentGroupingCode = PaymentGroupingCode
        self.PaymentStatus = PaymentStatus
        self.TxnAuthorizationTime = TxnAuthorizationTime
        self.TxnAuthorizationStamp = TxnAuthorizationStamp
        self.ClientTransID = ClientTransID
    def factory(*args_, **kwargs_):
        if CreditCardTxnResultInfo.subclass:
            return CreditCardTxnResultInfo.subclass(*args_, **kwargs_)
        else:
            return CreditCardTxnResultInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ResultCode(self): return self.ResultCode
    def set_ResultCode(self, ResultCode): self.ResultCode = ResultCode
    def get_ResultMessage(self): return self.ResultMessage
    def set_ResultMessage(self, ResultMessage): self.ResultMessage = ResultMessage
    def get_CreditCardTransID(self): return self.CreditCardTransID
    def set_CreditCardTransID(self, CreditCardTransID): self.CreditCardTransID = CreditCardTransID
    def get_MerchantAccountNumber(self): return self.MerchantAccountNumber
    def set_MerchantAccountNumber(self, MerchantAccountNumber): self.MerchantAccountNumber = MerchantAccountNumber
    def get_AuthorizationCode(self): return self.AuthorizationCode
    def set_AuthorizationCode(self, AuthorizationCode): self.AuthorizationCode = AuthorizationCode
    def get_AVSStreet(self): return self.AVSStreet
    def set_AVSStreet(self, AVSStreet): self.AVSStreet = AVSStreet
    def validate_AVSStreet(self, value):
        # Validate type AVSStreet, a restriction on ENUMTYPE.
        pass
    def get_AVSZip(self): return self.AVSZip
    def set_AVSZip(self, AVSZip): self.AVSZip = AVSZip
    def validate_AVSZip(self, value):
        # Validate type AVSZip, a restriction on ENUMTYPE.
        pass
    def get_CardSecurityCodeMatch(self): return self.CardSecurityCodeMatch
    def set_CardSecurityCodeMatch(self, CardSecurityCodeMatch): self.CardSecurityCodeMatch = CardSecurityCodeMatch
    def validate_CardSecurityCodeMatch(self, value):
        # Validate type CardSecurityCodeMatch, a restriction on ENUMTYPE.
        pass
    def get_ReconBatchID(self): return self.ReconBatchID
    def set_ReconBatchID(self, ReconBatchID): self.ReconBatchID = ReconBatchID
    def get_PaymentGroupingCode(self): return self.PaymentGroupingCode
    def set_PaymentGroupingCode(self, PaymentGroupingCode): self.PaymentGroupingCode = PaymentGroupingCode
    def get_PaymentStatus(self): return self.PaymentStatus
    def set_PaymentStatus(self, PaymentStatus): self.PaymentStatus = PaymentStatus
    def validate_PaymentStatus(self, value):
        # Validate type PaymentStatus, a restriction on ENUMTYPE.
        pass
    def get_TxnAuthorizationTime(self): return self.TxnAuthorizationTime
    def set_TxnAuthorizationTime(self, TxnAuthorizationTime): self.TxnAuthorizationTime = TxnAuthorizationTime
    def get_TxnAuthorizationStamp(self): return self.TxnAuthorizationStamp
    def set_TxnAuthorizationStamp(self, TxnAuthorizationStamp): self.TxnAuthorizationStamp = TxnAuthorizationStamp
    def get_ClientTransID(self): return self.ClientTransID
    def set_ClientTransID(self, ClientTransID): self.ClientTransID = ClientTransID
    def export(self, outfile, level, namespace_='', name_='CreditCardTxnResultInfo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTxnResultInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardTxnResultInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardTxnResultInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ResultCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResultCode>%s</%sResultCode>%s' % (namespace_, self.gds_format_integer(self.ResultCode, input_name='ResultCode'), namespace_, eol_))
        if self.ResultMessage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResultMessage>%s</%sResultMessage>%s' % (namespace_, self.gds_format_string(quote_xml(self.ResultMessage).encode(ExternalEncoding), input_name='ResultMessage'), namespace_, eol_))
        if self.CreditCardTransID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditCardTransID>%s</%sCreditCardTransID>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditCardTransID).encode(ExternalEncoding), input_name='CreditCardTransID'), namespace_, eol_))
        if self.MerchantAccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMerchantAccountNumber>%s</%sMerchantAccountNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.MerchantAccountNumber).encode(ExternalEncoding), input_name='MerchantAccountNumber'), namespace_, eol_))
        if self.AuthorizationCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthorizationCode>%s</%sAuthorizationCode>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthorizationCode).encode(ExternalEncoding), input_name='AuthorizationCode'), namespace_, eol_))
        if self.AVSStreet is not None:
            self.AVSStreet.export(outfile, level, namespace_, name_='AVSStreet', pretty_print=pretty_print)
        if self.AVSZip is not None:
            self.AVSZip.export(outfile, level, namespace_, name_='AVSZip', pretty_print=pretty_print)
        if self.CardSecurityCodeMatch is not None:
            self.CardSecurityCodeMatch.export(outfile, level, namespace_, name_='CardSecurityCodeMatch', pretty_print=pretty_print)
        if self.ReconBatchID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReconBatchID>%s</%sReconBatchID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ReconBatchID).encode(ExternalEncoding), input_name='ReconBatchID'), namespace_, eol_))
        if self.PaymentGroupingCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentGroupingCode>%s</%sPaymentGroupingCode>%s' % (namespace_, self.gds_format_integer(self.PaymentGroupingCode, input_name='PaymentGroupingCode'), namespace_, eol_))
        if self.PaymentStatus is not None:
            self.PaymentStatus.export(outfile, level, namespace_, name_='PaymentStatus', pretty_print=pretty_print)
        if self.TxnAuthorizationTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnAuthorizationTime>%s</%sTxnAuthorizationTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnAuthorizationTime).encode(ExternalEncoding), input_name='TxnAuthorizationTime'), namespace_, eol_))
        if self.TxnAuthorizationStamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnAuthorizationStamp>%s</%sTxnAuthorizationStamp>%s' % (namespace_, self.gds_format_integer(self.TxnAuthorizationStamp, input_name='TxnAuthorizationStamp'), namespace_, eol_))
        if self.ClientTransID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientTransID>%s</%sClientTransID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClientTransID).encode(ExternalEncoding), input_name='ClientTransID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ResultCode is not None or
            self.ResultMessage is not None or
            self.CreditCardTransID is not None or
            self.MerchantAccountNumber is not None or
            self.AuthorizationCode is not None or
            self.AVSStreet is not None or
            self.AVSZip is not None or
            self.CardSecurityCodeMatch is not None or
            self.ReconBatchID is not None or
            self.PaymentGroupingCode is not None or
            self.PaymentStatus is not None or
            self.TxnAuthorizationTime is not None or
            self.TxnAuthorizationStamp is not None or
            self.ClientTransID is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTxnResultInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ResultCode is not None:
            showIndent(outfile, level)
            outfile.write('ResultCode=%d,\n' % self.ResultCode)
        if self.ResultMessage is not None:
            showIndent(outfile, level)
            outfile.write('ResultMessage=%s,\n' % quote_python(self.ResultMessage).encode(ExternalEncoding))
        if self.CreditCardTransID is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTransID=%s,\n' % quote_python(self.CreditCardTransID).encode(ExternalEncoding))
        if self.MerchantAccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('MerchantAccountNumber=%s,\n' % quote_python(self.MerchantAccountNumber).encode(ExternalEncoding))
        if self.AuthorizationCode is not None:
            showIndent(outfile, level)
            outfile.write('AuthorizationCode=%s,\n' % quote_python(self.AuthorizationCode).encode(ExternalEncoding))
        if self.AVSStreet is not None:
            showIndent(outfile, level)
            outfile.write('AVSStreet=model_.AVSStreet(\n')
            self.AVSStreet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AVSZip is not None:
            showIndent(outfile, level)
            outfile.write('AVSZip=model_.AVSZip(\n')
            self.AVSZip.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CardSecurityCodeMatch is not None:
            showIndent(outfile, level)
            outfile.write('CardSecurityCodeMatch=model_.CardSecurityCodeMatch(\n')
            self.CardSecurityCodeMatch.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReconBatchID is not None:
            showIndent(outfile, level)
            outfile.write('ReconBatchID=%s,\n' % quote_python(self.ReconBatchID).encode(ExternalEncoding))
        if self.PaymentGroupingCode is not None:
            showIndent(outfile, level)
            outfile.write('PaymentGroupingCode=%d,\n' % self.PaymentGroupingCode)
        if self.PaymentStatus is not None:
            showIndent(outfile, level)
            outfile.write('PaymentStatus=model_.PaymentStatus(\n')
            self.PaymentStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TxnAuthorizationTime is not None:
            showIndent(outfile, level)
            outfile.write('TxnAuthorizationTime=%s,\n' % quote_python(self.TxnAuthorizationTime).encode(ExternalEncoding))
        if self.TxnAuthorizationStamp is not None:
            showIndent(outfile, level)
            outfile.write('TxnAuthorizationStamp=%d,\n' % self.TxnAuthorizationStamp)
        if self.ClientTransID is not None:
            showIndent(outfile, level)
            outfile.write('ClientTransID=%s,\n' % quote_python(self.ClientTransID).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ResultCode':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'ResultCode')
            self.ResultCode = ival_
        elif nodeName_ == 'ResultMessage':
            ResultMessage_ = child_.text
            ResultMessage_ = self.gds_validate_string(ResultMessage_, node, 'ResultMessage')
            self.ResultMessage = ResultMessage_
        elif nodeName_ == 'CreditCardTransID':
            CreditCardTransID_ = child_.text
            CreditCardTransID_ = self.gds_validate_string(CreditCardTransID_, node, 'CreditCardTransID')
            self.CreditCardTransID = CreditCardTransID_
        elif nodeName_ == 'MerchantAccountNumber':
            MerchantAccountNumber_ = child_.text
            MerchantAccountNumber_ = self.gds_validate_string(MerchantAccountNumber_, node, 'MerchantAccountNumber')
            self.MerchantAccountNumber = MerchantAccountNumber_
        elif nodeName_ == 'AuthorizationCode':
            AuthorizationCode_ = child_.text
            AuthorizationCode_ = self.gds_validate_string(AuthorizationCode_, node, 'AuthorizationCode')
            self.AuthorizationCode = AuthorizationCode_
        elif nodeName_ == 'AVSStreet':
            obj_ = None
            self.set_AVSStreet(obj_)
            self.validate_AVSStreet(self.AVSStreet)    # validate type AVSStreet
        elif nodeName_ == 'AVSZip':
            obj_ = None
            self.set_AVSZip(obj_)
            self.validate_AVSZip(self.AVSZip)    # validate type AVSZip
        elif nodeName_ == 'CardSecurityCodeMatch':
            obj_ = None
            self.set_CardSecurityCodeMatch(obj_)
            self.validate_CardSecurityCodeMatch(self.CardSecurityCodeMatch)    # validate type CardSecurityCodeMatch
        elif nodeName_ == 'ReconBatchID':
            ReconBatchID_ = child_.text
            ReconBatchID_ = self.gds_validate_string(ReconBatchID_, node, 'ReconBatchID')
            self.ReconBatchID = ReconBatchID_
        elif nodeName_ == 'PaymentGroupingCode':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'PaymentGroupingCode')
            self.PaymentGroupingCode = ival_
        elif nodeName_ == 'PaymentStatus':
            obj_ = None
            self.set_PaymentStatus(obj_)
            self.validate_PaymentStatus(self.PaymentStatus)    # validate type PaymentStatus
        elif nodeName_ == 'TxnAuthorizationTime':
            TxnAuthorizationTime_ = child_.text
            TxnAuthorizationTime_ = re_.sub(String_cleanup_pat_, " ", TxnAuthorizationTime_).strip()
            TxnAuthorizationTime_ = self.gds_validate_string(TxnAuthorizationTime_, node, 'TxnAuthorizationTime')
            self.TxnAuthorizationTime = TxnAuthorizationTime_
        elif nodeName_ == 'TxnAuthorizationStamp':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TxnAuthorizationStamp')
            self.TxnAuthorizationStamp = ival_
        elif nodeName_ == 'ClientTransID':
            ClientTransID_ = child_.text
            ClientTransID_ = self.gds_validate_string(ClientTransID_, node, 'ClientTransID')
            self.ClientTransID = ClientTransID_
# end class CreditCardTxnResultInfo


class ResultMessage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ResultMessage.subclass:
            return ResultMessage.subclass(*args_, **kwargs_)
        else:
            return ResultMessage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ResultMessage', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResultMessage')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ResultMessage'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResultMessage', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResultMessage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ResultMessage


class CreditCardTransID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CreditCardTransID.subclass:
            return CreditCardTransID.subclass(*args_, **kwargs_)
        else:
            return CreditCardTransID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CreditCardTransID', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTransID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardTransID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardTransID', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTransID'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CreditCardTransID


class MerchantAccountNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MerchantAccountNumber.subclass:
            return MerchantAccountNumber.subclass(*args_, **kwargs_)
        else:
            return MerchantAccountNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='MerchantAccountNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MerchantAccountNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MerchantAccountNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MerchantAccountNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MerchantAccountNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MerchantAccountNumber


class AuthorizationCode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AuthorizationCode.subclass:
            return AuthorizationCode.subclass(*args_, **kwargs_)
        else:
            return AuthorizationCode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AuthorizationCode', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AuthorizationCode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AuthorizationCode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AuthorizationCode', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AuthorizationCode'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AuthorizationCode


class ReconBatchID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ReconBatchID.subclass:
            return ReconBatchID.subclass(*args_, **kwargs_)
        else:
            return ReconBatchID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ReconBatchID', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ReconBatchID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ReconBatchID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ReconBatchID', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ReconBatchID'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ReconBatchID


class ClientTransID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ClientTransID.subclass:
            return ClientTransID.subclass(*args_, **kwargs_)
        else:
            return ClientTransID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ClientTransID', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClientTransID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ClientTransID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ClientTransID', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClientTransID'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ClientTransID


class CreditCardTxnInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CreditCardTxnInputInfo=None, CreditCardTxnResultInfo=None):
        self.CreditCardTxnInputInfo = CreditCardTxnInputInfo
        self.CreditCardTxnResultInfo = CreditCardTxnResultInfo
    def factory(*args_, **kwargs_):
        if CreditCardTxnInfo.subclass:
            return CreditCardTxnInfo.subclass(*args_, **kwargs_)
        else:
            return CreditCardTxnInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CreditCardTxnInputInfo(self): return self.CreditCardTxnInputInfo
    def set_CreditCardTxnInputInfo(self, CreditCardTxnInputInfo): self.CreditCardTxnInputInfo = CreditCardTxnInputInfo
    def get_CreditCardTxnResultInfo(self): return self.CreditCardTxnResultInfo
    def set_CreditCardTxnResultInfo(self, CreditCardTxnResultInfo): self.CreditCardTxnResultInfo = CreditCardTxnResultInfo
    def export(self, outfile, level, namespace_='', name_='CreditCardTxnInfo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CreditCardTxnInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CreditCardTxnInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CreditCardTxnInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CreditCardTxnInputInfo is not None:
            self.CreditCardTxnInputInfo.export(outfile, level, namespace_, name_='CreditCardTxnInputInfo', pretty_print=pretty_print)
        if self.CreditCardTxnResultInfo is not None:
            self.CreditCardTxnResultInfo.export(outfile, level, namespace_, name_='CreditCardTxnResultInfo', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CreditCardTxnInputInfo is not None or
            self.CreditCardTxnResultInfo is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CreditCardTxnInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CreditCardTxnInputInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnInputInfo=model_.CreditCardTxnInputInfo(\n')
            self.CreditCardTxnInputInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardTxnResultInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnResultInfo=model_.CreditCardTxnResultInfo(\n')
            self.CreditCardTxnResultInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CreditCardTxnInputInfo':
            obj_ = CreditCardTxnInputInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnInputInfo(obj_)
        elif nodeName_ == 'CreditCardTxnResultInfo':
            obj_ = CreditCardTxnResultInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnResultInfo(obj_)
# end class CreditCardTxnInfo


class ErrorRecovery(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, OwnerID=None, TxnID=None, TxnNumber=None, EditSequence=None, ExternalGUID=None):
        self.ListID = ListID
        self.OwnerID = OwnerID
        self.TxnID = TxnID
        self.TxnNumber = TxnNumber
        self.EditSequence = EditSequence
        self.ExternalGUID = ExternalGUID
    def factory(*args_, **kwargs_):
        if ErrorRecovery.subclass:
            return ErrorRecovery.subclass(*args_, **kwargs_)
        else:
            return ErrorRecovery(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def get_TxnID(self): return self.TxnID
    def set_TxnID(self, TxnID): self.TxnID = TxnID
    def get_TxnNumber(self): return self.TxnNumber
    def set_TxnNumber(self, TxnNumber): self.TxnNumber = TxnNumber
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def export(self, outfile, level, namespace_='', name_='ErrorRecovery', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ErrorRecovery')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ErrorRecovery'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ErrorRecovery', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.OwnerID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(self.OwnerID).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
        if self.TxnID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnID>%s</%sTxnID>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnID).encode(ExternalEncoding), input_name='TxnID'), namespace_, eol_))
        if self.TxnNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnNumber>%s</%sTxnNumber>%s' % (namespace_, self.gds_format_integer(self.TxnNumber, input_name='TxnNumber'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.OwnerID is not None or
            self.TxnID is not None or
            self.TxnNumber is not None or
            self.EditSequence is not None or
            self.ExternalGUID is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ErrorRecovery'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.OwnerID is not None:
            showIndent(outfile, level)
            outfile.write('OwnerID=%s,\n' % quote_python(self.OwnerID).encode(ExternalEncoding))
        if self.TxnID is not None:
            showIndent(outfile, level)
            outfile.write('TxnID=%s,\n' % quote_python(self.TxnID).encode(ExternalEncoding))
        if self.TxnNumber is not None:
            showIndent(outfile, level)
            outfile.write('TxnNumber=%d,\n' % self.TxnNumber)
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID = OwnerID_
        elif nodeName_ == 'TxnID':
            TxnID_ = child_.text
            TxnID_ = self.gds_validate_string(TxnID_, node, 'TxnID')
            self.TxnID = TxnID_
        elif nodeName_ == 'TxnNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TxnNumber')
            self.TxnNumber = ival_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
# end class ErrorRecovery


class AccountMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if AccountMetaData.subclass:
            return AccountMetaData.subclass(*args_, **kwargs_)
        else:
            return AccountMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='AccountMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AccountMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class AccountMetaData


class BillingRateMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if BillingRateMetaData.subclass:
            return BillingRateMetaData.subclass(*args_, **kwargs_)
        else:
            return BillingRateMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='BillingRateMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='BillingRateMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='BillingRateMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='BillingRateMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='BillingRateMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class BillingRateMetaData


class ClassMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if ClassMetaData.subclass:
            return ClassMetaData.subclass(*args_, **kwargs_)
        else:
            return ClassMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='ClassMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ClassMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ClassMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ClassMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ClassMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class ClassMetaData


class CustomerMsgMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if CustomerMsgMetaData.subclass:
            return CustomerMsgMetaData.subclass(*args_, **kwargs_)
        else:
            return CustomerMsgMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='CustomerMsgMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerMsgMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerMsgMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerMsgMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerMsgMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class CustomerMsgMetaData


class CustomerTypeMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if CustomerTypeMetaData.subclass:
            return CustomerTypeMetaData.subclass(*args_, **kwargs_)
        else:
            return CustomerTypeMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='CustomerTypeMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerTypeMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerTypeMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerTypeMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerTypeMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class CustomerTypeMetaData


class EntityMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if EntityMetaData.subclass:
            return EntityMetaData.subclass(*args_, **kwargs_)
        else:
            return EntityMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='EntityMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EntityMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EntityMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EntityMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EntityMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class EntityMetaData


class ItemMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if ItemMetaData.subclass:
            return ItemMetaData.subclass(*args_, **kwargs_)
        else:
            return ItemMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='ItemMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class ItemMetaData


class JobTypeMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if JobTypeMetaData.subclass:
            return JobTypeMetaData.subclass(*args_, **kwargs_)
        else:
            return JobTypeMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='JobTypeMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JobTypeMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JobTypeMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JobTypeMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='JobTypeMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class JobTypeMetaData


class PaymentMethodMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if PaymentMethodMetaData.subclass:
            return PaymentMethodMetaData.subclass(*args_, **kwargs_)
        else:
            return PaymentMethodMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='PaymentMethodMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentMethodMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentMethodMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentMethodMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PaymentMethodMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class PaymentMethodMetaData


class PayrollItemMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if PayrollItemMetaData.subclass:
            return PayrollItemMetaData.subclass(*args_, **kwargs_)
        else:
            return PayrollItemMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='PayrollItemMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PayrollItemMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PayrollItemMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PayrollItemMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PayrollItemMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class PayrollItemMetaData


class PriceLevelMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if PriceLevelMetaData.subclass:
            return PriceLevelMetaData.subclass(*args_, **kwargs_)
        else:
            return PriceLevelMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='PriceLevelMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PriceLevelMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PriceLevelMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PriceLevelMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PriceLevelMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class PriceLevelMetaData


class SalesRepMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if SalesRepMetaData.subclass:
            return SalesRepMetaData.subclass(*args_, **kwargs_)
        else:
            return SalesRepMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='SalesRepMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesRepMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesRepMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesRepMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesRepMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class SalesRepMetaData


class SalesTaxCodeMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if SalesTaxCodeMetaData.subclass:
            return SalesTaxCodeMetaData.subclass(*args_, **kwargs_)
        else:
            return SalesTaxCodeMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='SalesTaxCodeMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxCodeMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxCodeMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxCodeMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxCodeMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class SalesTaxCodeMetaData


class ShipMethodMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if ShipMethodMetaData.subclass:
            return ShipMethodMetaData.subclass(*args_, **kwargs_)
        else:
            return ShipMethodMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='ShipMethodMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShipMethodMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShipMethodMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShipMethodMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShipMethodMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class ShipMethodMetaData


class TemplateMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if TemplateMetaData.subclass:
            return TemplateMetaData.subclass(*args_, **kwargs_)
        else:
            return TemplateMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='TemplateMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TemplateMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TemplateMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TemplateMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TemplateMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class TemplateMetaData


class TermsMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if TermsMetaData.subclass:
            return TermsMetaData.subclass(*args_, **kwargs_)
        else:
            return TermsMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='TermsMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TermsMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TermsMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TermsMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TermsMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class TermsMetaData


class ToDoMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if ToDoMetaData.subclass:
            return ToDoMetaData.subclass(*args_, **kwargs_)
        else:
            return ToDoMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='ToDoMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ToDoMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ToDoMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ToDoMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ToDoMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class ToDoMetaData


class VehicleMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if VehicleMetaData.subclass:
            return VehicleMetaData.subclass(*args_, **kwargs_)
        else:
            return VehicleMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='VehicleMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VehicleMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VehicleMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VehicleMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VehicleMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class VehicleMetaData


class VendorTypeMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MaxCapacity=None):
        self.MaxCapacity = MaxCapacity
    def factory(*args_, **kwargs_):
        if VendorTypeMetaData.subclass:
            return VendorTypeMetaData.subclass(*args_, **kwargs_)
        else:
            return VendorTypeMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MaxCapacity(self): return self.MaxCapacity
    def set_MaxCapacity(self, MaxCapacity): self.MaxCapacity = MaxCapacity
    def export(self, outfile, level, namespace_='', name_='VendorTypeMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VendorTypeMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VendorTypeMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VendorTypeMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MaxCapacity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMaxCapacity>%s</%sMaxCapacity>%s' % (namespace_, self.gds_format_integer(self.MaxCapacity, input_name='MaxCapacity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.MaxCapacity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VendorTypeMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.MaxCapacity is not None:
            showIndent(outfile, level)
            outfile.write('MaxCapacity=%d,\n' % self.MaxCapacity)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MaxCapacity':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'MaxCapacity')
            self.MaxCapacity = ival_
# end class VendorTypeMetaData


class ListMetaData(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountMetaData=None, BillingRateMetaData=None, ClassMetaData=None, CustomerMsgMetaData=None, CustomerTypeMetaData=None, EntityMetaData=None, ItemMetaData=None, JobTypeMetaData=None, PaymentMethodMetaData=None, PayrollItemMetaData=None, PriceLevelMetaData=None, SalesRepMetaData=None, SalesTaxCodeMetaData=None, ShipMethodMetaData=None, TemplateMetaData=None, TermsMetaData=None, ToDoMetaData=None, VehicleMetaData=None, VendorTypeMetaData=None):
        self.AccountMetaData = AccountMetaData
        self.BillingRateMetaData = BillingRateMetaData
        self.ClassMetaData = ClassMetaData
        self.CustomerMsgMetaData = CustomerMsgMetaData
        self.CustomerTypeMetaData = CustomerTypeMetaData
        self.EntityMetaData = EntityMetaData
        self.ItemMetaData = ItemMetaData
        self.JobTypeMetaData = JobTypeMetaData
        self.PaymentMethodMetaData = PaymentMethodMetaData
        self.PayrollItemMetaData = PayrollItemMetaData
        self.PriceLevelMetaData = PriceLevelMetaData
        self.SalesRepMetaData = SalesRepMetaData
        self.SalesTaxCodeMetaData = SalesTaxCodeMetaData
        self.ShipMethodMetaData = ShipMethodMetaData
        self.TemplateMetaData = TemplateMetaData
        self.TermsMetaData = TermsMetaData
        self.ToDoMetaData = ToDoMetaData
        self.VehicleMetaData = VehicleMetaData
        self.VendorTypeMetaData = VendorTypeMetaData
    def factory(*args_, **kwargs_):
        if ListMetaData.subclass:
            return ListMetaData.subclass(*args_, **kwargs_)
        else:
            return ListMetaData(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountMetaData(self): return self.AccountMetaData
    def set_AccountMetaData(self, AccountMetaData): self.AccountMetaData = AccountMetaData
    def get_BillingRateMetaData(self): return self.BillingRateMetaData
    def set_BillingRateMetaData(self, BillingRateMetaData): self.BillingRateMetaData = BillingRateMetaData
    def get_ClassMetaData(self): return self.ClassMetaData
    def set_ClassMetaData(self, ClassMetaData): self.ClassMetaData = ClassMetaData
    def get_CustomerMsgMetaData(self): return self.CustomerMsgMetaData
    def set_CustomerMsgMetaData(self, CustomerMsgMetaData): self.CustomerMsgMetaData = CustomerMsgMetaData
    def get_CustomerTypeMetaData(self): return self.CustomerTypeMetaData
    def set_CustomerTypeMetaData(self, CustomerTypeMetaData): self.CustomerTypeMetaData = CustomerTypeMetaData
    def get_EntityMetaData(self): return self.EntityMetaData
    def set_EntityMetaData(self, EntityMetaData): self.EntityMetaData = EntityMetaData
    def get_ItemMetaData(self): return self.ItemMetaData
    def set_ItemMetaData(self, ItemMetaData): self.ItemMetaData = ItemMetaData
    def get_JobTypeMetaData(self): return self.JobTypeMetaData
    def set_JobTypeMetaData(self, JobTypeMetaData): self.JobTypeMetaData = JobTypeMetaData
    def get_PaymentMethodMetaData(self): return self.PaymentMethodMetaData
    def set_PaymentMethodMetaData(self, PaymentMethodMetaData): self.PaymentMethodMetaData = PaymentMethodMetaData
    def get_PayrollItemMetaData(self): return self.PayrollItemMetaData
    def set_PayrollItemMetaData(self, PayrollItemMetaData): self.PayrollItemMetaData = PayrollItemMetaData
    def get_PriceLevelMetaData(self): return self.PriceLevelMetaData
    def set_PriceLevelMetaData(self, PriceLevelMetaData): self.PriceLevelMetaData = PriceLevelMetaData
    def get_SalesRepMetaData(self): return self.SalesRepMetaData
    def set_SalesRepMetaData(self, SalesRepMetaData): self.SalesRepMetaData = SalesRepMetaData
    def get_SalesTaxCodeMetaData(self): return self.SalesTaxCodeMetaData
    def set_SalesTaxCodeMetaData(self, SalesTaxCodeMetaData): self.SalesTaxCodeMetaData = SalesTaxCodeMetaData
    def get_ShipMethodMetaData(self): return self.ShipMethodMetaData
    def set_ShipMethodMetaData(self, ShipMethodMetaData): self.ShipMethodMetaData = ShipMethodMetaData
    def get_TemplateMetaData(self): return self.TemplateMetaData
    def set_TemplateMetaData(self, TemplateMetaData): self.TemplateMetaData = TemplateMetaData
    def get_TermsMetaData(self): return self.TermsMetaData
    def set_TermsMetaData(self, TermsMetaData): self.TermsMetaData = TermsMetaData
    def get_ToDoMetaData(self): return self.ToDoMetaData
    def set_ToDoMetaData(self, ToDoMetaData): self.ToDoMetaData = ToDoMetaData
    def get_VehicleMetaData(self): return self.VehicleMetaData
    def set_VehicleMetaData(self, VehicleMetaData): self.VehicleMetaData = VehicleMetaData
    def get_VendorTypeMetaData(self): return self.VendorTypeMetaData
    def set_VendorTypeMetaData(self, VendorTypeMetaData): self.VendorTypeMetaData = VendorTypeMetaData
    def export(self, outfile, level, namespace_='', name_='ListMetaData', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ListMetaData')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ListMetaData'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ListMetaData', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountMetaData is not None:
            self.AccountMetaData.export(outfile, level, namespace_, name_='AccountMetaData', pretty_print=pretty_print)
        if self.BillingRateMetaData is not None:
            self.BillingRateMetaData.export(outfile, level, namespace_, name_='BillingRateMetaData', pretty_print=pretty_print)
        if self.ClassMetaData is not None:
            self.ClassMetaData.export(outfile, level, namespace_, name_='ClassMetaData', pretty_print=pretty_print)
        if self.CustomerMsgMetaData is not None:
            self.CustomerMsgMetaData.export(outfile, level, namespace_, name_='CustomerMsgMetaData', pretty_print=pretty_print)
        if self.CustomerTypeMetaData is not None:
            self.CustomerTypeMetaData.export(outfile, level, namespace_, name_='CustomerTypeMetaData', pretty_print=pretty_print)
        if self.EntityMetaData is not None:
            self.EntityMetaData.export(outfile, level, namespace_, name_='EntityMetaData', pretty_print=pretty_print)
        if self.ItemMetaData is not None:
            self.ItemMetaData.export(outfile, level, namespace_, name_='ItemMetaData', pretty_print=pretty_print)
        if self.JobTypeMetaData is not None:
            self.JobTypeMetaData.export(outfile, level, namespace_, name_='JobTypeMetaData', pretty_print=pretty_print)
        if self.PaymentMethodMetaData is not None:
            self.PaymentMethodMetaData.export(outfile, level, namespace_, name_='PaymentMethodMetaData', pretty_print=pretty_print)
        if self.PayrollItemMetaData is not None:
            self.PayrollItemMetaData.export(outfile, level, namespace_, name_='PayrollItemMetaData', pretty_print=pretty_print)
        if self.PriceLevelMetaData is not None:
            self.PriceLevelMetaData.export(outfile, level, namespace_, name_='PriceLevelMetaData', pretty_print=pretty_print)
        if self.SalesRepMetaData is not None:
            self.SalesRepMetaData.export(outfile, level, namespace_, name_='SalesRepMetaData', pretty_print=pretty_print)
        if self.SalesTaxCodeMetaData is not None:
            self.SalesTaxCodeMetaData.export(outfile, level, namespace_, name_='SalesTaxCodeMetaData', pretty_print=pretty_print)
        if self.ShipMethodMetaData is not None:
            self.ShipMethodMetaData.export(outfile, level, namespace_, name_='ShipMethodMetaData', pretty_print=pretty_print)
        if self.TemplateMetaData is not None:
            self.TemplateMetaData.export(outfile, level, namespace_, name_='TemplateMetaData', pretty_print=pretty_print)
        if self.TermsMetaData is not None:
            self.TermsMetaData.export(outfile, level, namespace_, name_='TermsMetaData', pretty_print=pretty_print)
        if self.ToDoMetaData is not None:
            self.ToDoMetaData.export(outfile, level, namespace_, name_='ToDoMetaData', pretty_print=pretty_print)
        if self.VehicleMetaData is not None:
            self.VehicleMetaData.export(outfile, level, namespace_, name_='VehicleMetaData', pretty_print=pretty_print)
        if self.VendorTypeMetaData is not None:
            self.VendorTypeMetaData.export(outfile, level, namespace_, name_='VendorTypeMetaData', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.AccountMetaData is not None or
            self.BillingRateMetaData is not None or
            self.ClassMetaData is not None or
            self.CustomerMsgMetaData is not None or
            self.CustomerTypeMetaData is not None or
            self.EntityMetaData is not None or
            self.ItemMetaData is not None or
            self.JobTypeMetaData is not None or
            self.PaymentMethodMetaData is not None or
            self.PayrollItemMetaData is not None or
            self.PriceLevelMetaData is not None or
            self.SalesRepMetaData is not None or
            self.SalesTaxCodeMetaData is not None or
            self.ShipMethodMetaData is not None or
            self.TemplateMetaData is not None or
            self.TermsMetaData is not None or
            self.ToDoMetaData is not None or
            self.VehicleMetaData is not None or
            self.VendorTypeMetaData is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ListMetaData'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountMetaData is not None:
            showIndent(outfile, level)
            outfile.write('AccountMetaData=model_.AccountMetaData(\n')
            self.AccountMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BillingRateMetaData is not None:
            showIndent(outfile, level)
            outfile.write('BillingRateMetaData=model_.BillingRateMetaData(\n')
            self.BillingRateMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassMetaData is not None:
            showIndent(outfile, level)
            outfile.write('ClassMetaData=model_.ClassMetaData(\n')
            self.ClassMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CustomerMsgMetaData is not None:
            showIndent(outfile, level)
            outfile.write('CustomerMsgMetaData=model_.CustomerMsgMetaData(\n')
            self.CustomerMsgMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CustomerTypeMetaData is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTypeMetaData=model_.CustomerTypeMetaData(\n')
            self.CustomerTypeMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EntityMetaData is not None:
            showIndent(outfile, level)
            outfile.write('EntityMetaData=model_.EntityMetaData(\n')
            self.EntityMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemMetaData is not None:
            showIndent(outfile, level)
            outfile.write('ItemMetaData=model_.ItemMetaData(\n')
            self.ItemMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobTypeMetaData is not None:
            showIndent(outfile, level)
            outfile.write('JobTypeMetaData=model_.JobTypeMetaData(\n')
            self.JobTypeMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PaymentMethodMetaData is not None:
            showIndent(outfile, level)
            outfile.write('PaymentMethodMetaData=model_.PaymentMethodMetaData(\n')
            self.PaymentMethodMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PayrollItemMetaData is not None:
            showIndent(outfile, level)
            outfile.write('PayrollItemMetaData=model_.PayrollItemMetaData(\n')
            self.PayrollItemMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PriceLevelMetaData is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelMetaData=model_.PriceLevelMetaData(\n')
            self.PriceLevelMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesRepMetaData is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepMetaData=model_.SalesRepMetaData(\n')
            self.SalesRepMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxCodeMetaData is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeMetaData=model_.SalesTaxCodeMetaData(\n')
            self.SalesTaxCodeMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipMethodMetaData is not None:
            showIndent(outfile, level)
            outfile.write('ShipMethodMetaData=model_.ShipMethodMetaData(\n')
            self.ShipMethodMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TemplateMetaData is not None:
            showIndent(outfile, level)
            outfile.write('TemplateMetaData=model_.TemplateMetaData(\n')
            self.TemplateMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TermsMetaData is not None:
            showIndent(outfile, level)
            outfile.write('TermsMetaData=model_.TermsMetaData(\n')
            self.TermsMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ToDoMetaData is not None:
            showIndent(outfile, level)
            outfile.write('ToDoMetaData=model_.ToDoMetaData(\n')
            self.ToDoMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.VehicleMetaData is not None:
            showIndent(outfile, level)
            outfile.write('VehicleMetaData=model_.VehicleMetaData(\n')
            self.VehicleMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.VendorTypeMetaData is not None:
            showIndent(outfile, level)
            outfile.write('VendorTypeMetaData=model_.VendorTypeMetaData(\n')
            self.VendorTypeMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountMetaData':
            obj_ = AccountMetaData.factory()
            obj_.build(child_)
            self.set_AccountMetaData(obj_)
        elif nodeName_ == 'BillingRateMetaData':
            obj_ = BillingRateMetaData.factory()
            obj_.build(child_)
            self.set_BillingRateMetaData(obj_)
        elif nodeName_ == 'ClassMetaData':
            obj_ = ClassMetaData.factory()
            obj_.build(child_)
            self.set_ClassMetaData(obj_)
        elif nodeName_ == 'CustomerMsgMetaData':
            obj_ = CustomerMsgMetaData.factory()
            obj_.build(child_)
            self.set_CustomerMsgMetaData(obj_)
        elif nodeName_ == 'CustomerTypeMetaData':
            obj_ = CustomerTypeMetaData.factory()
            obj_.build(child_)
            self.set_CustomerTypeMetaData(obj_)
        elif nodeName_ == 'EntityMetaData':
            obj_ = EntityMetaData.factory()
            obj_.build(child_)
            self.set_EntityMetaData(obj_)
        elif nodeName_ == 'ItemMetaData':
            obj_ = ItemMetaData.factory()
            obj_.build(child_)
            self.set_ItemMetaData(obj_)
        elif nodeName_ == 'JobTypeMetaData':
            obj_ = JobTypeMetaData.factory()
            obj_.build(child_)
            self.set_JobTypeMetaData(obj_)
        elif nodeName_ == 'PaymentMethodMetaData':
            obj_ = PaymentMethodMetaData.factory()
            obj_.build(child_)
            self.set_PaymentMethodMetaData(obj_)
        elif nodeName_ == 'PayrollItemMetaData':
            obj_ = PayrollItemMetaData.factory()
            obj_.build(child_)
            self.set_PayrollItemMetaData(obj_)
        elif nodeName_ == 'PriceLevelMetaData':
            obj_ = PriceLevelMetaData.factory()
            obj_.build(child_)
            self.set_PriceLevelMetaData(obj_)
        elif nodeName_ == 'SalesRepMetaData':
            obj_ = SalesRepMetaData.factory()
            obj_.build(child_)
            self.set_SalesRepMetaData(obj_)
        elif nodeName_ == 'SalesTaxCodeMetaData':
            obj_ = SalesTaxCodeMetaData.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeMetaData(obj_)
        elif nodeName_ == 'ShipMethodMetaData':
            obj_ = ShipMethodMetaData.factory()
            obj_.build(child_)
            self.set_ShipMethodMetaData(obj_)
        elif nodeName_ == 'TemplateMetaData':
            obj_ = TemplateMetaData.factory()
            obj_.build(child_)
            self.set_TemplateMetaData(obj_)
        elif nodeName_ == 'TermsMetaData':
            obj_ = TermsMetaData.factory()
            obj_.build(child_)
            self.set_TermsMetaData(obj_)
        elif nodeName_ == 'ToDoMetaData':
            obj_ = ToDoMetaData.factory()
            obj_.build(child_)
            self.set_ToDoMetaData(obj_)
        elif nodeName_ == 'VehicleMetaData':
            obj_ = VehicleMetaData.factory()
            obj_.build(child_)
            self.set_VehicleMetaData(obj_)
        elif nodeName_ == 'VendorTypeMetaData':
            obj_ = VendorTypeMetaData.factory()
            obj_.build(child_)
            self.set_VendorTypeMetaData(obj_)
# end class ListMetaData


class HostRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ProductName=None, MajorVersion=None, MinorVersion=None, Country=None, SupportedQBXMLVersion=None, IsAutomaticLogin=None, QBFileMode=None, ListMetaData=None):
        self.ProductName = ProductName
        self.MajorVersion = MajorVersion
        self.MinorVersion = MinorVersion
        self.Country = Country
        if SupportedQBXMLVersion is None:
            self.SupportedQBXMLVersion = []
        else:
            self.SupportedQBXMLVersion = SupportedQBXMLVersion
        self.IsAutomaticLogin = IsAutomaticLogin
        self.QBFileMode = QBFileMode
        self.ListMetaData = ListMetaData
    def factory(*args_, **kwargs_):
        if HostRet.subclass:
            return HostRet.subclass(*args_, **kwargs_)
        else:
            return HostRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ProductName(self): return self.ProductName
    def set_ProductName(self, ProductName): self.ProductName = ProductName
    def get_MajorVersion(self): return self.MajorVersion
    def set_MajorVersion(self, MajorVersion): self.MajorVersion = MajorVersion
    def get_MinorVersion(self): return self.MinorVersion
    def set_MinorVersion(self, MinorVersion): self.MinorVersion = MinorVersion
    def get_Country(self): return self.Country
    def set_Country(self, Country): self.Country = Country
    def get_SupportedQBXMLVersion(self): return self.SupportedQBXMLVersion
    def set_SupportedQBXMLVersion(self, SupportedQBXMLVersion): self.SupportedQBXMLVersion = SupportedQBXMLVersion
    def add_SupportedQBXMLVersion(self, value): self.SupportedQBXMLVersion.append(value)
    def insert_SupportedQBXMLVersion(self, index, value): self.SupportedQBXMLVersion[index] = value
    def get_IsAutomaticLogin(self): return self.IsAutomaticLogin
    def set_IsAutomaticLogin(self, IsAutomaticLogin): self.IsAutomaticLogin = IsAutomaticLogin
    def get_QBFileMode(self): return self.QBFileMode
    def set_QBFileMode(self, QBFileMode): self.QBFileMode = QBFileMode
    def validate_QBFileMode(self, value):
        # Validate type QBFileMode, a restriction on ENUMTYPE.
        pass
    def get_ListMetaData(self): return self.ListMetaData
    def set_ListMetaData(self, ListMetaData): self.ListMetaData = ListMetaData
    def export(self, outfile, level, namespace_='', name_='HostRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='HostRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='HostRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='HostRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ProductName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProductName>%s</%sProductName>%s' % (namespace_, self.gds_format_string(quote_xml(self.ProductName).encode(ExternalEncoding), input_name='ProductName'), namespace_, eol_))
        if self.MajorVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMajorVersion>%s</%sMajorVersion>%s' % (namespace_, self.gds_format_string(quote_xml(self.MajorVersion).encode(ExternalEncoding), input_name='MajorVersion'), namespace_, eol_))
        if self.MinorVersion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMinorVersion>%s</%sMinorVersion>%s' % (namespace_, self.gds_format_string(quote_xml(self.MinorVersion).encode(ExternalEncoding), input_name='MinorVersion'), namespace_, eol_))
        if self.Country is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountry>%s</%sCountry>%s' % (namespace_, self.gds_format_string(quote_xml(self.Country).encode(ExternalEncoding), input_name='Country'), namespace_, eol_))
        for SupportedQBXMLVersion_ in self.SupportedQBXMLVersion:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSupportedQBXMLVersion>%s</%sSupportedQBXMLVersion>%s' % (namespace_, self.gds_format_string(quote_xml(SupportedQBXMLVersion_).encode(ExternalEncoding), input_name='SupportedQBXMLVersion'), namespace_, eol_))
        if self.IsAutomaticLogin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsAutomaticLogin>%s</%sIsAutomaticLogin>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsAutomaticLogin).encode(ExternalEncoding), input_name='IsAutomaticLogin'), namespace_, eol_))
        if self.QBFileMode is not None:
            self.QBFileMode.export(outfile, level, namespace_, name_='QBFileMode', pretty_print=pretty_print)
        if self.ListMetaData is not None:
            self.ListMetaData.export(outfile, level, namespace_, name_='ListMetaData', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ProductName is not None or
            self.MajorVersion is not None or
            self.MinorVersion is not None or
            self.Country is not None or
            self.SupportedQBXMLVersion or
            self.IsAutomaticLogin is not None or
            self.QBFileMode is not None or
            self.ListMetaData is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='HostRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ProductName is not None:
            showIndent(outfile, level)
            outfile.write('ProductName=%s,\n' % quote_python(self.ProductName).encode(ExternalEncoding))
        if self.MajorVersion is not None:
            showIndent(outfile, level)
            outfile.write('MajorVersion=%s,\n' % quote_python(self.MajorVersion).encode(ExternalEncoding))
        if self.MinorVersion is not None:
            showIndent(outfile, level)
            outfile.write('MinorVersion=%s,\n' % quote_python(self.MinorVersion).encode(ExternalEncoding))
        if self.Country is not None:
            showIndent(outfile, level)
            outfile.write('Country=%s,\n' % quote_python(self.Country).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SupportedQBXMLVersion=[\n')
        level += 1
        for SupportedQBXMLVersion_ in self.SupportedQBXMLVersion:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(SupportedQBXMLVersion_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.IsAutomaticLogin is not None:
            showIndent(outfile, level)
            outfile.write('IsAutomaticLogin=%s,\n' % quote_python(self.IsAutomaticLogin).encode(ExternalEncoding))
        if self.QBFileMode is not None:
            showIndent(outfile, level)
            outfile.write('QBFileMode=model_.QBFileMode(\n')
            self.QBFileMode.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ListMetaData is not None:
            showIndent(outfile, level)
            outfile.write('ListMetaData=model_.ListMetaData(\n')
            self.ListMetaData.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ProductName':
            ProductName_ = child_.text
            ProductName_ = self.gds_validate_string(ProductName_, node, 'ProductName')
            self.ProductName = ProductName_
        elif nodeName_ == 'MajorVersion':
            MajorVersion_ = child_.text
            MajorVersion_ = self.gds_validate_string(MajorVersion_, node, 'MajorVersion')
            self.MajorVersion = MajorVersion_
        elif nodeName_ == 'MinorVersion':
            MinorVersion_ = child_.text
            MinorVersion_ = self.gds_validate_string(MinorVersion_, node, 'MinorVersion')
            self.MinorVersion = MinorVersion_
        elif nodeName_ == 'Country':
            Country_ = child_.text
            Country_ = self.gds_validate_string(Country_, node, 'Country')
            self.Country = Country_
        elif nodeName_ == 'SupportedQBXMLVersion':
            SupportedQBXMLVersion_ = child_.text
            SupportedQBXMLVersion_ = self.gds_validate_string(SupportedQBXMLVersion_, node, 'SupportedQBXMLVersion')
            self.SupportedQBXMLVersion.append(SupportedQBXMLVersion_)
        elif nodeName_ == 'IsAutomaticLogin':
            IsAutomaticLogin_ = child_.text
            IsAutomaticLogin_ = re_.sub(String_cleanup_pat_, " ", IsAutomaticLogin_).strip()
            IsAutomaticLogin_ = self.gds_validate_string(IsAutomaticLogin_, node, 'IsAutomaticLogin')
            self.IsAutomaticLogin = IsAutomaticLogin_
        elif nodeName_ == 'QBFileMode':
            obj_ = None
            self.set_QBFileMode(obj_)
            self.validate_QBFileMode(self.QBFileMode)    # validate type QBFileMode
        elif nodeName_ == 'ListMetaData':
            obj_ = ListMetaData.factory()
            obj_.build(child_)
            self.set_ListMetaData(obj_)
# end class HostRet


class ProductName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ProductName.subclass:
            return ProductName.subclass(*args_, **kwargs_)
        else:
            return ProductName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ProductName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ProductName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ProductName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ProductName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ProductName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ProductName


class MajorVersion(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MajorVersion.subclass:
            return MajorVersion.subclass(*args_, **kwargs_)
        else:
            return MajorVersion(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='MajorVersion', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MajorVersion')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MajorVersion'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MajorVersion', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MajorVersion'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MajorVersion


class MinorVersion(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if MinorVersion.subclass:
            return MinorVersion.subclass(*args_, **kwargs_)
        else:
            return MinorVersion(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='MinorVersion', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MinorVersion')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MinorVersion'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MinorVersion', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='MinorVersion'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MinorVersion


class SupportedQBXMLVersion(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if SupportedQBXMLVersion.subclass:
            return SupportedQBXMLVersion.subclass(*args_, **kwargs_)
        else:
            return SupportedQBXMLVersion(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SupportedQBXMLVersion', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SupportedQBXMLVersion')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SupportedQBXMLVersion'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SupportedQBXMLVersion', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SupportedQBXMLVersion'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SupportedQBXMLVersion


class Service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, Domain=None, ServiceStatus=None):
        self.Name = Name
        self.Domain = Domain
        self.ServiceStatus = ServiceStatus
    def factory(*args_, **kwargs_):
        if Service.subclass:
            return Service.subclass(*args_, **kwargs_)
        else:
            return Service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_Domain(self): return self.Domain
    def set_Domain(self, Domain): self.Domain = Domain
    def get_ServiceStatus(self): return self.ServiceStatus
    def set_ServiceStatus(self, ServiceStatus): self.ServiceStatus = ServiceStatus
    def validate_ServiceStatus(self, value):
        # Validate type ServiceStatus, a restriction on ENUMTYPE.
        pass
    def export(self, outfile, level, namespace_='', name_='Service', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Service')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Service'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Service', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.Domain is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDomain>%s</%sDomain>%s' % (namespace_, self.gds_format_string(quote_xml(self.Domain).encode(ExternalEncoding), input_name='Domain'), namespace_, eol_))
        if self.ServiceStatus is not None:
            self.ServiceStatus.export(outfile, level, namespace_, name_='ServiceStatus', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Name is not None or
            self.Domain is not None or
            self.ServiceStatus is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.Domain is not None:
            showIndent(outfile, level)
            outfile.write('Domain=%s,\n' % quote_python(self.Domain).encode(ExternalEncoding))
        if self.ServiceStatus is not None:
            showIndent(outfile, level)
            outfile.write('ServiceStatus=model_.ServiceStatus(\n')
            self.ServiceStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'Domain':
            Domain_ = child_.text
            Domain_ = self.gds_validate_string(Domain_, node, 'Domain')
            self.Domain = Domain_
        elif nodeName_ == 'ServiceStatus':
            obj_ = None
            self.set_ServiceStatus(obj_)
            self.validate_ServiceStatus(self.ServiceStatus)    # validate type ServiceStatus
# end class Service


class Domain(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Domain.subclass:
            return Domain.subclass(*args_, **kwargs_)
        else:
            return Domain(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Domain', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Domain')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Domain'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Domain', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Domain'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Domain


class SubscribedServices(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Service=None):
        if Service is None:
            self.Service = []
        else:
            self.Service = Service
    def factory(*args_, **kwargs_):
        if SubscribedServices.subclass:
            return SubscribedServices.subclass(*args_, **kwargs_)
        else:
            return SubscribedServices(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Service(self): return self.Service
    def set_Service(self, Service): self.Service = Service
    def add_Service(self, value): self.Service.append(value)
    def insert_Service(self, index, value): self.Service[index] = value
    def export(self, outfile, level, namespace_='', name_='SubscribedServices', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SubscribedServices')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SubscribedServices'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SubscribedServices', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Service_ in self.Service:
            Service_.export(outfile, level, namespace_, name_='Service', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Service
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SubscribedServices'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('Service=[\n')
        level += 1
        for Service_ in self.Service:
            showIndent(outfile, level)
            outfile.write('model_.Service(\n')
            Service_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Service':
            obj_ = Service.factory()
            obj_.build(child_)
            self.Service.append(obj_)
# end class SubscribedServices


class AccountantCopy(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AccountantCopyExists=None, DividingDate=None):
        self.AccountantCopyExists = AccountantCopyExists
        self.DividingDate = DividingDate
    def factory(*args_, **kwargs_):
        if AccountantCopy.subclass:
            return AccountantCopy.subclass(*args_, **kwargs_)
        else:
            return AccountantCopy(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AccountantCopyExists(self): return self.AccountantCopyExists
    def set_AccountantCopyExists(self, AccountantCopyExists): self.AccountantCopyExists = AccountantCopyExists
    def get_DividingDate(self): return self.DividingDate
    def set_DividingDate(self, DividingDate): self.DividingDate = DividingDate
    def export(self, outfile, level, namespace_='', name_='AccountantCopy', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountantCopy')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountantCopy'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountantCopy', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AccountantCopyExists is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountantCopyExists>%s</%sAccountantCopyExists>%s' % (namespace_, self.gds_format_string(quote_xml(self.AccountantCopyExists).encode(ExternalEncoding), input_name='AccountantCopyExists'), namespace_, eol_))
        if self.DividingDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDividingDate>%s</%sDividingDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.DividingDate).encode(ExternalEncoding), input_name='DividingDate'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.AccountantCopyExists is not None or
            self.DividingDate is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AccountantCopy'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.AccountantCopyExists is not None:
            showIndent(outfile, level)
            outfile.write('AccountantCopyExists=%s,\n' % quote_python(self.AccountantCopyExists).encode(ExternalEncoding))
        if self.DividingDate is not None:
            showIndent(outfile, level)
            outfile.write('DividingDate=%s,\n' % quote_python(self.DividingDate).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AccountantCopyExists':
            AccountantCopyExists_ = child_.text
            AccountantCopyExists_ = re_.sub(String_cleanup_pat_, " ", AccountantCopyExists_).strip()
            AccountantCopyExists_ = self.gds_validate_string(AccountantCopyExists_, node, 'AccountantCopyExists')
            self.AccountantCopyExists = AccountantCopyExists_
        elif nodeName_ == 'DividingDate':
            DividingDate_ = child_.text
            DividingDate_ = re_.sub(String_cleanup_pat_, " ", DividingDate_).strip()
            DividingDate_ = self.gds_validate_string(DividingDate_, node, 'DividingDate')
            self.DividingDate = DividingDate_
# end class AccountantCopy


class CompanyRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IsSampleCompany=None, CompanyName=None, LegalCompanyName=None, Address=None, AddressBlock=None, LegalAddress=None, CompanyAddressForCustomer=None, CompanyAddressBlockForCustomer=None, Phone=None, Fax=None, Email=None, CompanyEmailForCustomer=None, CompanyWebSite=None, FirstMonthFiscalYear=None, FirstMonthIncomeTaxYear=None, CompanyType=None, EIN=None, SSN=None, TaxForm=None, SubscribedServices=None, AccountantCopy=None, DataExtRet=None):
        self.IsSampleCompany = IsSampleCompany
        self.CompanyName = CompanyName
        self.LegalCompanyName = LegalCompanyName
        self.Address = Address
        self.AddressBlock = AddressBlock
        self.LegalAddress = LegalAddress
        self.CompanyAddressForCustomer = CompanyAddressForCustomer
        self.CompanyAddressBlockForCustomer = CompanyAddressBlockForCustomer
        self.Phone = Phone
        self.Fax = Fax
        self.Email = Email
        self.CompanyEmailForCustomer = CompanyEmailForCustomer
        self.CompanyWebSite = CompanyWebSite
        self.FirstMonthFiscalYear = FirstMonthFiscalYear
        self.FirstMonthIncomeTaxYear = FirstMonthIncomeTaxYear
        self.CompanyType = CompanyType
        self.EIN = EIN
        self.SSN = SSN
        self.TaxForm = TaxForm
        self.SubscribedServices = SubscribedServices
        self.AccountantCopy = AccountantCopy
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if CompanyRet.subclass:
            return CompanyRet.subclass(*args_, **kwargs_)
        else:
            return CompanyRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IsSampleCompany(self): return self.IsSampleCompany
    def set_IsSampleCompany(self, IsSampleCompany): self.IsSampleCompany = IsSampleCompany
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_LegalCompanyName(self): return self.LegalCompanyName
    def set_LegalCompanyName(self, LegalCompanyName): self.LegalCompanyName = LegalCompanyName
    def get_Address(self): return self.Address
    def set_Address(self, Address): self.Address = Address
    def get_AddressBlock(self): return self.AddressBlock
    def set_AddressBlock(self, AddressBlock): self.AddressBlock = AddressBlock
    def get_LegalAddress(self): return self.LegalAddress
    def set_LegalAddress(self, LegalAddress): self.LegalAddress = LegalAddress
    def get_CompanyAddressForCustomer(self): return self.CompanyAddressForCustomer
    def set_CompanyAddressForCustomer(self, CompanyAddressForCustomer): self.CompanyAddressForCustomer = CompanyAddressForCustomer
    def get_CompanyAddressBlockForCustomer(self): return self.CompanyAddressBlockForCustomer
    def set_CompanyAddressBlockForCustomer(self, CompanyAddressBlockForCustomer): self.CompanyAddressBlockForCustomer = CompanyAddressBlockForCustomer
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Fax(self): return self.Fax
    def set_Fax(self, Fax): self.Fax = Fax
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def get_CompanyEmailForCustomer(self): return self.CompanyEmailForCustomer
    def set_CompanyEmailForCustomer(self, CompanyEmailForCustomer): self.CompanyEmailForCustomer = CompanyEmailForCustomer
    def get_CompanyWebSite(self): return self.CompanyWebSite
    def set_CompanyWebSite(self, CompanyWebSite): self.CompanyWebSite = CompanyWebSite
    def get_FirstMonthFiscalYear(self): return self.FirstMonthFiscalYear
    def set_FirstMonthFiscalYear(self, FirstMonthFiscalYear): self.FirstMonthFiscalYear = FirstMonthFiscalYear
    def validate_FirstMonthFiscalYear(self, value):
        # Validate type FirstMonthFiscalYear, a restriction on ENUMTYPE.
        pass
    def get_FirstMonthIncomeTaxYear(self): return self.FirstMonthIncomeTaxYear
    def set_FirstMonthIncomeTaxYear(self, FirstMonthIncomeTaxYear): self.FirstMonthIncomeTaxYear = FirstMonthIncomeTaxYear
    def validate_FirstMonthIncomeTaxYear(self, value):
        # Validate type FirstMonthIncomeTaxYear, a restriction on ENUMTYPE.
        pass
    def get_CompanyType(self): return self.CompanyType
    def set_CompanyType(self, CompanyType): self.CompanyType = CompanyType
    def get_EIN(self): return self.EIN
    def set_EIN(self, EIN): self.EIN = EIN
    def get_SSN(self): return self.SSN
    def set_SSN(self, SSN): self.SSN = SSN
    def get_TaxForm(self): return self.TaxForm
    def set_TaxForm(self, TaxForm): self.TaxForm = TaxForm
    def validate_TaxForm(self, value):
        # Validate type TaxForm, a restriction on ENUMTYPE.
        pass
    def get_SubscribedServices(self): return self.SubscribedServices
    def set_SubscribedServices(self, SubscribedServices): self.SubscribedServices = SubscribedServices
    def get_AccountantCopy(self): return self.AccountantCopy
    def set_AccountantCopy(self, AccountantCopy): self.AccountantCopy = AccountantCopy
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='CompanyRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IsSampleCompany is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsSampleCompany>%s</%sIsSampleCompany>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsSampleCompany).encode(ExternalEncoding), input_name='IsSampleCompany'), namespace_, eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_, eol_))
        if self.LegalCompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLegalCompanyName>%s</%sLegalCompanyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LegalCompanyName).encode(ExternalEncoding), input_name='LegalCompanyName'), namespace_, eol_))
        if self.Address is not None:
            self.Address.export(outfile, level, namespace_, name_='Address', pretty_print=pretty_print)
        if self.AddressBlock is not None:
            self.AddressBlock.export(outfile, level, namespace_, name_='AddressBlock', pretty_print=pretty_print)
        if self.LegalAddress is not None:
            self.LegalAddress.export(outfile, level, namespace_, name_='LegalAddress', pretty_print=pretty_print)
        if self.CompanyAddressForCustomer is not None:
            self.CompanyAddressForCustomer.export(outfile, level, namespace_, name_='CompanyAddressForCustomer', pretty_print=pretty_print)
        if self.CompanyAddressBlockForCustomer is not None:
            self.CompanyAddressBlockForCustomer.export(outfile, level, namespace_, name_='CompanyAddressBlockForCustomer', pretty_print=pretty_print)
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.Phone).encode(ExternalEncoding), input_name='Phone'), namespace_, eol_))
        if self.Fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fax).encode(ExternalEncoding), input_name='Fax'), namespace_, eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespace_, self.gds_format_string(quote_xml(self.Email).encode(ExternalEncoding), input_name='Email'), namespace_, eol_))
        if self.CompanyEmailForCustomer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyEmailForCustomer>%s</%sCompanyEmailForCustomer>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyEmailForCustomer).encode(ExternalEncoding), input_name='CompanyEmailForCustomer'), namespace_, eol_))
        if self.CompanyWebSite is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyWebSite>%s</%sCompanyWebSite>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyWebSite).encode(ExternalEncoding), input_name='CompanyWebSite'), namespace_, eol_))
        if self.FirstMonthFiscalYear is not None:
            self.FirstMonthFiscalYear.export(outfile, level, namespace_, name_='FirstMonthFiscalYear', pretty_print=pretty_print)
        if self.FirstMonthIncomeTaxYear is not None:
            self.FirstMonthIncomeTaxYear.export(outfile, level, namespace_, name_='FirstMonthIncomeTaxYear', pretty_print=pretty_print)
        if self.CompanyType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyType>%s</%sCompanyType>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyType).encode(ExternalEncoding), input_name='CompanyType'), namespace_, eol_))
        if self.EIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEIN>%s</%sEIN>%s' % (namespace_, self.gds_format_string(quote_xml(self.EIN).encode(ExternalEncoding), input_name='EIN'), namespace_, eol_))
        if self.SSN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSSN>%s</%sSSN>%s' % (namespace_, self.gds_format_string(quote_xml(self.SSN).encode(ExternalEncoding), input_name='SSN'), namespace_, eol_))
        if self.TaxForm is not None:
            self.TaxForm.export(outfile, level, namespace_, name_='TaxForm', pretty_print=pretty_print)
        if self.SubscribedServices is not None:
            self.SubscribedServices.export(outfile, level, namespace_, name_='SubscribedServices', pretty_print=pretty_print)
        if self.AccountantCopy is not None:
            self.AccountantCopy.export(outfile, level, namespace_, name_='AccountantCopy', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.IsSampleCompany is not None or
            self.CompanyName is not None or
            self.LegalCompanyName is not None or
            self.Address is not None or
            self.AddressBlock is not None or
            self.LegalAddress is not None or
            self.CompanyAddressForCustomer is not None or
            self.CompanyAddressBlockForCustomer is not None or
            self.Phone is not None or
            self.Fax is not None or
            self.Email is not None or
            self.CompanyEmailForCustomer is not None or
            self.CompanyWebSite is not None or
            self.FirstMonthFiscalYear is not None or
            self.FirstMonthIncomeTaxYear is not None or
            self.CompanyType is not None or
            self.EIN is not None or
            self.SSN is not None or
            self.TaxForm is not None or
            self.SubscribedServices is not None or
            self.AccountantCopy is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.IsSampleCompany is not None:
            showIndent(outfile, level)
            outfile.write('IsSampleCompany=%s,\n' % quote_python(self.IsSampleCompany).encode(ExternalEncoding))
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.LegalCompanyName is not None:
            showIndent(outfile, level)
            outfile.write('LegalCompanyName=%s,\n' % quote_python(self.LegalCompanyName).encode(ExternalEncoding))
        if self.Address is not None:
            showIndent(outfile, level)
            outfile.write('Address=model_.Address(\n')
            self.Address.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AddressBlock is not None:
            showIndent(outfile, level)
            outfile.write('AddressBlock=model_.AddressBlock(\n')
            self.AddressBlock.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.LegalAddress is not None:
            showIndent(outfile, level)
            outfile.write('LegalAddress=model_.LegalAddress(\n')
            self.LegalAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompanyAddressForCustomer is not None:
            showIndent(outfile, level)
            outfile.write('CompanyAddressForCustomer=model_.CompanyAddressForCustomer(\n')
            self.CompanyAddressForCustomer.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompanyAddressBlockForCustomer is not None:
            showIndent(outfile, level)
            outfile.write('CompanyAddressBlockForCustomer=model_.CompanyAddressBlockForCustomer(\n')
            self.CompanyAddressBlockForCustomer.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Phone is not None:
            showIndent(outfile, level)
            outfile.write('Phone=%s,\n' % quote_python(self.Phone).encode(ExternalEncoding))
        if self.Fax is not None:
            showIndent(outfile, level)
            outfile.write('Fax=%s,\n' % quote_python(self.Fax).encode(ExternalEncoding))
        if self.Email is not None:
            showIndent(outfile, level)
            outfile.write('Email=%s,\n' % quote_python(self.Email).encode(ExternalEncoding))
        if self.CompanyEmailForCustomer is not None:
            showIndent(outfile, level)
            outfile.write('CompanyEmailForCustomer=%s,\n' % quote_python(self.CompanyEmailForCustomer).encode(ExternalEncoding))
        if self.CompanyWebSite is not None:
            showIndent(outfile, level)
            outfile.write('CompanyWebSite=%s,\n' % quote_python(self.CompanyWebSite).encode(ExternalEncoding))
        if self.FirstMonthFiscalYear is not None:
            showIndent(outfile, level)
            outfile.write('FirstMonthFiscalYear=model_.FirstMonthFiscalYear(\n')
            self.FirstMonthFiscalYear.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FirstMonthIncomeTaxYear is not None:
            showIndent(outfile, level)
            outfile.write('FirstMonthIncomeTaxYear=model_.FirstMonthIncomeTaxYear(\n')
            self.FirstMonthIncomeTaxYear.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompanyType is not None:
            showIndent(outfile, level)
            outfile.write('CompanyType=%s,\n' % quote_python(self.CompanyType).encode(ExternalEncoding))
        if self.EIN is not None:
            showIndent(outfile, level)
            outfile.write('EIN=%s,\n' % quote_python(self.EIN).encode(ExternalEncoding))
        if self.SSN is not None:
            showIndent(outfile, level)
            outfile.write('SSN=%s,\n' % quote_python(self.SSN).encode(ExternalEncoding))
        if self.TaxForm is not None:
            showIndent(outfile, level)
            outfile.write('TaxForm=model_.TaxForm(\n')
            self.TaxForm.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SubscribedServices is not None:
            showIndent(outfile, level)
            outfile.write('SubscribedServices=model_.SubscribedServices(\n')
            self.SubscribedServices.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AccountantCopy is not None:
            showIndent(outfile, level)
            outfile.write('AccountantCopy=model_.AccountantCopy(\n')
            self.AccountantCopy.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IsSampleCompany':
            IsSampleCompany_ = child_.text
            IsSampleCompany_ = re_.sub(String_cleanup_pat_, " ", IsSampleCompany_).strip()
            IsSampleCompany_ = self.gds_validate_string(IsSampleCompany_, node, 'IsSampleCompany')
            self.IsSampleCompany = IsSampleCompany_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'LegalCompanyName':
            LegalCompanyName_ = child_.text
            LegalCompanyName_ = self.gds_validate_string(LegalCompanyName_, node, 'LegalCompanyName')
            self.LegalCompanyName = LegalCompanyName_
        elif nodeName_ == 'Address':
            obj_ = Address.factory()
            obj_.build(child_)
            self.set_Address(obj_)
        elif nodeName_ == 'AddressBlock':
            obj_ = AddressBlock.factory()
            obj_.build(child_)
            self.set_AddressBlock(obj_)
        elif nodeName_ == 'LegalAddress':
            obj_ = LegalAddress.factory()
            obj_.build(child_)
            self.set_LegalAddress(obj_)
        elif nodeName_ == 'CompanyAddressForCustomer':
            obj_ = CompanyAddressForCustomer.factory()
            obj_.build(child_)
            self.set_CompanyAddressForCustomer(obj_)
        elif nodeName_ == 'CompanyAddressBlockForCustomer':
            obj_ = CompanyAddressBlockForCustomer.factory()
            obj_.build(child_)
            self.set_CompanyAddressBlockForCustomer(obj_)
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Fax':
            Fax_ = child_.text
            Fax_ = self.gds_validate_string(Fax_, node, 'Fax')
            self.Fax = Fax_
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
        elif nodeName_ == 'CompanyEmailForCustomer':
            CompanyEmailForCustomer_ = child_.text
            CompanyEmailForCustomer_ = self.gds_validate_string(CompanyEmailForCustomer_, node, 'CompanyEmailForCustomer')
            self.CompanyEmailForCustomer = CompanyEmailForCustomer_
        elif nodeName_ == 'CompanyWebSite':
            CompanyWebSite_ = child_.text
            CompanyWebSite_ = self.gds_validate_string(CompanyWebSite_, node, 'CompanyWebSite')
            self.CompanyWebSite = CompanyWebSite_
        elif nodeName_ == 'FirstMonthFiscalYear':
            obj_ = None
            self.set_FirstMonthFiscalYear(obj_)
            self.validate_FirstMonthFiscalYear(self.FirstMonthFiscalYear)    # validate type FirstMonthFiscalYear
        elif nodeName_ == 'FirstMonthIncomeTaxYear':
            obj_ = None
            self.set_FirstMonthIncomeTaxYear(obj_)
            self.validate_FirstMonthIncomeTaxYear(self.FirstMonthIncomeTaxYear)    # validate type FirstMonthIncomeTaxYear
        elif nodeName_ == 'CompanyType':
            CompanyType_ = child_.text
            CompanyType_ = self.gds_validate_string(CompanyType_, node, 'CompanyType')
            self.CompanyType = CompanyType_
        elif nodeName_ == 'EIN':
            EIN_ = child_.text
            EIN_ = self.gds_validate_string(EIN_, node, 'EIN')
            self.EIN = EIN_
        elif nodeName_ == 'SSN':
            SSN_ = child_.text
            SSN_ = self.gds_validate_string(SSN_, node, 'SSN')
            self.SSN = SSN_
        elif nodeName_ == 'TaxForm':
            obj_ = None
            self.set_TaxForm(obj_)
            self.validate_TaxForm(self.TaxForm)    # validate type TaxForm
        elif nodeName_ == 'SubscribedServices':
            obj_ = SubscribedServices.factory()
            obj_.build(child_)
            self.set_SubscribedServices(obj_)
        elif nodeName_ == 'AccountantCopy':
            obj_ = AccountantCopy.factory()
            obj_.build(child_)
            self.set_AccountantCopy(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class CompanyRet


class CompanyName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CompanyName.subclass:
            return CompanyName.subclass(*args_, **kwargs_)
        else:
            return CompanyName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CompanyName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CompanyName


class LegalCompanyName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if LegalCompanyName.subclass:
            return LegalCompanyName.subclass(*args_, **kwargs_)
        else:
            return LegalCompanyName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='LegalCompanyName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LegalCompanyName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LegalCompanyName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LegalCompanyName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LegalCompanyName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LegalCompanyName


class Phone(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Phone.subclass:
            return Phone.subclass(*args_, **kwargs_)
        else:
            return Phone(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Phone', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Phone')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Phone'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Phone', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Phone'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Phone


class Fax(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Fax.subclass:
            return Fax.subclass(*args_, **kwargs_)
        else:
            return Fax(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Fax', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Fax')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Fax'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Fax', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Fax'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Fax


class Email(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Email.subclass:
            return Email.subclass(*args_, **kwargs_)
        else:
            return Email(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Email', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Email')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Email'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Email', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Email'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Email


class CompanyWebSite(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CompanyWebSite.subclass:
            return CompanyWebSite.subclass(*args_, **kwargs_)
        else:
            return CompanyWebSite(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CompanyWebSite', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyWebSite')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyWebSite'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyWebSite', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyWebSite'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CompanyWebSite


class CompanyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CompanyType.subclass:
            return CompanyType.subclass(*args_, **kwargs_)
        else:
            return CompanyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CompanyType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CompanyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CompanyType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CompanyType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CompanyType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CompanyType


class EIN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if EIN.subclass:
            return EIN.subclass(*args_, **kwargs_)
        else:
            return EIN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='EIN', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EIN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EIN'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EIN', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='EIN'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EIN


class SSN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if SSN.subclass:
            return SSN.subclass(*args_, **kwargs_)
        else:
            return SSN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SSN', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SSN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SSN'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SSN', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SSN'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SSN


class CustomerRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, CompanyName=None, Salutation=None, FirstName=None, MiddleName=None, LastName=None, Suffix=None, JobTitle=None, BillAddress=None, BillAddressBlock=None, ShipAddress=None, ShipAddressBlock=None, ShipToAddress=None, PrintAs=None, Phone=None, Mobile=None, Pager=None, AltPhone=None, Fax=None, Email=None, Cc=None, Contact=None, AltContact=None, AdditionalContactRef=None, ContactsRet=None, CustomerTypeRef=None, TermsRef=None, SalesRepRef=None, Balance=None, TotalBalance=None, SalesTaxCodeRef=None, ItemSalesTaxRef=None, SalesTaxCountry=None, ResaleNumber=None, AccountNumber=None, CreditLimit=None, PreferredPaymentMethodRef=None, CreditCardInfo=None, JobStatus=None, JobStartDate=None, JobProjectedEndDate=None, JobEndDate=None, JobDesc=None, JobTypeRef=None, Notes=None, AdditionalNotesRet=None, IsStatementWithParent=None, DeliveryMethod=None, PreferredDeliveryMethod=None, PriceLevelRef=None, ExternalGUID=None, TaxRegistrationNumber=None, CurrencyRef=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.CompanyName = CompanyName
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.Suffix = Suffix
        self.JobTitle = JobTitle
        self.BillAddress = BillAddress
        self.BillAddressBlock = BillAddressBlock
        self.ShipAddress = ShipAddress
        self.ShipAddressBlock = ShipAddressBlock
        if ShipToAddress is None:
            self.ShipToAddress = []
        else:
            self.ShipToAddress = ShipToAddress
        self.PrintAs = PrintAs
        self.Phone = Phone
        self.Mobile = Mobile
        self.Pager = Pager
        self.AltPhone = AltPhone
        self.Fax = Fax
        self.Email = Email
        self.Cc = Cc
        self.Contact = Contact
        self.AltContact = AltContact
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
        if ContactsRet is None:
            self.ContactsRet = []
        else:
            self.ContactsRet = ContactsRet
        self.CustomerTypeRef = CustomerTypeRef
        self.TermsRef = TermsRef
        self.SalesRepRef = SalesRepRef
        self.Balance = Balance
        self.TotalBalance = TotalBalance
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.SalesTaxCountry = SalesTaxCountry
        self.ResaleNumber = ResaleNumber
        self.AccountNumber = AccountNumber
        self.CreditLimit = CreditLimit
        self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
        self.CreditCardInfo = CreditCardInfo
        self.JobStatus = JobStatus
        self.JobStartDate = JobStartDate
        self.JobProjectedEndDate = JobProjectedEndDate
        self.JobEndDate = JobEndDate
        self.JobDesc = JobDesc
        self.JobTypeRef = JobTypeRef
        self.Notes = Notes
        if AdditionalNotesRet is None:
            self.AdditionalNotesRet = []
        else:
            self.AdditionalNotesRet = AdditionalNotesRet
        self.IsStatementWithParent = IsStatementWithParent
        self.DeliveryMethod = DeliveryMethod
        self.PreferredDeliveryMethod = PreferredDeliveryMethod
        self.PriceLevelRef = PriceLevelRef
        self.ExternalGUID = ExternalGUID
        self.TaxRegistrationNumber = TaxRegistrationNumber
        self.CurrencyRef = CurrencyRef
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if CustomerRet.subclass:
            return CustomerRet.subclass(*args_, **kwargs_)
        else:
            return CustomerRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_BillAddressBlock(self): return self.BillAddressBlock
    def set_BillAddressBlock(self, BillAddressBlock): self.BillAddressBlock = BillAddressBlock
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_ShipAddressBlock(self): return self.ShipAddressBlock
    def set_ShipAddressBlock(self, ShipAddressBlock): self.ShipAddressBlock = ShipAddressBlock
    def get_ShipToAddress(self): return self.ShipToAddress
    def set_ShipToAddress(self, ShipToAddress): self.ShipToAddress = ShipToAddress
    def add_ShipToAddress(self, value): self.ShipToAddress.append(value)
    def insert_ShipToAddress(self, index, value): self.ShipToAddress[index] = value
    def get_PrintAs(self): return self.PrintAs
    def set_PrintAs(self, PrintAs): self.PrintAs = PrintAs
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Mobile(self): return self.Mobile
    def set_Mobile(self, Mobile): self.Mobile = Mobile
    def get_Pager(self): return self.Pager
    def set_Pager(self, Pager): self.Pager = Pager
    def get_AltPhone(self): return self.AltPhone
    def set_AltPhone(self, AltPhone): self.AltPhone = AltPhone
    def get_Fax(self): return self.Fax
    def set_Fax(self, Fax): self.Fax = Fax
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def get_Cc(self): return self.Cc
    def set_Cc(self, Cc): self.Cc = Cc
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_AltContact(self): return self.AltContact
    def set_AltContact(self, AltContact): self.AltContact = AltContact
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def get_ContactsRet(self): return self.ContactsRet
    def set_ContactsRet(self, ContactsRet): self.ContactsRet = ContactsRet
    def add_ContactsRet(self, value): self.ContactsRet.append(value)
    def insert_ContactsRet(self, index, value): self.ContactsRet[index] = value
    def get_CustomerTypeRef(self): return self.CustomerTypeRef
    def set_CustomerTypeRef(self, CustomerTypeRef): self.CustomerTypeRef = CustomerTypeRef
    def get_TermsRef(self): return self.TermsRef
    def set_TermsRef(self, TermsRef): self.TermsRef = TermsRef
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_Balance(self): return self.Balance
    def set_Balance(self, Balance): self.Balance = Balance
    def get_TotalBalance(self): return self.TotalBalance
    def set_TotalBalance(self, TotalBalance): self.TotalBalance = TotalBalance
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_SalesTaxCountry(self): return self.SalesTaxCountry
    def set_SalesTaxCountry(self, SalesTaxCountry): self.SalesTaxCountry = SalesTaxCountry
    def validate_SalesTaxCountry(self, value):
        # Validate type SalesTaxCountry, a restriction on ENUMTYPE.
        pass
    def get_ResaleNumber(self): return self.ResaleNumber
    def set_ResaleNumber(self, ResaleNumber): self.ResaleNumber = ResaleNumber
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_CreditLimit(self): return self.CreditLimit
    def set_CreditLimit(self, CreditLimit): self.CreditLimit = CreditLimit
    def get_PreferredPaymentMethodRef(self): return self.PreferredPaymentMethodRef
    def set_PreferredPaymentMethodRef(self, PreferredPaymentMethodRef): self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
    def get_CreditCardInfo(self): return self.CreditCardInfo
    def set_CreditCardInfo(self, CreditCardInfo): self.CreditCardInfo = CreditCardInfo
    def get_JobStatus(self): return self.JobStatus
    def set_JobStatus(self, JobStatus): self.JobStatus = JobStatus
    def validate_JobStatus(self, value):
        # Validate type JobStatus, a restriction on ENUMTYPE.
        pass
    def get_JobStartDate(self): return self.JobStartDate
    def set_JobStartDate(self, JobStartDate): self.JobStartDate = JobStartDate
    def get_JobProjectedEndDate(self): return self.JobProjectedEndDate
    def set_JobProjectedEndDate(self, JobProjectedEndDate): self.JobProjectedEndDate = JobProjectedEndDate
    def get_JobEndDate(self): return self.JobEndDate
    def set_JobEndDate(self, JobEndDate): self.JobEndDate = JobEndDate
    def get_JobDesc(self): return self.JobDesc
    def set_JobDesc(self, JobDesc): self.JobDesc = JobDesc
    def get_JobTypeRef(self): return self.JobTypeRef
    def set_JobTypeRef(self, JobTypeRef): self.JobTypeRef = JobTypeRef
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_AdditionalNotesRet(self): return self.AdditionalNotesRet
    def set_AdditionalNotesRet(self, AdditionalNotesRet): self.AdditionalNotesRet = AdditionalNotesRet
    def add_AdditionalNotesRet(self, value): self.AdditionalNotesRet.append(value)
    def insert_AdditionalNotesRet(self, index, value): self.AdditionalNotesRet[index] = value
    def get_IsStatementWithParent(self): return self.IsStatementWithParent
    def set_IsStatementWithParent(self, IsStatementWithParent): self.IsStatementWithParent = IsStatementWithParent
    def get_DeliveryMethod(self): return self.DeliveryMethod
    def set_DeliveryMethod(self, DeliveryMethod): self.DeliveryMethod = DeliveryMethod
    def validate_DeliveryMethod(self, value):
        # Validate type DeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PreferredDeliveryMethod(self): return self.PreferredDeliveryMethod
    def set_PreferredDeliveryMethod(self, PreferredDeliveryMethod): self.PreferredDeliveryMethod = PreferredDeliveryMethod
    def validate_PreferredDeliveryMethod(self, value):
        # Validate type PreferredDeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PriceLevelRef(self): return self.PriceLevelRef
    def set_PriceLevelRef(self, PriceLevelRef): self.PriceLevelRef = PriceLevelRef
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_TaxRegistrationNumber(self): return self.TaxRegistrationNumber
    def set_TaxRegistrationNumber(self, TaxRegistrationNumber): self.TaxRegistrationNumber = TaxRegistrationNumber
    def get_CurrencyRef(self): return self.CurrencyRef
    def set_CurrencyRef(self, CurrencyRef): self.CurrencyRef = CurrencyRef
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='CustomerRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_, eol_))
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.Suffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuffix>%s</%sSuffix>%s' % (namespace_, self.gds_format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.BillAddressBlock is not None:
            self.BillAddressBlock.export(outfile, level, namespace_, name_='BillAddressBlock', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        if self.ShipAddressBlock is not None:
            self.ShipAddressBlock.export(outfile, level, namespace_, name_='ShipAddressBlock', pretty_print=pretty_print)
        for ShipToAddress_ in self.ShipToAddress:
            ShipToAddress_.export(outfile, level, namespace_, name_='ShipToAddress', pretty_print=pretty_print)
        if self.PrintAs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintAs>%s</%sPrintAs>%s' % (namespace_, self.gds_format_string(quote_xml(self.PrintAs).encode(ExternalEncoding), input_name='PrintAs'), namespace_, eol_))
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.Phone).encode(ExternalEncoding), input_name='Phone'), namespace_, eol_))
        if self.Mobile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMobile>%s</%sMobile>%s' % (namespace_, self.gds_format_string(quote_xml(self.Mobile).encode(ExternalEncoding), input_name='Mobile'), namespace_, eol_))
        if self.Pager is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPager>%s</%sPager>%s' % (namespace_, self.gds_format_string(quote_xml(self.Pager).encode(ExternalEncoding), input_name='Pager'), namespace_, eol_))
        if self.AltPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltPhone>%s</%sAltPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltPhone).encode(ExternalEncoding), input_name='AltPhone'), namespace_, eol_))
        if self.Fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fax).encode(ExternalEncoding), input_name='Fax'), namespace_, eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespace_, self.gds_format_string(quote_xml(self.Email).encode(ExternalEncoding), input_name='Email'), namespace_, eol_))
        if self.Cc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCc>%s</%sCc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cc).encode(ExternalEncoding), input_name='Cc'), namespace_, eol_))
        if self.Contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContact>%s</%sContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.Contact).encode(ExternalEncoding), input_name='Contact'), namespace_, eol_))
        if self.AltContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltContact>%s</%sAltContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltContact).encode(ExternalEncoding), input_name='AltContact'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
        for ContactsRet_ in self.ContactsRet:
            ContactsRet_.export(outfile, level, namespace_, name_='ContactsRet', pretty_print=pretty_print)
        if self.CustomerTypeRef is not None:
            self.CustomerTypeRef.export(outfile, level, namespace_, name_='CustomerTypeRef', pretty_print=pretty_print)
        if self.TermsRef is not None:
            self.TermsRef.export(outfile, level, namespace_, name_='TermsRef', pretty_print=pretty_print)
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.Balance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBalance>%s</%sBalance>%s' % (namespace_, self.gds_format_string(quote_xml(self.Balance).encode(ExternalEncoding), input_name='Balance'), namespace_, eol_))
        if self.TotalBalance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalBalance>%s</%sTotalBalance>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalBalance).encode(ExternalEncoding), input_name='TotalBalance'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.SalesTaxCountry is not None:
            self.SalesTaxCountry.export(outfile, level, namespace_, name_='SalesTaxCountry', pretty_print=pretty_print)
        if self.ResaleNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResaleNumber>%s</%sResaleNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ResaleNumber).encode(ExternalEncoding), input_name='ResaleNumber'), namespace_, eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_, eol_))
        if self.CreditLimit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditLimit>%s</%sCreditLimit>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditLimit).encode(ExternalEncoding), input_name='CreditLimit'), namespace_, eol_))
        if self.PreferredPaymentMethodRef is not None:
            self.PreferredPaymentMethodRef.export(outfile, level, namespace_, name_='PreferredPaymentMethodRef', pretty_print=pretty_print)
        if self.CreditCardInfo is not None:
            self.CreditCardInfo.export(outfile, level, namespace_, name_='CreditCardInfo', pretty_print=pretty_print)
        if self.JobStatus is not None:
            self.JobStatus.export(outfile, level, namespace_, name_='JobStatus', pretty_print=pretty_print)
        if self.JobStartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobStartDate>%s</%sJobStartDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobStartDate).encode(ExternalEncoding), input_name='JobStartDate'), namespace_, eol_))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobProjectedEndDate>%s</%sJobProjectedEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobProjectedEndDate).encode(ExternalEncoding), input_name='JobProjectedEndDate'), namespace_, eol_))
        if self.JobEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobEndDate>%s</%sJobEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobEndDate).encode(ExternalEncoding), input_name='JobEndDate'), namespace_, eol_))
        if self.JobDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobDesc>%s</%sJobDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobDesc).encode(ExternalEncoding), input_name='JobDesc'), namespace_, eol_))
        if self.JobTypeRef is not None:
            self.JobTypeRef.export(outfile, level, namespace_, name_='JobTypeRef', pretty_print=pretty_print)
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespace_, self.gds_format_string(quote_xml(self.Notes).encode(ExternalEncoding), input_name='Notes'), namespace_, eol_))
        for AdditionalNotesRet_ in self.AdditionalNotesRet:
            AdditionalNotesRet_.export(outfile, level, namespace_, name_='AdditionalNotesRet', pretty_print=pretty_print)
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsStatementWithParent>%s</%sIsStatementWithParent>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsStatementWithParent).encode(ExternalEncoding), input_name='IsStatementWithParent'), namespace_, eol_))
        if self.DeliveryMethod is not None:
            self.DeliveryMethod.export(outfile, level, namespace_, name_='DeliveryMethod', pretty_print=pretty_print)
        if self.PreferredDeliveryMethod is not None:
            self.PreferredDeliveryMethod.export(outfile, level, namespace_, name_='PreferredDeliveryMethod', pretty_print=pretty_print)
        if self.PriceLevelRef is not None:
            self.PriceLevelRef.export(outfile, level, namespace_, name_='PriceLevelRef', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRegistrationNumber>%s</%sTaxRegistrationNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxRegistrationNumber).encode(ExternalEncoding), input_name='TaxRegistrationNumber'), namespace_, eol_))
        if self.CurrencyRef is not None:
            self.CurrencyRef.export(outfile, level, namespace_, name_='CurrencyRef', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.CompanyName is not None or
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.Suffix is not None or
            self.JobTitle is not None or
            self.BillAddress is not None or
            self.BillAddressBlock is not None or
            self.ShipAddress is not None or
            self.ShipAddressBlock is not None or
            self.ShipToAddress or
            self.PrintAs is not None or
            self.Phone is not None or
            self.Mobile is not None or
            self.Pager is not None or
            self.AltPhone is not None or
            self.Fax is not None or
            self.Email is not None or
            self.Cc is not None or
            self.Contact is not None or
            self.AltContact is not None or
            self.AdditionalContactRef or
            self.ContactsRet or
            self.CustomerTypeRef is not None or
            self.TermsRef is not None or
            self.SalesRepRef is not None or
            self.Balance is not None or
            self.TotalBalance is not None or
            self.SalesTaxCodeRef is not None or
            self.ItemSalesTaxRef is not None or
            self.SalesTaxCountry is not None or
            self.ResaleNumber is not None or
            self.AccountNumber is not None or
            self.CreditLimit is not None or
            self.PreferredPaymentMethodRef is not None or
            self.CreditCardInfo is not None or
            self.JobStatus is not None or
            self.JobStartDate is not None or
            self.JobProjectedEndDate is not None or
            self.JobEndDate is not None or
            self.JobDesc is not None or
            self.JobTypeRef is not None or
            self.Notes is not None or
            self.AdditionalNotesRet or
            self.IsStatementWithParent is not None or
            self.DeliveryMethod is not None or
            self.PreferredDeliveryMethod is not None or
            self.PriceLevelRef is not None or
            self.ExternalGUID is not None or
            self.TaxRegistrationNumber is not None or
            self.CurrencyRef is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BillAddressBlock is not None:
            showIndent(outfile, level)
            outfile.write('BillAddressBlock=model_.BillAddressBlock(\n')
            self.BillAddressBlock.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddressBlock is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddressBlock=model_.ShipAddressBlock(\n')
            self.ShipAddressBlock.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ShipToAddress=[\n')
        level += 1
        for ShipToAddress_ in self.ShipToAddress:
            showIndent(outfile, level)
            outfile.write('model_.ShipToAddress(\n')
            ShipToAddress_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.PrintAs is not None:
            showIndent(outfile, level)
            outfile.write('PrintAs=%s,\n' % quote_python(self.PrintAs).encode(ExternalEncoding))
        if self.Phone is not None:
            showIndent(outfile, level)
            outfile.write('Phone=%s,\n' % quote_python(self.Phone).encode(ExternalEncoding))
        if self.Mobile is not None:
            showIndent(outfile, level)
            outfile.write('Mobile=%s,\n' % quote_python(self.Mobile).encode(ExternalEncoding))
        if self.Pager is not None:
            showIndent(outfile, level)
            outfile.write('Pager=%s,\n' % quote_python(self.Pager).encode(ExternalEncoding))
        if self.AltPhone is not None:
            showIndent(outfile, level)
            outfile.write('AltPhone=%s,\n' % quote_python(self.AltPhone).encode(ExternalEncoding))
        if self.Fax is not None:
            showIndent(outfile, level)
            outfile.write('Fax=%s,\n' % quote_python(self.Fax).encode(ExternalEncoding))
        if self.Email is not None:
            showIndent(outfile, level)
            outfile.write('Email=%s,\n' % quote_python(self.Email).encode(ExternalEncoding))
        if self.Cc is not None:
            showIndent(outfile, level)
            outfile.write('Cc=%s,\n' % quote_python(self.Cc).encode(ExternalEncoding))
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=%s,\n' % quote_python(self.Contact).encode(ExternalEncoding))
        if self.AltContact is not None:
            showIndent(outfile, level)
            outfile.write('AltContact=%s,\n' % quote_python(self.AltContact).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ContactsRet=[\n')
        level += 1
        for ContactsRet_ in self.ContactsRet:
            showIndent(outfile, level)
            outfile.write('model_.ContactsRet(\n')
            ContactsRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CustomerTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTypeRef=model_.CustomerTypeRef(\n')
            self.CustomerTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TermsRef is not None:
            showIndent(outfile, level)
            outfile.write('TermsRef=model_.TermsRef(\n')
            self.TermsRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Balance is not None:
            showIndent(outfile, level)
            outfile.write('Balance=%s,\n' % quote_python(self.Balance).encode(ExternalEncoding))
        if self.TotalBalance is not None:
            showIndent(outfile, level)
            outfile.write('TotalBalance=%s,\n' % quote_python(self.TotalBalance).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxCountry is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCountry=model_.SalesTaxCountry(\n')
            self.SalesTaxCountry.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ResaleNumber is not None:
            showIndent(outfile, level)
            outfile.write('ResaleNumber=%s,\n' % quote_python(self.ResaleNumber).encode(ExternalEncoding))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.CreditLimit is not None:
            showIndent(outfile, level)
            outfile.write('CreditLimit=%s,\n' % quote_python(self.CreditLimit).encode(ExternalEncoding))
        if self.PreferredPaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PreferredPaymentMethodRef=model_.PreferredPaymentMethodRef(\n')
            self.PreferredPaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardInfo=model_.CreditCardInfo(\n')
            self.CreditCardInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStatus is not None:
            showIndent(outfile, level)
            outfile.write('JobStatus=model_.JobStatus(\n')
            self.JobStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStartDate is not None:
            showIndent(outfile, level)
            outfile.write('JobStartDate=%s,\n' % quote_python(self.JobStartDate).encode(ExternalEncoding))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobProjectedEndDate=%s,\n' % quote_python(self.JobProjectedEndDate).encode(ExternalEncoding))
        if self.JobEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobEndDate=%s,\n' % quote_python(self.JobEndDate).encode(ExternalEncoding))
        if self.JobDesc is not None:
            showIndent(outfile, level)
            outfile.write('JobDesc=%s,\n' % quote_python(self.JobDesc).encode(ExternalEncoding))
        if self.JobTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('JobTypeRef=model_.JobTypeRef(\n')
            self.JobTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Notes is not None:
            showIndent(outfile, level)
            outfile.write('Notes=%s,\n' % quote_python(self.Notes).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalNotesRet=[\n')
        level += 1
        for AdditionalNotesRet_ in self.AdditionalNotesRet:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalNotesRet(\n')
            AdditionalNotesRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level)
            outfile.write('IsStatementWithParent=%s,\n' % quote_python(self.IsStatementWithParent).encode(ExternalEncoding))
        if self.DeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryMethod=model_.DeliveryMethod(\n')
            self.DeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PreferredDeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('PreferredDeliveryMethod=model_.PreferredDeliveryMethod(\n')
            self.PreferredDeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PriceLevelRef is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelRef=model_.PriceLevelRef(\n')
            self.PriceLevelRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level)
            outfile.write('TaxRegistrationNumber=%s,\n' % quote_python(self.TaxRegistrationNumber).encode(ExternalEncoding))
        if self.CurrencyRef is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyRef=model_.CurrencyRef(\n')
            self.CurrencyRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'Suffix':
            Suffix_ = child_.text
            Suffix_ = self.gds_validate_string(Suffix_, node, 'Suffix')
            self.Suffix = Suffix_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'BillAddressBlock':
            obj_ = BillAddressBlock.factory()
            obj_.build(child_)
            self.set_BillAddressBlock(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'ShipAddressBlock':
            obj_ = ShipAddressBlock.factory()
            obj_.build(child_)
            self.set_ShipAddressBlock(obj_)
        elif nodeName_ == 'ShipToAddress':
            obj_ = ShipToAddress.factory()
            obj_.build(child_)
            self.ShipToAddress.append(obj_)
        elif nodeName_ == 'PrintAs':
            PrintAs_ = child_.text
            PrintAs_ = self.gds_validate_string(PrintAs_, node, 'PrintAs')
            self.PrintAs = PrintAs_
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Mobile':
            Mobile_ = child_.text
            Mobile_ = self.gds_validate_string(Mobile_, node, 'Mobile')
            self.Mobile = Mobile_
        elif nodeName_ == 'Pager':
            Pager_ = child_.text
            Pager_ = self.gds_validate_string(Pager_, node, 'Pager')
            self.Pager = Pager_
        elif nodeName_ == 'AltPhone':
            AltPhone_ = child_.text
            AltPhone_ = self.gds_validate_string(AltPhone_, node, 'AltPhone')
            self.AltPhone = AltPhone_
        elif nodeName_ == 'Fax':
            Fax_ = child_.text
            Fax_ = self.gds_validate_string(Fax_, node, 'Fax')
            self.Fax = Fax_
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
        elif nodeName_ == 'Cc':
            Cc_ = child_.text
            Cc_ = self.gds_validate_string(Cc_, node, 'Cc')
            self.Cc = Cc_
        elif nodeName_ == 'Contact':
            Contact_ = child_.text
            Contact_ = self.gds_validate_string(Contact_, node, 'Contact')
            self.Contact = Contact_
        elif nodeName_ == 'AltContact':
            AltContact_ = child_.text
            AltContact_ = self.gds_validate_string(AltContact_, node, 'AltContact')
            self.AltContact = AltContact_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
        elif nodeName_ == 'ContactsRet':
            obj_ = ContactsRet.factory()
            obj_.build(child_)
            self.ContactsRet.append(obj_)
        elif nodeName_ == 'CustomerTypeRef':
            obj_ = CustomerTypeRef.factory()
            obj_.build(child_)
            self.set_CustomerTypeRef(obj_)
        elif nodeName_ == 'TermsRef':
            obj_ = TermsRef.factory()
            obj_.build(child_)
            self.set_TermsRef(obj_)
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'Balance':
            Balance_ = child_.text
            Balance_ = self.gds_validate_string(Balance_, node, 'Balance')
            self.Balance = Balance_
        elif nodeName_ == 'TotalBalance':
            TotalBalance_ = child_.text
            TotalBalance_ = self.gds_validate_string(TotalBalance_, node, 'TotalBalance')
            self.TotalBalance = TotalBalance_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'SalesTaxCountry':
            obj_ = None
            self.set_SalesTaxCountry(obj_)
            self.validate_SalesTaxCountry(self.SalesTaxCountry)    # validate type SalesTaxCountry
        elif nodeName_ == 'ResaleNumber':
            ResaleNumber_ = child_.text
            ResaleNumber_ = self.gds_validate_string(ResaleNumber_, node, 'ResaleNumber')
            self.ResaleNumber = ResaleNumber_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'CreditLimit':
            CreditLimit_ = child_.text
            CreditLimit_ = self.gds_validate_string(CreditLimit_, node, 'CreditLimit')
            self.CreditLimit = CreditLimit_
        elif nodeName_ == 'PreferredPaymentMethodRef':
            obj_ = PreferredPaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PreferredPaymentMethodRef(obj_)
        elif nodeName_ == 'CreditCardInfo':
            obj_ = CreditCardInfo.factory()
            obj_.build(child_)
            self.set_CreditCardInfo(obj_)
        elif nodeName_ == 'JobStatus':
            obj_ = None
            self.set_JobStatus(obj_)
            self.validate_JobStatus(self.JobStatus)    # validate type JobStatus
        elif nodeName_ == 'JobStartDate':
            JobStartDate_ = child_.text
            JobStartDate_ = re_.sub(String_cleanup_pat_, " ", JobStartDate_).strip()
            JobStartDate_ = self.gds_validate_string(JobStartDate_, node, 'JobStartDate')
            self.JobStartDate = JobStartDate_
        elif nodeName_ == 'JobProjectedEndDate':
            JobProjectedEndDate_ = child_.text
            JobProjectedEndDate_ = re_.sub(String_cleanup_pat_, " ", JobProjectedEndDate_).strip()
            JobProjectedEndDate_ = self.gds_validate_string(JobProjectedEndDate_, node, 'JobProjectedEndDate')
            self.JobProjectedEndDate = JobProjectedEndDate_
        elif nodeName_ == 'JobEndDate':
            JobEndDate_ = child_.text
            JobEndDate_ = re_.sub(String_cleanup_pat_, " ", JobEndDate_).strip()
            JobEndDate_ = self.gds_validate_string(JobEndDate_, node, 'JobEndDate')
            self.JobEndDate = JobEndDate_
        elif nodeName_ == 'JobDesc':
            JobDesc_ = child_.text
            JobDesc_ = self.gds_validate_string(JobDesc_, node, 'JobDesc')
            self.JobDesc = JobDesc_
        elif nodeName_ == 'JobTypeRef':
            obj_ = JobTypeRef.factory()
            obj_.build(child_)
            self.set_JobTypeRef(obj_)
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'AdditionalNotesRet':
            obj_ = AdditionalNotesRet.factory()
            obj_.build(child_)
            self.AdditionalNotesRet.append(obj_)
        elif nodeName_ == 'IsStatementWithParent':
            IsStatementWithParent_ = child_.text
            IsStatementWithParent_ = re_.sub(String_cleanup_pat_, " ", IsStatementWithParent_).strip()
            IsStatementWithParent_ = self.gds_validate_string(IsStatementWithParent_, node, 'IsStatementWithParent')
            self.IsStatementWithParent = IsStatementWithParent_
        elif nodeName_ == 'DeliveryMethod':
            obj_ = None
            self.set_DeliveryMethod(obj_)
            self.validate_DeliveryMethod(self.DeliveryMethod)    # validate type DeliveryMethod
        elif nodeName_ == 'PreferredDeliveryMethod':
            obj_ = None
            self.set_PreferredDeliveryMethod(obj_)
            self.validate_PreferredDeliveryMethod(self.PreferredDeliveryMethod)    # validate type PreferredDeliveryMethod
        elif nodeName_ == 'PriceLevelRef':
            obj_ = PriceLevelRef.factory()
            obj_.build(child_)
            self.set_PriceLevelRef(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'TaxRegistrationNumber':
            TaxRegistrationNumber_ = child_.text
            TaxRegistrationNumber_ = self.gds_validate_string(TaxRegistrationNumber_, node, 'TaxRegistrationNumber')
            self.TaxRegistrationNumber = TaxRegistrationNumber_
        elif nodeName_ == 'CurrencyRef':
            obj_ = CurrencyRef.factory()
            obj_.build(child_)
            self.set_CurrencyRef(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class CustomerRet


class PrintAs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if PrintAs.subclass:
            return PrintAs.subclass(*args_, **kwargs_)
        else:
            return PrintAs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PrintAs', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PrintAs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PrintAs'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PrintAs', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PrintAs'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PrintAs


class Mobile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Mobile.subclass:
            return Mobile.subclass(*args_, **kwargs_)
        else:
            return Mobile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Mobile', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Mobile')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Mobile'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Mobile', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Mobile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Mobile


class Pager(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Pager.subclass:
            return Pager.subclass(*args_, **kwargs_)
        else:
            return Pager(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Pager', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Pager')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Pager'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Pager', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Pager'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Pager


class AltPhone(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AltPhone.subclass:
            return AltPhone.subclass(*args_, **kwargs_)
        else:
            return AltPhone(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AltPhone', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AltPhone')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AltPhone'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AltPhone', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AltPhone'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AltPhone


class Cc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Cc.subclass:
            return Cc.subclass(*args_, **kwargs_)
        else:
            return Cc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Cc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Cc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Cc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Cc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Cc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Cc


class AltContact(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AltContact.subclass:
            return AltContact.subclass(*args_, **kwargs_)
        else:
            return AltContact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AltContact', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AltContact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AltContact'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AltContact', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AltContact'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AltContact


class ResaleNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ResaleNumber.subclass:
            return ResaleNumber.subclass(*args_, **kwargs_)
        else:
            return ResaleNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ResaleNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ResaleNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ResaleNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ResaleNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ResaleNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ResaleNumber


class AccountNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AccountNumber.subclass:
            return AccountNumber.subclass(*args_, **kwargs_)
        else:
            return AccountNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AccountNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AccountNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AccountNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AccountNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AccountNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AccountNumber


class JobDesc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if JobDesc.subclass:
            return JobDesc.subclass(*args_, **kwargs_)
        else:
            return JobDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='JobDesc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JobDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JobDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JobDesc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='JobDesc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class JobDesc


class Notes(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Notes.subclass:
            return Notes.subclass(*args_, **kwargs_)
        else:
            return Notes(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Notes', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Notes')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Notes'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Notes', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Notes'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Notes


class TaxRegistrationNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if TaxRegistrationNumber.subclass:
            return TaxRegistrationNumber.subclass(*args_, **kwargs_)
        else:
            return TaxRegistrationNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='TaxRegistrationNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TaxRegistrationNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TaxRegistrationNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TaxRegistrationNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TaxRegistrationNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TaxRegistrationNumber


class CustomerAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, IsActive=None, ClassRef=None, ParentRef=None, CompanyName=None, Salutation=None, FirstName=None, MiddleName=None, LastName=None, Suffix=None, JobTitle=None, BillAddress=None, ShipAddress=None, ShipToAddress=None, PrintAs=None, Phone=None, Mobile=None, Pager=None, AltPhone=None, Fax=None, Email=None, Cc=None, Contact=None, AltContact=None, AdditionalContactRef=None, Contacts=None, CustomerTypeRef=None, TermsRef=None, SalesRepRef=None, OpenBalance=None, OpenBalanceDate=None, SalesTaxCodeRef=None, ItemSalesTaxRef=None, SalesTaxCountry=None, ResaleNumber=None, AccountNumber=None, CreditLimit=None, PreferredPaymentMethodRef=None, CreditCardInfo=None, JobStatus=None, JobStartDate=None, JobProjectedEndDate=None, JobEndDate=None, JobDesc=None, JobTypeRef=None, Notes=None, AdditionalNotes=None, IsStatementWithParent=None, DeliveryMethod=None, PreferredDeliveryMethod=None, PriceLevelRef=None, ExternalGUID=None, TaxRegistrationNumber=None, CurrencyRef=None):
        self.Name = Name
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.CompanyName = CompanyName
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.Suffix = Suffix
        self.JobTitle = JobTitle
        self.BillAddress = BillAddress
        self.ShipAddress = ShipAddress
        if ShipToAddress is None:
            self.ShipToAddress = []
        else:
            self.ShipToAddress = ShipToAddress
        self.PrintAs = PrintAs
        self.Phone = Phone
        self.Mobile = Mobile
        self.Pager = Pager
        self.AltPhone = AltPhone
        self.Fax = Fax
        self.Email = Email
        self.Cc = Cc
        self.Contact = Contact
        self.AltContact = AltContact
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
        if Contacts is None:
            self.Contacts = []
        else:
            self.Contacts = Contacts
        self.CustomerTypeRef = CustomerTypeRef
        self.TermsRef = TermsRef
        self.SalesRepRef = SalesRepRef
        self.OpenBalance = OpenBalance
        self.OpenBalanceDate = OpenBalanceDate
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.SalesTaxCountry = SalesTaxCountry
        self.ResaleNumber = ResaleNumber
        self.AccountNumber = AccountNumber
        self.CreditLimit = CreditLimit
        self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
        self.CreditCardInfo = CreditCardInfo
        self.JobStatus = JobStatus
        self.JobStartDate = JobStartDate
        self.JobProjectedEndDate = JobProjectedEndDate
        self.JobEndDate = JobEndDate
        self.JobDesc = JobDesc
        self.JobTypeRef = JobTypeRef
        self.Notes = Notes
        if AdditionalNotes is None:
            self.AdditionalNotes = []
        else:
            self.AdditionalNotes = AdditionalNotes
        self.IsStatementWithParent = IsStatementWithParent
        self.DeliveryMethod = DeliveryMethod
        self.PreferredDeliveryMethod = PreferredDeliveryMethod
        self.PriceLevelRef = PriceLevelRef
        self.ExternalGUID = ExternalGUID
        self.TaxRegistrationNumber = TaxRegistrationNumber
        self.CurrencyRef = CurrencyRef
    def factory(*args_, **kwargs_):
        if CustomerAdd.subclass:
            return CustomerAdd.subclass(*args_, **kwargs_)
        else:
            return CustomerAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_ShipToAddress(self): return self.ShipToAddress
    def set_ShipToAddress(self, ShipToAddress): self.ShipToAddress = ShipToAddress
    def add_ShipToAddress(self, value): self.ShipToAddress.append(value)
    def insert_ShipToAddress(self, index, value): self.ShipToAddress[index] = value
    def get_PrintAs(self): return self.PrintAs
    def set_PrintAs(self, PrintAs): self.PrintAs = PrintAs
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Mobile(self): return self.Mobile
    def set_Mobile(self, Mobile): self.Mobile = Mobile
    def get_Pager(self): return self.Pager
    def set_Pager(self, Pager): self.Pager = Pager
    def get_AltPhone(self): return self.AltPhone
    def set_AltPhone(self, AltPhone): self.AltPhone = AltPhone
    def get_Fax(self): return self.Fax
    def set_Fax(self, Fax): self.Fax = Fax
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def get_Cc(self): return self.Cc
    def set_Cc(self, Cc): self.Cc = Cc
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_AltContact(self): return self.AltContact
    def set_AltContact(self, AltContact): self.AltContact = AltContact
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def get_Contacts(self): return self.Contacts
    def set_Contacts(self, Contacts): self.Contacts = Contacts
    def add_Contacts(self, value): self.Contacts.append(value)
    def insert_Contacts(self, index, value): self.Contacts[index] = value
    def get_CustomerTypeRef(self): return self.CustomerTypeRef
    def set_CustomerTypeRef(self, CustomerTypeRef): self.CustomerTypeRef = CustomerTypeRef
    def get_TermsRef(self): return self.TermsRef
    def set_TermsRef(self, TermsRef): self.TermsRef = TermsRef
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_OpenBalance(self): return self.OpenBalance
    def set_OpenBalance(self, OpenBalance): self.OpenBalance = OpenBalance
    def get_OpenBalanceDate(self): return self.OpenBalanceDate
    def set_OpenBalanceDate(self, OpenBalanceDate): self.OpenBalanceDate = OpenBalanceDate
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_SalesTaxCountry(self): return self.SalesTaxCountry
    def set_SalesTaxCountry(self, SalesTaxCountry): self.SalesTaxCountry = SalesTaxCountry
    def validate_SalesTaxCountry(self, value):
        # Validate type SalesTaxCountry, a restriction on ENUMTYPE.
        pass
    def get_ResaleNumber(self): return self.ResaleNumber
    def set_ResaleNumber(self, ResaleNumber): self.ResaleNumber = ResaleNumber
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_CreditLimit(self): return self.CreditLimit
    def set_CreditLimit(self, CreditLimit): self.CreditLimit = CreditLimit
    def get_PreferredPaymentMethodRef(self): return self.PreferredPaymentMethodRef
    def set_PreferredPaymentMethodRef(self, PreferredPaymentMethodRef): self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
    def get_CreditCardInfo(self): return self.CreditCardInfo
    def set_CreditCardInfo(self, CreditCardInfo): self.CreditCardInfo = CreditCardInfo
    def get_JobStatus(self): return self.JobStatus
    def set_JobStatus(self, JobStatus): self.JobStatus = JobStatus
    def validate_JobStatus(self, value):
        # Validate type JobStatus, a restriction on ENUMTYPE.
        pass
    def get_JobStartDate(self): return self.JobStartDate
    def set_JobStartDate(self, JobStartDate): self.JobStartDate = JobStartDate
    def get_JobProjectedEndDate(self): return self.JobProjectedEndDate
    def set_JobProjectedEndDate(self, JobProjectedEndDate): self.JobProjectedEndDate = JobProjectedEndDate
    def get_JobEndDate(self): return self.JobEndDate
    def set_JobEndDate(self, JobEndDate): self.JobEndDate = JobEndDate
    def get_JobDesc(self): return self.JobDesc
    def set_JobDesc(self, JobDesc): self.JobDesc = JobDesc
    def get_JobTypeRef(self): return self.JobTypeRef
    def set_JobTypeRef(self, JobTypeRef): self.JobTypeRef = JobTypeRef
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_AdditionalNotes(self): return self.AdditionalNotes
    def set_AdditionalNotes(self, AdditionalNotes): self.AdditionalNotes = AdditionalNotes
    def add_AdditionalNotes(self, value): self.AdditionalNotes.append(value)
    def insert_AdditionalNotes(self, index, value): self.AdditionalNotes[index] = value
    def get_IsStatementWithParent(self): return self.IsStatementWithParent
    def set_IsStatementWithParent(self, IsStatementWithParent): self.IsStatementWithParent = IsStatementWithParent
    def get_DeliveryMethod(self): return self.DeliveryMethod
    def set_DeliveryMethod(self, DeliveryMethod): self.DeliveryMethod = DeliveryMethod
    def validate_DeliveryMethod(self, value):
        # Validate type DeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PreferredDeliveryMethod(self): return self.PreferredDeliveryMethod
    def set_PreferredDeliveryMethod(self, PreferredDeliveryMethod): self.PreferredDeliveryMethod = PreferredDeliveryMethod
    def validate_PreferredDeliveryMethod(self, value):
        # Validate type PreferredDeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PriceLevelRef(self): return self.PriceLevelRef
    def set_PriceLevelRef(self, PriceLevelRef): self.PriceLevelRef = PriceLevelRef
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_TaxRegistrationNumber(self): return self.TaxRegistrationNumber
    def set_TaxRegistrationNumber(self, TaxRegistrationNumber): self.TaxRegistrationNumber = TaxRegistrationNumber
    def get_CurrencyRef(self): return self.CurrencyRef
    def set_CurrencyRef(self, CurrencyRef): self.CurrencyRef = CurrencyRef
    def export(self, outfile, level, namespace_='', name_='CustomerAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_, eol_))
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.Suffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuffix>%s</%sSuffix>%s' % (namespace_, self.gds_format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        for ShipToAddress_ in self.ShipToAddress:
            ShipToAddress_.export(outfile, level, namespace_, name_='ShipToAddress', pretty_print=pretty_print)
        if self.PrintAs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintAs>%s</%sPrintAs>%s' % (namespace_, self.gds_format_string(quote_xml(self.PrintAs).encode(ExternalEncoding), input_name='PrintAs'), namespace_, eol_))
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.Phone).encode(ExternalEncoding), input_name='Phone'), namespace_, eol_))
        if self.Mobile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMobile>%s</%sMobile>%s' % (namespace_, self.gds_format_string(quote_xml(self.Mobile).encode(ExternalEncoding), input_name='Mobile'), namespace_, eol_))
        if self.Pager is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPager>%s</%sPager>%s' % (namespace_, self.gds_format_string(quote_xml(self.Pager).encode(ExternalEncoding), input_name='Pager'), namespace_, eol_))
        if self.AltPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltPhone>%s</%sAltPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltPhone).encode(ExternalEncoding), input_name='AltPhone'), namespace_, eol_))
        if self.Fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fax).encode(ExternalEncoding), input_name='Fax'), namespace_, eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespace_, self.gds_format_string(quote_xml(self.Email).encode(ExternalEncoding), input_name='Email'), namespace_, eol_))
        if self.Cc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCc>%s</%sCc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cc).encode(ExternalEncoding), input_name='Cc'), namespace_, eol_))
        if self.Contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContact>%s</%sContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.Contact).encode(ExternalEncoding), input_name='Contact'), namespace_, eol_))
        if self.AltContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltContact>%s</%sAltContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltContact).encode(ExternalEncoding), input_name='AltContact'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
        for Contacts_ in self.Contacts:
            Contacts_.export(outfile, level, namespace_, name_='Contacts', pretty_print=pretty_print)
        if self.CustomerTypeRef is not None:
            self.CustomerTypeRef.export(outfile, level, namespace_, name_='CustomerTypeRef', pretty_print=pretty_print)
        if self.TermsRef is not None:
            self.TermsRef.export(outfile, level, namespace_, name_='TermsRef', pretty_print=pretty_print)
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.OpenBalance is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpenBalance>%s</%sOpenBalance>%s' % (namespace_, self.gds_format_string(quote_xml(self.OpenBalance).encode(ExternalEncoding), input_name='OpenBalance'), namespace_, eol_))
        if self.OpenBalanceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOpenBalanceDate>%s</%sOpenBalanceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.OpenBalanceDate).encode(ExternalEncoding), input_name='OpenBalanceDate'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.SalesTaxCountry is not None:
            self.SalesTaxCountry.export(outfile, level, namespace_, name_='SalesTaxCountry', pretty_print=pretty_print)
        if self.ResaleNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResaleNumber>%s</%sResaleNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ResaleNumber).encode(ExternalEncoding), input_name='ResaleNumber'), namespace_, eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_, eol_))
        if self.CreditLimit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditLimit>%s</%sCreditLimit>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditLimit).encode(ExternalEncoding), input_name='CreditLimit'), namespace_, eol_))
        if self.PreferredPaymentMethodRef is not None:
            self.PreferredPaymentMethodRef.export(outfile, level, namespace_, name_='PreferredPaymentMethodRef', pretty_print=pretty_print)
        if self.CreditCardInfo is not None:
            self.CreditCardInfo.export(outfile, level, namespace_, name_='CreditCardInfo', pretty_print=pretty_print)
        if self.JobStatus is not None:
            self.JobStatus.export(outfile, level, namespace_, name_='JobStatus', pretty_print=pretty_print)
        if self.JobStartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobStartDate>%s</%sJobStartDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobStartDate).encode(ExternalEncoding), input_name='JobStartDate'), namespace_, eol_))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobProjectedEndDate>%s</%sJobProjectedEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobProjectedEndDate).encode(ExternalEncoding), input_name='JobProjectedEndDate'), namespace_, eol_))
        if self.JobEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobEndDate>%s</%sJobEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobEndDate).encode(ExternalEncoding), input_name='JobEndDate'), namespace_, eol_))
        if self.JobDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobDesc>%s</%sJobDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobDesc).encode(ExternalEncoding), input_name='JobDesc'), namespace_, eol_))
        if self.JobTypeRef is not None:
            self.JobTypeRef.export(outfile, level, namespace_, name_='JobTypeRef', pretty_print=pretty_print)
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespace_, self.gds_format_string(quote_xml(self.Notes).encode(ExternalEncoding), input_name='Notes'), namespace_, eol_))
        for AdditionalNotes_ in self.AdditionalNotes:
            AdditionalNotes_.export(outfile, level, namespace_, name_='AdditionalNotes', pretty_print=pretty_print)
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsStatementWithParent>%s</%sIsStatementWithParent>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsStatementWithParent).encode(ExternalEncoding), input_name='IsStatementWithParent'), namespace_, eol_))
        if self.DeliveryMethod is not None:
            self.DeliveryMethod.export(outfile, level, namespace_, name_='DeliveryMethod', pretty_print=pretty_print)
        if self.PreferredDeliveryMethod is not None:
            self.PreferredDeliveryMethod.export(outfile, level, namespace_, name_='PreferredDeliveryMethod', pretty_print=pretty_print)
        if self.PriceLevelRef is not None:
            self.PriceLevelRef.export(outfile, level, namespace_, name_='PriceLevelRef', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRegistrationNumber>%s</%sTaxRegistrationNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxRegistrationNumber).encode(ExternalEncoding), input_name='TaxRegistrationNumber'), namespace_, eol_))
        if self.CurrencyRef is not None:
            self.CurrencyRef.export(outfile, level, namespace_, name_='CurrencyRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Name is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.CompanyName is not None or
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.Suffix is not None or
            self.JobTitle is not None or
            self.BillAddress is not None or
            self.ShipAddress is not None or
            self.ShipToAddress or
            self.PrintAs is not None or
            self.Phone is not None or
            self.Mobile is not None or
            self.Pager is not None or
            self.AltPhone is not None or
            self.Fax is not None or
            self.Email is not None or
            self.Cc is not None or
            self.Contact is not None or
            self.AltContact is not None or
            self.AdditionalContactRef or
            self.Contacts or
            self.CustomerTypeRef is not None or
            self.TermsRef is not None or
            self.SalesRepRef is not None or
            self.OpenBalance is not None or
            self.OpenBalanceDate is not None or
            self.SalesTaxCodeRef is not None or
            self.ItemSalesTaxRef is not None or
            self.SalesTaxCountry is not None or
            self.ResaleNumber is not None or
            self.AccountNumber is not None or
            self.CreditLimit is not None or
            self.PreferredPaymentMethodRef is not None or
            self.CreditCardInfo is not None or
            self.JobStatus is not None or
            self.JobStartDate is not None or
            self.JobProjectedEndDate is not None or
            self.JobEndDate is not None or
            self.JobDesc is not None or
            self.JobTypeRef is not None or
            self.Notes is not None or
            self.AdditionalNotes or
            self.IsStatementWithParent is not None or
            self.DeliveryMethod is not None or
            self.PreferredDeliveryMethod is not None or
            self.PriceLevelRef is not None or
            self.ExternalGUID is not None or
            self.TaxRegistrationNumber is not None or
            self.CurrencyRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ShipToAddress=[\n')
        level += 1
        for ShipToAddress_ in self.ShipToAddress:
            showIndent(outfile, level)
            outfile.write('model_.ShipToAddress(\n')
            ShipToAddress_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.PrintAs is not None:
            showIndent(outfile, level)
            outfile.write('PrintAs=%s,\n' % quote_python(self.PrintAs).encode(ExternalEncoding))
        if self.Phone is not None:
            showIndent(outfile, level)
            outfile.write('Phone=%s,\n' % quote_python(self.Phone).encode(ExternalEncoding))
        if self.Mobile is not None:
            showIndent(outfile, level)
            outfile.write('Mobile=%s,\n' % quote_python(self.Mobile).encode(ExternalEncoding))
        if self.Pager is not None:
            showIndent(outfile, level)
            outfile.write('Pager=%s,\n' % quote_python(self.Pager).encode(ExternalEncoding))
        if self.AltPhone is not None:
            showIndent(outfile, level)
            outfile.write('AltPhone=%s,\n' % quote_python(self.AltPhone).encode(ExternalEncoding))
        if self.Fax is not None:
            showIndent(outfile, level)
            outfile.write('Fax=%s,\n' % quote_python(self.Fax).encode(ExternalEncoding))
        if self.Email is not None:
            showIndent(outfile, level)
            outfile.write('Email=%s,\n' % quote_python(self.Email).encode(ExternalEncoding))
        if self.Cc is not None:
            showIndent(outfile, level)
            outfile.write('Cc=%s,\n' % quote_python(self.Cc).encode(ExternalEncoding))
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=%s,\n' % quote_python(self.Contact).encode(ExternalEncoding))
        if self.AltContact is not None:
            showIndent(outfile, level)
            outfile.write('AltContact=%s,\n' % quote_python(self.AltContact).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('Contacts=[\n')
        level += 1
        for Contacts_ in self.Contacts:
            showIndent(outfile, level)
            outfile.write('model_.Contacts(\n')
            Contacts_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CustomerTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTypeRef=model_.CustomerTypeRef(\n')
            self.CustomerTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TermsRef is not None:
            showIndent(outfile, level)
            outfile.write('TermsRef=model_.TermsRef(\n')
            self.TermsRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OpenBalance is not None:
            showIndent(outfile, level)
            outfile.write('OpenBalance=%s,\n' % quote_python(self.OpenBalance).encode(ExternalEncoding))
        if self.OpenBalanceDate is not None:
            showIndent(outfile, level)
            outfile.write('OpenBalanceDate=%s,\n' % quote_python(self.OpenBalanceDate).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxCountry is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCountry=model_.SalesTaxCountry(\n')
            self.SalesTaxCountry.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ResaleNumber is not None:
            showIndent(outfile, level)
            outfile.write('ResaleNumber=%s,\n' % quote_python(self.ResaleNumber).encode(ExternalEncoding))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.CreditLimit is not None:
            showIndent(outfile, level)
            outfile.write('CreditLimit=%s,\n' % quote_python(self.CreditLimit).encode(ExternalEncoding))
        if self.PreferredPaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PreferredPaymentMethodRef=model_.PreferredPaymentMethodRef(\n')
            self.PreferredPaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardInfo=model_.CreditCardInfo(\n')
            self.CreditCardInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStatus is not None:
            showIndent(outfile, level)
            outfile.write('JobStatus=model_.JobStatus(\n')
            self.JobStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStartDate is not None:
            showIndent(outfile, level)
            outfile.write('JobStartDate=%s,\n' % quote_python(self.JobStartDate).encode(ExternalEncoding))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobProjectedEndDate=%s,\n' % quote_python(self.JobProjectedEndDate).encode(ExternalEncoding))
        if self.JobEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobEndDate=%s,\n' % quote_python(self.JobEndDate).encode(ExternalEncoding))
        if self.JobDesc is not None:
            showIndent(outfile, level)
            outfile.write('JobDesc=%s,\n' % quote_python(self.JobDesc).encode(ExternalEncoding))
        if self.JobTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('JobTypeRef=model_.JobTypeRef(\n')
            self.JobTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Notes is not None:
            showIndent(outfile, level)
            outfile.write('Notes=%s,\n' % quote_python(self.Notes).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalNotes=[\n')
        level += 1
        for AdditionalNotes_ in self.AdditionalNotes:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalNotes(\n')
            AdditionalNotes_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level)
            outfile.write('IsStatementWithParent=%s,\n' % quote_python(self.IsStatementWithParent).encode(ExternalEncoding))
        if self.DeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryMethod=model_.DeliveryMethod(\n')
            self.DeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PreferredDeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('PreferredDeliveryMethod=model_.PreferredDeliveryMethod(\n')
            self.PreferredDeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PriceLevelRef is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelRef=model_.PriceLevelRef(\n')
            self.PriceLevelRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level)
            outfile.write('TaxRegistrationNumber=%s,\n' % quote_python(self.TaxRegistrationNumber).encode(ExternalEncoding))
        if self.CurrencyRef is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyRef=model_.CurrencyRef(\n')
            self.CurrencyRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'Suffix':
            Suffix_ = child_.text
            Suffix_ = self.gds_validate_string(Suffix_, node, 'Suffix')
            self.Suffix = Suffix_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'ShipToAddress':
            obj_ = ShipToAddress.factory()
            obj_.build(child_)
            self.ShipToAddress.append(obj_)
        elif nodeName_ == 'PrintAs':
            PrintAs_ = child_.text
            PrintAs_ = self.gds_validate_string(PrintAs_, node, 'PrintAs')
            self.PrintAs = PrintAs_
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Mobile':
            Mobile_ = child_.text
            Mobile_ = self.gds_validate_string(Mobile_, node, 'Mobile')
            self.Mobile = Mobile_
        elif nodeName_ == 'Pager':
            Pager_ = child_.text
            Pager_ = self.gds_validate_string(Pager_, node, 'Pager')
            self.Pager = Pager_
        elif nodeName_ == 'AltPhone':
            AltPhone_ = child_.text
            AltPhone_ = self.gds_validate_string(AltPhone_, node, 'AltPhone')
            self.AltPhone = AltPhone_
        elif nodeName_ == 'Fax':
            Fax_ = child_.text
            Fax_ = self.gds_validate_string(Fax_, node, 'Fax')
            self.Fax = Fax_
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
        elif nodeName_ == 'Cc':
            Cc_ = child_.text
            Cc_ = self.gds_validate_string(Cc_, node, 'Cc')
            self.Cc = Cc_
        elif nodeName_ == 'Contact':
            Contact_ = child_.text
            Contact_ = self.gds_validate_string(Contact_, node, 'Contact')
            self.Contact = Contact_
        elif nodeName_ == 'AltContact':
            AltContact_ = child_.text
            AltContact_ = self.gds_validate_string(AltContact_, node, 'AltContact')
            self.AltContact = AltContact_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
        elif nodeName_ == 'Contacts':
            obj_ = Contacts.factory()
            obj_.build(child_)
            self.Contacts.append(obj_)
        elif nodeName_ == 'CustomerTypeRef':
            obj_ = CustomerTypeRef.factory()
            obj_.build(child_)
            self.set_CustomerTypeRef(obj_)
        elif nodeName_ == 'TermsRef':
            obj_ = TermsRef.factory()
            obj_.build(child_)
            self.set_TermsRef(obj_)
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'OpenBalance':
            OpenBalance_ = child_.text
            OpenBalance_ = self.gds_validate_string(OpenBalance_, node, 'OpenBalance')
            self.OpenBalance = OpenBalance_
        elif nodeName_ == 'OpenBalanceDate':
            OpenBalanceDate_ = child_.text
            OpenBalanceDate_ = re_.sub(String_cleanup_pat_, " ", OpenBalanceDate_).strip()
            OpenBalanceDate_ = self.gds_validate_string(OpenBalanceDate_, node, 'OpenBalanceDate')
            self.OpenBalanceDate = OpenBalanceDate_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'SalesTaxCountry':
            obj_ = None
            self.set_SalesTaxCountry(obj_)
            self.validate_SalesTaxCountry(self.SalesTaxCountry)    # validate type SalesTaxCountry
        elif nodeName_ == 'ResaleNumber':
            ResaleNumber_ = child_.text
            ResaleNumber_ = self.gds_validate_string(ResaleNumber_, node, 'ResaleNumber')
            self.ResaleNumber = ResaleNumber_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'CreditLimit':
            CreditLimit_ = child_.text
            CreditLimit_ = self.gds_validate_string(CreditLimit_, node, 'CreditLimit')
            self.CreditLimit = CreditLimit_
        elif nodeName_ == 'PreferredPaymentMethodRef':
            obj_ = PreferredPaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PreferredPaymentMethodRef(obj_)
        elif nodeName_ == 'CreditCardInfo':
            obj_ = CreditCardInfo.factory()
            obj_.build(child_)
            self.set_CreditCardInfo(obj_)
        elif nodeName_ == 'JobStatus':
            obj_ = None
            self.set_JobStatus(obj_)
            self.validate_JobStatus(self.JobStatus)    # validate type JobStatus
        elif nodeName_ == 'JobStartDate':
            JobStartDate_ = child_.text
            JobStartDate_ = re_.sub(String_cleanup_pat_, " ", JobStartDate_).strip()
            JobStartDate_ = self.gds_validate_string(JobStartDate_, node, 'JobStartDate')
            self.JobStartDate = JobStartDate_
        elif nodeName_ == 'JobProjectedEndDate':
            JobProjectedEndDate_ = child_.text
            JobProjectedEndDate_ = re_.sub(String_cleanup_pat_, " ", JobProjectedEndDate_).strip()
            JobProjectedEndDate_ = self.gds_validate_string(JobProjectedEndDate_, node, 'JobProjectedEndDate')
            self.JobProjectedEndDate = JobProjectedEndDate_
        elif nodeName_ == 'JobEndDate':
            JobEndDate_ = child_.text
            JobEndDate_ = re_.sub(String_cleanup_pat_, " ", JobEndDate_).strip()
            JobEndDate_ = self.gds_validate_string(JobEndDate_, node, 'JobEndDate')
            self.JobEndDate = JobEndDate_
        elif nodeName_ == 'JobDesc':
            JobDesc_ = child_.text
            JobDesc_ = self.gds_validate_string(JobDesc_, node, 'JobDesc')
            self.JobDesc = JobDesc_
        elif nodeName_ == 'JobTypeRef':
            obj_ = JobTypeRef.factory()
            obj_.build(child_)
            self.set_JobTypeRef(obj_)
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'AdditionalNotes':
            obj_ = AdditionalNotes.factory()
            obj_.build(child_)
            self.AdditionalNotes.append(obj_)
        elif nodeName_ == 'IsStatementWithParent':
            IsStatementWithParent_ = child_.text
            IsStatementWithParent_ = re_.sub(String_cleanup_pat_, " ", IsStatementWithParent_).strip()
            IsStatementWithParent_ = self.gds_validate_string(IsStatementWithParent_, node, 'IsStatementWithParent')
            self.IsStatementWithParent = IsStatementWithParent_
        elif nodeName_ == 'DeliveryMethod':
            obj_ = None
            self.set_DeliveryMethod(obj_)
            self.validate_DeliveryMethod(self.DeliveryMethod)    # validate type DeliveryMethod
        elif nodeName_ == 'PreferredDeliveryMethod':
            obj_ = None
            self.set_PreferredDeliveryMethod(obj_)
            self.validate_PreferredDeliveryMethod(self.PreferredDeliveryMethod)    # validate type PreferredDeliveryMethod
        elif nodeName_ == 'PriceLevelRef':
            obj_ = PriceLevelRef.factory()
            obj_.build(child_)
            self.set_PriceLevelRef(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'TaxRegistrationNumber':
            TaxRegistrationNumber_ = child_.text
            TaxRegistrationNumber_ = self.gds_validate_string(TaxRegistrationNumber_, node, 'TaxRegistrationNumber')
            self.TaxRegistrationNumber = TaxRegistrationNumber_
        elif nodeName_ == 'CurrencyRef':
            obj_ = CurrencyRef.factory()
            obj_.build(child_)
            self.set_CurrencyRef(obj_)
# end class CustomerAdd


class CustomerMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, EditSequence=None, Name=None, IsActive=None, ClassRef=None, ParentRef=None, CompanyName=None, Salutation=None, FirstName=None, MiddleName=None, LastName=None, Suffix=None, JobTitle=None, BillAddress=None, ShipAddress=None, ShipToAddress=None, PrintAs=None, Phone=None, Mobile=None, Pager=None, AltPhone=None, Fax=None, Email=None, Cc=None, Contact=None, AltContact=None, AdditionalContactRef=None, ContactsMod=None, CustomerTypeRef=None, TermsRef=None, SalesRepRef=None, SalesTaxCodeRef=None, ItemSalesTaxRef=None, SalesTaxCountry=None, ResaleNumber=None, AccountNumber=None, CreditLimit=None, PreferredPaymentMethodRef=None, CreditCardInfo=None, JobStatus=None, JobStartDate=None, JobProjectedEndDate=None, JobEndDate=None, JobDesc=None, JobTypeRef=None, Notes=None, AdditionalNotesMod=None, IsStatementWithParent=None, DeliveryMethod=None, PreferredDeliveryMethod=None, PriceLevelRef=None, TaxRegistrationNumber=None, CurrencyRef=None):
        self.ListID = ListID
        self.EditSequence = EditSequence
        self.Name = Name
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.CompanyName = CompanyName
        self.Salutation = Salutation
        self.FirstName = FirstName
        self.MiddleName = MiddleName
        self.LastName = LastName
        self.Suffix = Suffix
        self.JobTitle = JobTitle
        self.BillAddress = BillAddress
        self.ShipAddress = ShipAddress
        if ShipToAddress is None:
            self.ShipToAddress = []
        else:
            self.ShipToAddress = ShipToAddress
        self.PrintAs = PrintAs
        self.Phone = Phone
        self.Mobile = Mobile
        self.Pager = Pager
        self.AltPhone = AltPhone
        self.Fax = Fax
        self.Email = Email
        self.Cc = Cc
        self.Contact = Contact
        self.AltContact = AltContact
        if AdditionalContactRef is None:
            self.AdditionalContactRef = []
        else:
            self.AdditionalContactRef = AdditionalContactRef
        if ContactsMod is None:
            self.ContactsMod = []
        else:
            self.ContactsMod = ContactsMod
        self.CustomerTypeRef = CustomerTypeRef
        self.TermsRef = TermsRef
        self.SalesRepRef = SalesRepRef
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.SalesTaxCountry = SalesTaxCountry
        self.ResaleNumber = ResaleNumber
        self.AccountNumber = AccountNumber
        self.CreditLimit = CreditLimit
        self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
        self.CreditCardInfo = CreditCardInfo
        self.JobStatus = JobStatus
        self.JobStartDate = JobStartDate
        self.JobProjectedEndDate = JobProjectedEndDate
        self.JobEndDate = JobEndDate
        self.JobDesc = JobDesc
        self.JobTypeRef = JobTypeRef
        self.Notes = Notes
        if AdditionalNotesMod is None:
            self.AdditionalNotesMod = []
        else:
            self.AdditionalNotesMod = AdditionalNotesMod
        self.IsStatementWithParent = IsStatementWithParent
        self.DeliveryMethod = DeliveryMethod
        self.PreferredDeliveryMethod = PreferredDeliveryMethod
        self.PriceLevelRef = PriceLevelRef
        self.TaxRegistrationNumber = TaxRegistrationNumber
        self.CurrencyRef = CurrencyRef
    def factory(*args_, **kwargs_):
        if CustomerMod.subclass:
            return CustomerMod.subclass(*args_, **kwargs_)
        else:
            return CustomerMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_CompanyName(self): return self.CompanyName
    def set_CompanyName(self, CompanyName): self.CompanyName = CompanyName
    def get_Salutation(self): return self.Salutation
    def set_Salutation(self, Salutation): self.Salutation = Salutation
    def get_FirstName(self): return self.FirstName
    def set_FirstName(self, FirstName): self.FirstName = FirstName
    def get_MiddleName(self): return self.MiddleName
    def set_MiddleName(self, MiddleName): self.MiddleName = MiddleName
    def get_LastName(self): return self.LastName
    def set_LastName(self, LastName): self.LastName = LastName
    def get_Suffix(self): return self.Suffix
    def set_Suffix(self, Suffix): self.Suffix = Suffix
    def get_JobTitle(self): return self.JobTitle
    def set_JobTitle(self, JobTitle): self.JobTitle = JobTitle
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_ShipToAddress(self): return self.ShipToAddress
    def set_ShipToAddress(self, ShipToAddress): self.ShipToAddress = ShipToAddress
    def add_ShipToAddress(self, value): self.ShipToAddress.append(value)
    def insert_ShipToAddress(self, index, value): self.ShipToAddress[index] = value
    def get_PrintAs(self): return self.PrintAs
    def set_PrintAs(self, PrintAs): self.PrintAs = PrintAs
    def get_Phone(self): return self.Phone
    def set_Phone(self, Phone): self.Phone = Phone
    def get_Mobile(self): return self.Mobile
    def set_Mobile(self, Mobile): self.Mobile = Mobile
    def get_Pager(self): return self.Pager
    def set_Pager(self, Pager): self.Pager = Pager
    def get_AltPhone(self): return self.AltPhone
    def set_AltPhone(self, AltPhone): self.AltPhone = AltPhone
    def get_Fax(self): return self.Fax
    def set_Fax(self, Fax): self.Fax = Fax
    def get_Email(self): return self.Email
    def set_Email(self, Email): self.Email = Email
    def get_Cc(self): return self.Cc
    def set_Cc(self, Cc): self.Cc = Cc
    def get_Contact(self): return self.Contact
    def set_Contact(self, Contact): self.Contact = Contact
    def get_AltContact(self): return self.AltContact
    def set_AltContact(self, AltContact): self.AltContact = AltContact
    def get_AdditionalContactRef(self): return self.AdditionalContactRef
    def set_AdditionalContactRef(self, AdditionalContactRef): self.AdditionalContactRef = AdditionalContactRef
    def add_AdditionalContactRef(self, value): self.AdditionalContactRef.append(value)
    def insert_AdditionalContactRef(self, index, value): self.AdditionalContactRef[index] = value
    def get_ContactsMod(self): return self.ContactsMod
    def set_ContactsMod(self, ContactsMod): self.ContactsMod = ContactsMod
    def add_ContactsMod(self, value): self.ContactsMod.append(value)
    def insert_ContactsMod(self, index, value): self.ContactsMod[index] = value
    def get_CustomerTypeRef(self): return self.CustomerTypeRef
    def set_CustomerTypeRef(self, CustomerTypeRef): self.CustomerTypeRef = CustomerTypeRef
    def get_TermsRef(self): return self.TermsRef
    def set_TermsRef(self, TermsRef): self.TermsRef = TermsRef
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_SalesTaxCountry(self): return self.SalesTaxCountry
    def set_SalesTaxCountry(self, SalesTaxCountry): self.SalesTaxCountry = SalesTaxCountry
    def validate_SalesTaxCountry(self, value):
        # Validate type SalesTaxCountry, a restriction on ENUMTYPE.
        pass
    def get_ResaleNumber(self): return self.ResaleNumber
    def set_ResaleNumber(self, ResaleNumber): self.ResaleNumber = ResaleNumber
    def get_AccountNumber(self): return self.AccountNumber
    def set_AccountNumber(self, AccountNumber): self.AccountNumber = AccountNumber
    def get_CreditLimit(self): return self.CreditLimit
    def set_CreditLimit(self, CreditLimit): self.CreditLimit = CreditLimit
    def get_PreferredPaymentMethodRef(self): return self.PreferredPaymentMethodRef
    def set_PreferredPaymentMethodRef(self, PreferredPaymentMethodRef): self.PreferredPaymentMethodRef = PreferredPaymentMethodRef
    def get_CreditCardInfo(self): return self.CreditCardInfo
    def set_CreditCardInfo(self, CreditCardInfo): self.CreditCardInfo = CreditCardInfo
    def get_JobStatus(self): return self.JobStatus
    def set_JobStatus(self, JobStatus): self.JobStatus = JobStatus
    def validate_JobStatus(self, value):
        # Validate type JobStatus, a restriction on ENUMTYPE.
        pass
    def get_JobStartDate(self): return self.JobStartDate
    def set_JobStartDate(self, JobStartDate): self.JobStartDate = JobStartDate
    def get_JobProjectedEndDate(self): return self.JobProjectedEndDate
    def set_JobProjectedEndDate(self, JobProjectedEndDate): self.JobProjectedEndDate = JobProjectedEndDate
    def get_JobEndDate(self): return self.JobEndDate
    def set_JobEndDate(self, JobEndDate): self.JobEndDate = JobEndDate
    def get_JobDesc(self): return self.JobDesc
    def set_JobDesc(self, JobDesc): self.JobDesc = JobDesc
    def get_JobTypeRef(self): return self.JobTypeRef
    def set_JobTypeRef(self, JobTypeRef): self.JobTypeRef = JobTypeRef
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_AdditionalNotesMod(self): return self.AdditionalNotesMod
    def set_AdditionalNotesMod(self, AdditionalNotesMod): self.AdditionalNotesMod = AdditionalNotesMod
    def add_AdditionalNotesMod(self, value): self.AdditionalNotesMod.append(value)
    def insert_AdditionalNotesMod(self, index, value): self.AdditionalNotesMod[index] = value
    def get_IsStatementWithParent(self): return self.IsStatementWithParent
    def set_IsStatementWithParent(self, IsStatementWithParent): self.IsStatementWithParent = IsStatementWithParent
    def get_DeliveryMethod(self): return self.DeliveryMethod
    def set_DeliveryMethod(self, DeliveryMethod): self.DeliveryMethod = DeliveryMethod
    def validate_DeliveryMethod(self, value):
        # Validate type DeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PreferredDeliveryMethod(self): return self.PreferredDeliveryMethod
    def set_PreferredDeliveryMethod(self, PreferredDeliveryMethod): self.PreferredDeliveryMethod = PreferredDeliveryMethod
    def validate_PreferredDeliveryMethod(self, value):
        # Validate type PreferredDeliveryMethod, a restriction on ENUMTYPE.
        pass
    def get_PriceLevelRef(self): return self.PriceLevelRef
    def set_PriceLevelRef(self, PriceLevelRef): self.PriceLevelRef = PriceLevelRef
    def get_TaxRegistrationNumber(self): return self.TaxRegistrationNumber
    def set_TaxRegistrationNumber(self, TaxRegistrationNumber): self.TaxRegistrationNumber = TaxRegistrationNumber
    def get_CurrencyRef(self): return self.CurrencyRef
    def set_CurrencyRef(self, CurrencyRef): self.CurrencyRef = CurrencyRef
    def export(self, outfile, level, namespace_='', name_='CustomerMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CustomerMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CustomerMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CustomerMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.CompanyName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompanyName>%s</%sCompanyName>%s' % (namespace_, self.gds_format_string(quote_xml(self.CompanyName).encode(ExternalEncoding), input_name='CompanyName'), namespace_, eol_))
        if self.Salutation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalutation>%s</%sSalutation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Salutation).encode(ExternalEncoding), input_name='Salutation'), namespace_, eol_))
        if self.FirstName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFirstName>%s</%sFirstName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FirstName).encode(ExternalEncoding), input_name='FirstName'), namespace_, eol_))
        if self.MiddleName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMiddleName>%s</%sMiddleName>%s' % (namespace_, self.gds_format_string(quote_xml(self.MiddleName).encode(ExternalEncoding), input_name='MiddleName'), namespace_, eol_))
        if self.LastName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLastName>%s</%sLastName>%s' % (namespace_, self.gds_format_string(quote_xml(self.LastName).encode(ExternalEncoding), input_name='LastName'), namespace_, eol_))
        if self.Suffix is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSuffix>%s</%sSuffix>%s' % (namespace_, self.gds_format_string(quote_xml(self.Suffix).encode(ExternalEncoding), input_name='Suffix'), namespace_, eol_))
        if self.JobTitle is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobTitle>%s</%sJobTitle>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobTitle).encode(ExternalEncoding), input_name='JobTitle'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        for ShipToAddress_ in self.ShipToAddress:
            ShipToAddress_.export(outfile, level, namespace_, name_='ShipToAddress', pretty_print=pretty_print)
        if self.PrintAs is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrintAs>%s</%sPrintAs>%s' % (namespace_, self.gds_format_string(quote_xml(self.PrintAs).encode(ExternalEncoding), input_name='PrintAs'), namespace_, eol_))
        if self.Phone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPhone>%s</%sPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.Phone).encode(ExternalEncoding), input_name='Phone'), namespace_, eol_))
        if self.Mobile is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMobile>%s</%sMobile>%s' % (namespace_, self.gds_format_string(quote_xml(self.Mobile).encode(ExternalEncoding), input_name='Mobile'), namespace_, eol_))
        if self.Pager is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPager>%s</%sPager>%s' % (namespace_, self.gds_format_string(quote_xml(self.Pager).encode(ExternalEncoding), input_name='Pager'), namespace_, eol_))
        if self.AltPhone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltPhone>%s</%sAltPhone>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltPhone).encode(ExternalEncoding), input_name='AltPhone'), namespace_, eol_))
        if self.Fax is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFax>%s</%sFax>%s' % (namespace_, self.gds_format_string(quote_xml(self.Fax).encode(ExternalEncoding), input_name='Fax'), namespace_, eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespace_, self.gds_format_string(quote_xml(self.Email).encode(ExternalEncoding), input_name='Email'), namespace_, eol_))
        if self.Cc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCc>%s</%sCc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Cc).encode(ExternalEncoding), input_name='Cc'), namespace_, eol_))
        if self.Contact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sContact>%s</%sContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.Contact).encode(ExternalEncoding), input_name='Contact'), namespace_, eol_))
        if self.AltContact is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAltContact>%s</%sAltContact>%s' % (namespace_, self.gds_format_string(quote_xml(self.AltContact).encode(ExternalEncoding), input_name='AltContact'), namespace_, eol_))
        for AdditionalContactRef_ in self.AdditionalContactRef:
            AdditionalContactRef_.export(outfile, level, namespace_, name_='AdditionalContactRef', pretty_print=pretty_print)
        for ContactsMod_ in self.ContactsMod:
            ContactsMod_.export(outfile, level, namespace_, name_='ContactsMod', pretty_print=pretty_print)
        if self.CustomerTypeRef is not None:
            self.CustomerTypeRef.export(outfile, level, namespace_, name_='CustomerTypeRef', pretty_print=pretty_print)
        if self.TermsRef is not None:
            self.TermsRef.export(outfile, level, namespace_, name_='TermsRef', pretty_print=pretty_print)
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.SalesTaxCountry is not None:
            self.SalesTaxCountry.export(outfile, level, namespace_, name_='SalesTaxCountry', pretty_print=pretty_print)
        if self.ResaleNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sResaleNumber>%s</%sResaleNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ResaleNumber).encode(ExternalEncoding), input_name='ResaleNumber'), namespace_, eol_))
        if self.AccountNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAccountNumber>%s</%sAccountNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.AccountNumber).encode(ExternalEncoding), input_name='AccountNumber'), namespace_, eol_))
        if self.CreditLimit is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCreditLimit>%s</%sCreditLimit>%s' % (namespace_, self.gds_format_string(quote_xml(self.CreditLimit).encode(ExternalEncoding), input_name='CreditLimit'), namespace_, eol_))
        if self.PreferredPaymentMethodRef is not None:
            self.PreferredPaymentMethodRef.export(outfile, level, namespace_, name_='PreferredPaymentMethodRef', pretty_print=pretty_print)
        if self.CreditCardInfo is not None:
            self.CreditCardInfo.export(outfile, level, namespace_, name_='CreditCardInfo', pretty_print=pretty_print)
        if self.JobStatus is not None:
            self.JobStatus.export(outfile, level, namespace_, name_='JobStatus', pretty_print=pretty_print)
        if self.JobStartDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobStartDate>%s</%sJobStartDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobStartDate).encode(ExternalEncoding), input_name='JobStartDate'), namespace_, eol_))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobProjectedEndDate>%s</%sJobProjectedEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobProjectedEndDate).encode(ExternalEncoding), input_name='JobProjectedEndDate'), namespace_, eol_))
        if self.JobEndDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobEndDate>%s</%sJobEndDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobEndDate).encode(ExternalEncoding), input_name='JobEndDate'), namespace_, eol_))
        if self.JobDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJobDesc>%s</%sJobDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.JobDesc).encode(ExternalEncoding), input_name='JobDesc'), namespace_, eol_))
        if self.JobTypeRef is not None:
            self.JobTypeRef.export(outfile, level, namespace_, name_='JobTypeRef', pretty_print=pretty_print)
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespace_, self.gds_format_string(quote_xml(self.Notes).encode(ExternalEncoding), input_name='Notes'), namespace_, eol_))
        for AdditionalNotesMod_ in self.AdditionalNotesMod:
            AdditionalNotesMod_.export(outfile, level, namespace_, name_='AdditionalNotesMod', pretty_print=pretty_print)
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsStatementWithParent>%s</%sIsStatementWithParent>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsStatementWithParent).encode(ExternalEncoding), input_name='IsStatementWithParent'), namespace_, eol_))
        if self.DeliveryMethod is not None:
            self.DeliveryMethod.export(outfile, level, namespace_, name_='DeliveryMethod', pretty_print=pretty_print)
        if self.PreferredDeliveryMethod is not None:
            self.PreferredDeliveryMethod.export(outfile, level, namespace_, name_='PreferredDeliveryMethod', pretty_print=pretty_print)
        if self.PriceLevelRef is not None:
            self.PriceLevelRef.export(outfile, level, namespace_, name_='PriceLevelRef', pretty_print=pretty_print)
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRegistrationNumber>%s</%sTaxRegistrationNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxRegistrationNumber).encode(ExternalEncoding), input_name='TaxRegistrationNumber'), namespace_, eol_))
        if self.CurrencyRef is not None:
            self.CurrencyRef.export(outfile, level, namespace_, name_='CurrencyRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.CompanyName is not None or
            self.Salutation is not None or
            self.FirstName is not None or
            self.MiddleName is not None or
            self.LastName is not None or
            self.Suffix is not None or
            self.JobTitle is not None or
            self.BillAddress is not None or
            self.ShipAddress is not None or
            self.ShipToAddress or
            self.PrintAs is not None or
            self.Phone is not None or
            self.Mobile is not None or
            self.Pager is not None or
            self.AltPhone is not None or
            self.Fax is not None or
            self.Email is not None or
            self.Cc is not None or
            self.Contact is not None or
            self.AltContact is not None or
            self.AdditionalContactRef or
            self.ContactsMod or
            self.CustomerTypeRef is not None or
            self.TermsRef is not None or
            self.SalesRepRef is not None or
            self.SalesTaxCodeRef is not None or
            self.ItemSalesTaxRef is not None or
            self.SalesTaxCountry is not None or
            self.ResaleNumber is not None or
            self.AccountNumber is not None or
            self.CreditLimit is not None or
            self.PreferredPaymentMethodRef is not None or
            self.CreditCardInfo is not None or
            self.JobStatus is not None or
            self.JobStartDate is not None or
            self.JobProjectedEndDate is not None or
            self.JobEndDate is not None or
            self.JobDesc is not None or
            self.JobTypeRef is not None or
            self.Notes is not None or
            self.AdditionalNotesMod or
            self.IsStatementWithParent is not None or
            self.DeliveryMethod is not None or
            self.PreferredDeliveryMethod is not None or
            self.PriceLevelRef is not None or
            self.TaxRegistrationNumber is not None or
            self.CurrencyRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CustomerMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CompanyName is not None:
            showIndent(outfile, level)
            outfile.write('CompanyName=%s,\n' % quote_python(self.CompanyName).encode(ExternalEncoding))
        if self.Salutation is not None:
            showIndent(outfile, level)
            outfile.write('Salutation=%s,\n' % quote_python(self.Salutation).encode(ExternalEncoding))
        if self.FirstName is not None:
            showIndent(outfile, level)
            outfile.write('FirstName=%s,\n' % quote_python(self.FirstName).encode(ExternalEncoding))
        if self.MiddleName is not None:
            showIndent(outfile, level)
            outfile.write('MiddleName=%s,\n' % quote_python(self.MiddleName).encode(ExternalEncoding))
        if self.LastName is not None:
            showIndent(outfile, level)
            outfile.write('LastName=%s,\n' % quote_python(self.LastName).encode(ExternalEncoding))
        if self.Suffix is not None:
            showIndent(outfile, level)
            outfile.write('Suffix=%s,\n' % quote_python(self.Suffix).encode(ExternalEncoding))
        if self.JobTitle is not None:
            showIndent(outfile, level)
            outfile.write('JobTitle=%s,\n' % quote_python(self.JobTitle).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('ShipToAddress=[\n')
        level += 1
        for ShipToAddress_ in self.ShipToAddress:
            showIndent(outfile, level)
            outfile.write('model_.ShipToAddress(\n')
            ShipToAddress_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.PrintAs is not None:
            showIndent(outfile, level)
            outfile.write('PrintAs=%s,\n' % quote_python(self.PrintAs).encode(ExternalEncoding))
        if self.Phone is not None:
            showIndent(outfile, level)
            outfile.write('Phone=%s,\n' % quote_python(self.Phone).encode(ExternalEncoding))
        if self.Mobile is not None:
            showIndent(outfile, level)
            outfile.write('Mobile=%s,\n' % quote_python(self.Mobile).encode(ExternalEncoding))
        if self.Pager is not None:
            showIndent(outfile, level)
            outfile.write('Pager=%s,\n' % quote_python(self.Pager).encode(ExternalEncoding))
        if self.AltPhone is not None:
            showIndent(outfile, level)
            outfile.write('AltPhone=%s,\n' % quote_python(self.AltPhone).encode(ExternalEncoding))
        if self.Fax is not None:
            showIndent(outfile, level)
            outfile.write('Fax=%s,\n' % quote_python(self.Fax).encode(ExternalEncoding))
        if self.Email is not None:
            showIndent(outfile, level)
            outfile.write('Email=%s,\n' % quote_python(self.Email).encode(ExternalEncoding))
        if self.Cc is not None:
            showIndent(outfile, level)
            outfile.write('Cc=%s,\n' % quote_python(self.Cc).encode(ExternalEncoding))
        if self.Contact is not None:
            showIndent(outfile, level)
            outfile.write('Contact=%s,\n' % quote_python(self.Contact).encode(ExternalEncoding))
        if self.AltContact is not None:
            showIndent(outfile, level)
            outfile.write('AltContact=%s,\n' % quote_python(self.AltContact).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalContactRef=[\n')
        level += 1
        for AdditionalContactRef_ in self.AdditionalContactRef:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalContactRef(\n')
            AdditionalContactRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('ContactsMod=[\n')
        level += 1
        for ContactsMod_ in self.ContactsMod:
            showIndent(outfile, level)
            outfile.write('model_.ContactsMod(\n')
            ContactsMod_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.CustomerTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerTypeRef=model_.CustomerTypeRef(\n')
            self.CustomerTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TermsRef is not None:
            showIndent(outfile, level)
            outfile.write('TermsRef=model_.TermsRef(\n')
            self.TermsRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxCountry is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCountry=model_.SalesTaxCountry(\n')
            self.SalesTaxCountry.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ResaleNumber is not None:
            showIndent(outfile, level)
            outfile.write('ResaleNumber=%s,\n' % quote_python(self.ResaleNumber).encode(ExternalEncoding))
        if self.AccountNumber is not None:
            showIndent(outfile, level)
            outfile.write('AccountNumber=%s,\n' % quote_python(self.AccountNumber).encode(ExternalEncoding))
        if self.CreditLimit is not None:
            showIndent(outfile, level)
            outfile.write('CreditLimit=%s,\n' % quote_python(self.CreditLimit).encode(ExternalEncoding))
        if self.PreferredPaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PreferredPaymentMethodRef=model_.PreferredPaymentMethodRef(\n')
            self.PreferredPaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardInfo=model_.CreditCardInfo(\n')
            self.CreditCardInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStatus is not None:
            showIndent(outfile, level)
            outfile.write('JobStatus=model_.JobStatus(\n')
            self.JobStatus.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.JobStartDate is not None:
            showIndent(outfile, level)
            outfile.write('JobStartDate=%s,\n' % quote_python(self.JobStartDate).encode(ExternalEncoding))
        if self.JobProjectedEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobProjectedEndDate=%s,\n' % quote_python(self.JobProjectedEndDate).encode(ExternalEncoding))
        if self.JobEndDate is not None:
            showIndent(outfile, level)
            outfile.write('JobEndDate=%s,\n' % quote_python(self.JobEndDate).encode(ExternalEncoding))
        if self.JobDesc is not None:
            showIndent(outfile, level)
            outfile.write('JobDesc=%s,\n' % quote_python(self.JobDesc).encode(ExternalEncoding))
        if self.JobTypeRef is not None:
            showIndent(outfile, level)
            outfile.write('JobTypeRef=model_.JobTypeRef(\n')
            self.JobTypeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Notes is not None:
            showIndent(outfile, level)
            outfile.write('Notes=%s,\n' % quote_python(self.Notes).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('AdditionalNotesMod=[\n')
        level += 1
        for AdditionalNotesMod_ in self.AdditionalNotesMod:
            showIndent(outfile, level)
            outfile.write('model_.AdditionalNotesMod(\n')
            AdditionalNotesMod_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.IsStatementWithParent is not None:
            showIndent(outfile, level)
            outfile.write('IsStatementWithParent=%s,\n' % quote_python(self.IsStatementWithParent).encode(ExternalEncoding))
        if self.DeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('DeliveryMethod=model_.DeliveryMethod(\n')
            self.DeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PreferredDeliveryMethod is not None:
            showIndent(outfile, level)
            outfile.write('PreferredDeliveryMethod=model_.PreferredDeliveryMethod(\n')
            self.PreferredDeliveryMethod.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PriceLevelRef is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelRef=model_.PriceLevelRef(\n')
            self.PriceLevelRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TaxRegistrationNumber is not None:
            showIndent(outfile, level)
            outfile.write('TaxRegistrationNumber=%s,\n' % quote_python(self.TaxRegistrationNumber).encode(ExternalEncoding))
        if self.CurrencyRef is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyRef=model_.CurrencyRef(\n')
            self.CurrencyRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'CompanyName':
            CompanyName_ = child_.text
            CompanyName_ = self.gds_validate_string(CompanyName_, node, 'CompanyName')
            self.CompanyName = CompanyName_
        elif nodeName_ == 'Salutation':
            Salutation_ = child_.text
            Salutation_ = self.gds_validate_string(Salutation_, node, 'Salutation')
            self.Salutation = Salutation_
        elif nodeName_ == 'FirstName':
            FirstName_ = child_.text
            FirstName_ = self.gds_validate_string(FirstName_, node, 'FirstName')
            self.FirstName = FirstName_
        elif nodeName_ == 'MiddleName':
            MiddleName_ = child_.text
            MiddleName_ = self.gds_validate_string(MiddleName_, node, 'MiddleName')
            self.MiddleName = MiddleName_
        elif nodeName_ == 'LastName':
            LastName_ = child_.text
            LastName_ = self.gds_validate_string(LastName_, node, 'LastName')
            self.LastName = LastName_
        elif nodeName_ == 'Suffix':
            Suffix_ = child_.text
            Suffix_ = self.gds_validate_string(Suffix_, node, 'Suffix')
            self.Suffix = Suffix_
        elif nodeName_ == 'JobTitle':
            JobTitle_ = child_.text
            JobTitle_ = self.gds_validate_string(JobTitle_, node, 'JobTitle')
            self.JobTitle = JobTitle_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'ShipToAddress':
            obj_ = ShipToAddress.factory()
            obj_.build(child_)
            self.ShipToAddress.append(obj_)
        elif nodeName_ == 'PrintAs':
            PrintAs_ = child_.text
            PrintAs_ = self.gds_validate_string(PrintAs_, node, 'PrintAs')
            self.PrintAs = PrintAs_
        elif nodeName_ == 'Phone':
            Phone_ = child_.text
            Phone_ = self.gds_validate_string(Phone_, node, 'Phone')
            self.Phone = Phone_
        elif nodeName_ == 'Mobile':
            Mobile_ = child_.text
            Mobile_ = self.gds_validate_string(Mobile_, node, 'Mobile')
            self.Mobile = Mobile_
        elif nodeName_ == 'Pager':
            Pager_ = child_.text
            Pager_ = self.gds_validate_string(Pager_, node, 'Pager')
            self.Pager = Pager_
        elif nodeName_ == 'AltPhone':
            AltPhone_ = child_.text
            AltPhone_ = self.gds_validate_string(AltPhone_, node, 'AltPhone')
            self.AltPhone = AltPhone_
        elif nodeName_ == 'Fax':
            Fax_ = child_.text
            Fax_ = self.gds_validate_string(Fax_, node, 'Fax')
            self.Fax = Fax_
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
        elif nodeName_ == 'Cc':
            Cc_ = child_.text
            Cc_ = self.gds_validate_string(Cc_, node, 'Cc')
            self.Cc = Cc_
        elif nodeName_ == 'Contact':
            Contact_ = child_.text
            Contact_ = self.gds_validate_string(Contact_, node, 'Contact')
            self.Contact = Contact_
        elif nodeName_ == 'AltContact':
            AltContact_ = child_.text
            AltContact_ = self.gds_validate_string(AltContact_, node, 'AltContact')
            self.AltContact = AltContact_
        elif nodeName_ == 'AdditionalContactRef':
            obj_ = AdditionalContactRef.factory()
            obj_.build(child_)
            self.AdditionalContactRef.append(obj_)
        elif nodeName_ == 'ContactsMod':
            obj_ = ContactsMod.factory()
            obj_.build(child_)
            self.ContactsMod.append(obj_)
        elif nodeName_ == 'CustomerTypeRef':
            obj_ = CustomerTypeRef.factory()
            obj_.build(child_)
            self.set_CustomerTypeRef(obj_)
        elif nodeName_ == 'TermsRef':
            obj_ = TermsRef.factory()
            obj_.build(child_)
            self.set_TermsRef(obj_)
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'SalesTaxCountry':
            obj_ = None
            self.set_SalesTaxCountry(obj_)
            self.validate_SalesTaxCountry(self.SalesTaxCountry)    # validate type SalesTaxCountry
        elif nodeName_ == 'ResaleNumber':
            ResaleNumber_ = child_.text
            ResaleNumber_ = self.gds_validate_string(ResaleNumber_, node, 'ResaleNumber')
            self.ResaleNumber = ResaleNumber_
        elif nodeName_ == 'AccountNumber':
            AccountNumber_ = child_.text
            AccountNumber_ = self.gds_validate_string(AccountNumber_, node, 'AccountNumber')
            self.AccountNumber = AccountNumber_
        elif nodeName_ == 'CreditLimit':
            CreditLimit_ = child_.text
            CreditLimit_ = self.gds_validate_string(CreditLimit_, node, 'CreditLimit')
            self.CreditLimit = CreditLimit_
        elif nodeName_ == 'PreferredPaymentMethodRef':
            obj_ = PreferredPaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PreferredPaymentMethodRef(obj_)
        elif nodeName_ == 'CreditCardInfo':
            obj_ = CreditCardInfo.factory()
            obj_.build(child_)
            self.set_CreditCardInfo(obj_)
        elif nodeName_ == 'JobStatus':
            obj_ = None
            self.set_JobStatus(obj_)
            self.validate_JobStatus(self.JobStatus)    # validate type JobStatus
        elif nodeName_ == 'JobStartDate':
            JobStartDate_ = child_.text
            JobStartDate_ = re_.sub(String_cleanup_pat_, " ", JobStartDate_).strip()
            JobStartDate_ = self.gds_validate_string(JobStartDate_, node, 'JobStartDate')
            self.JobStartDate = JobStartDate_
        elif nodeName_ == 'JobProjectedEndDate':
            JobProjectedEndDate_ = child_.text
            JobProjectedEndDate_ = re_.sub(String_cleanup_pat_, " ", JobProjectedEndDate_).strip()
            JobProjectedEndDate_ = self.gds_validate_string(JobProjectedEndDate_, node, 'JobProjectedEndDate')
            self.JobProjectedEndDate = JobProjectedEndDate_
        elif nodeName_ == 'JobEndDate':
            JobEndDate_ = child_.text
            JobEndDate_ = re_.sub(String_cleanup_pat_, " ", JobEndDate_).strip()
            JobEndDate_ = self.gds_validate_string(JobEndDate_, node, 'JobEndDate')
            self.JobEndDate = JobEndDate_
        elif nodeName_ == 'JobDesc':
            JobDesc_ = child_.text
            JobDesc_ = self.gds_validate_string(JobDesc_, node, 'JobDesc')
            self.JobDesc = JobDesc_
        elif nodeName_ == 'JobTypeRef':
            obj_ = JobTypeRef.factory()
            obj_.build(child_)
            self.set_JobTypeRef(obj_)
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'AdditionalNotesMod':
            obj_ = AdditionalNotesMod.factory()
            obj_.build(child_)
            self.AdditionalNotesMod.append(obj_)
        elif nodeName_ == 'IsStatementWithParent':
            IsStatementWithParent_ = child_.text
            IsStatementWithParent_ = re_.sub(String_cleanup_pat_, " ", IsStatementWithParent_).strip()
            IsStatementWithParent_ = self.gds_validate_string(IsStatementWithParent_, node, 'IsStatementWithParent')
            self.IsStatementWithParent = IsStatementWithParent_
        elif nodeName_ == 'DeliveryMethod':
            obj_ = None
            self.set_DeliveryMethod(obj_)
            self.validate_DeliveryMethod(self.DeliveryMethod)    # validate type DeliveryMethod
        elif nodeName_ == 'PreferredDeliveryMethod':
            obj_ = None
            self.set_PreferredDeliveryMethod(obj_)
            self.validate_PreferredDeliveryMethod(self.PreferredDeliveryMethod)    # validate type PreferredDeliveryMethod
        elif nodeName_ == 'PriceLevelRef':
            obj_ = PriceLevelRef.factory()
            obj_.build(child_)
            self.set_PriceLevelRef(obj_)
        elif nodeName_ == 'TaxRegistrationNumber':
            TaxRegistrationNumber_ = child_.text
            TaxRegistrationNumber_ = self.gds_validate_string(TaxRegistrationNumber_, node, 'TaxRegistrationNumber')
            self.TaxRegistrationNumber = TaxRegistrationNumber_
        elif nodeName_ == 'CurrencyRef':
            obj_ = CurrencyRef.factory()
            obj_.build(child_)
            self.set_CurrencyRef(obj_)
# end class CustomerMod


class SalesOrPurchase(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Desc=None, Price=None, PricePercent=None, AccountRef=None):
        self.Desc = Desc
        self.Price = Price
        self.PricePercent = PricePercent
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if SalesOrPurchase.subclass:
            return SalesOrPurchase.subclass(*args_, **kwargs_)
        else:
            return SalesOrPurchase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def get_Price(self): return self.Price
    def set_Price(self, Price): self.Price = Price
    def get_PricePercent(self): return self.PricePercent
    def set_PricePercent(self, PricePercent): self.PricePercent = PricePercent
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='SalesOrPurchase', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesOrPurchase')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesOrPurchase'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesOrPurchase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Price is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPrice>%s</%sPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.Price).encode(ExternalEncoding), input_name='Price'), namespace_, eol_))
        if self.PricePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPricePercent>%s</%sPricePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.PricePercent).encode(ExternalEncoding), input_name='PricePercent'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Desc is not None or
            self.Price is not None or
            self.PricePercent is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesOrPurchase'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Price is not None:
            showIndent(outfile, level)
            outfile.write('Price=%s,\n' % quote_python(self.Price).encode(ExternalEncoding))
        if self.PricePercent is not None:
            showIndent(outfile, level)
            outfile.write('PricePercent=%s,\n' % quote_python(self.PricePercent).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
        elif nodeName_ == 'Price':
            Price_ = child_.text
            Price_ = self.gds_validate_string(Price_, node, 'Price')
            self.Price = Price_
        elif nodeName_ == 'PricePercent':
            PricePercent_ = child_.text
            PricePercent_ = self.gds_validate_string(PricePercent_, node, 'PricePercent')
            self.PricePercent = PricePercent_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class SalesOrPurchase


class Desc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Desc.subclass:
            return Desc.subclass(*args_, **kwargs_)
        else:
            return Desc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Desc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Desc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Desc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Desc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Desc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Desc


class SalesAndPurchase(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SalesDesc=None, SalesPrice=None, IncomeAccountRef=None, PurchaseDesc=None, PurchaseCost=None, PurchaseTaxCodeRef=None, ExpenseAccountRef=None, PrefVendorRef=None):
        self.SalesDesc = SalesDesc
        self.SalesPrice = SalesPrice
        self.IncomeAccountRef = IncomeAccountRef
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseCost = PurchaseCost
        self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
        self.ExpenseAccountRef = ExpenseAccountRef
        self.PrefVendorRef = PrefVendorRef
    def factory(*args_, **kwargs_):
        if SalesAndPurchase.subclass:
            return SalesAndPurchase.subclass(*args_, **kwargs_)
        else:
            return SalesAndPurchase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_IncomeAccountRef(self): return self.IncomeAccountRef
    def set_IncomeAccountRef(self, IncomeAccountRef): self.IncomeAccountRef = IncomeAccountRef
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_PurchaseTaxCodeRef(self): return self.PurchaseTaxCodeRef
    def set_PurchaseTaxCodeRef(self, PurchaseTaxCodeRef): self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
    def get_ExpenseAccountRef(self): return self.ExpenseAccountRef
    def set_ExpenseAccountRef(self, ExpenseAccountRef): self.ExpenseAccountRef = ExpenseAccountRef
    def get_PrefVendorRef(self): return self.PrefVendorRef
    def set_PrefVendorRef(self, PrefVendorRef): self.PrefVendorRef = PrefVendorRef
    def export(self, outfile, level, namespace_='', name_='SalesAndPurchase', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesAndPurchase')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesAndPurchase'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesAndPurchase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.IncomeAccountRef is not None:
            self.IncomeAccountRef.export(outfile, level, namespace_, name_='IncomeAccountRef', pretty_print=pretty_print)
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.PurchaseTaxCodeRef is not None:
            self.PurchaseTaxCodeRef.export(outfile, level, namespace_, name_='PurchaseTaxCodeRef', pretty_print=pretty_print)
        if self.ExpenseAccountRef is not None:
            self.ExpenseAccountRef.export(outfile, level, namespace_, name_='ExpenseAccountRef', pretty_print=pretty_print)
        if self.PrefVendorRef is not None:
            self.PrefVendorRef.export(outfile, level, namespace_, name_='PrefVendorRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SalesDesc is not None or
            self.SalesPrice is not None or
            self.IncomeAccountRef is not None or
            self.PurchaseDesc is not None or
            self.PurchaseCost is not None or
            self.PurchaseTaxCodeRef is not None or
            self.ExpenseAccountRef is not None or
            self.PrefVendorRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesAndPurchase'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.IncomeAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('IncomeAccountRef=model_.IncomeAccountRef(\n')
            self.IncomeAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.PurchaseTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseTaxCodeRef=model_.PurchaseTaxCodeRef(\n')
            self.PurchaseTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExpenseAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('ExpenseAccountRef=model_.ExpenseAccountRef(\n')
            self.ExpenseAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrefVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('PrefVendorRef=model_.PrefVendorRef(\n')
            self.PrefVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'IncomeAccountRef':
            obj_ = IncomeAccountRef.factory()
            obj_.build(child_)
            self.set_IncomeAccountRef(obj_)
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'PurchaseTaxCodeRef':
            obj_ = PurchaseTaxCodeRef.factory()
            obj_.build(child_)
            self.set_PurchaseTaxCodeRef(obj_)
        elif nodeName_ == 'ExpenseAccountRef':
            obj_ = ExpenseAccountRef.factory()
            obj_.build(child_)
            self.set_ExpenseAccountRef(obj_)
        elif nodeName_ == 'PrefVendorRef':
            obj_ = PrefVendorRef.factory()
            obj_.build(child_)
            self.set_PrefVendorRef(obj_)
# end class SalesAndPurchase


class SalesDesc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if SalesDesc.subclass:
            return SalesDesc.subclass(*args_, **kwargs_)
        else:
            return SalesDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SalesDesc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesDesc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesDesc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SalesDesc


class PurchaseDesc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if PurchaseDesc.subclass:
            return PurchaseDesc.subclass(*args_, **kwargs_)
        else:
            return PurchaseDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PurchaseDesc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PurchaseDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PurchaseDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PurchaseDesc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PurchaseDesc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PurchaseDesc


class ItemServiceRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, UnitOfMeasureSetRef=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesOrPurchase=None, SalesAndPurchase=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesOrPurchase = SalesOrPurchase
        self.SalesAndPurchase = SalesAndPurchase
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemServiceRet.subclass:
            return ItemServiceRet.subclass(*args_, **kwargs_)
        else:
            return ItemServiceRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesOrPurchase(self): return self.SalesOrPurchase
    def set_SalesOrPurchase(self, SalesOrPurchase): self.SalesOrPurchase = SalesOrPurchase
    def get_SalesAndPurchase(self): return self.SalesAndPurchase
    def set_SalesAndPurchase(self, SalesAndPurchase): self.SalesAndPurchase = SalesAndPurchase
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemServiceRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemServiceRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemServiceRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemServiceRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesOrPurchase is not None:
            self.SalesOrPurchase.export(outfile, level, namespace_, name_='SalesOrPurchase', pretty_print=pretty_print)
        if self.SalesAndPurchase is not None:
            self.SalesAndPurchase.export(outfile, level, namespace_, name_='SalesAndPurchase', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesOrPurchase is not None or
            self.SalesAndPurchase is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemServiceRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesOrPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesOrPurchase=model_.SalesOrPurchase(\n')
            self.SalesOrPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesAndPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesAndPurchase=model_.SalesAndPurchase(\n')
            self.SalesAndPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesOrPurchase':
            obj_ = SalesOrPurchase.factory()
            obj_.build(child_)
            self.set_SalesOrPurchase(obj_)
        elif nodeName_ == 'SalesAndPurchase':
            obj_ = SalesAndPurchase.factory()
            obj_.build(child_)
            self.set_SalesAndPurchase(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemServiceRet


class ItemNonInventoryRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, ManufacturerPartNumber=None, UnitOfMeasureSetRef=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesOrPurchase=None, SalesAndPurchase=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.ManufacturerPartNumber = ManufacturerPartNumber
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesOrPurchase = SalesOrPurchase
        self.SalesAndPurchase = SalesAndPurchase
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemNonInventoryRet.subclass:
            return ItemNonInventoryRet.subclass(*args_, **kwargs_)
        else:
            return ItemNonInventoryRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_ManufacturerPartNumber(self): return self.ManufacturerPartNumber
    def set_ManufacturerPartNumber(self, ManufacturerPartNumber): self.ManufacturerPartNumber = ManufacturerPartNumber
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesOrPurchase(self): return self.SalesOrPurchase
    def set_SalesOrPurchase(self, SalesOrPurchase): self.SalesOrPurchase = SalesOrPurchase
    def get_SalesAndPurchase(self): return self.SalesAndPurchase
    def set_SalesAndPurchase(self, SalesAndPurchase): self.SalesAndPurchase = SalesAndPurchase
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemNonInventoryRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemNonInventoryRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemNonInventoryRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemNonInventoryRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerPartNumber>%s</%sManufacturerPartNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ManufacturerPartNumber).encode(ExternalEncoding), input_name='ManufacturerPartNumber'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesOrPurchase is not None:
            self.SalesOrPurchase.export(outfile, level, namespace_, name_='SalesOrPurchase', pretty_print=pretty_print)
        if self.SalesAndPurchase is not None:
            self.SalesAndPurchase.export(outfile, level, namespace_, name_='SalesAndPurchase', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.ManufacturerPartNumber is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesOrPurchase is not None or
            self.SalesAndPurchase is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemNonInventoryRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level)
            outfile.write('ManufacturerPartNumber=%s,\n' % quote_python(self.ManufacturerPartNumber).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesOrPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesOrPurchase=model_.SalesOrPurchase(\n')
            self.SalesOrPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesAndPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesAndPurchase=model_.SalesAndPurchase(\n')
            self.SalesAndPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'ManufacturerPartNumber':
            ManufacturerPartNumber_ = child_.text
            ManufacturerPartNumber_ = self.gds_validate_string(ManufacturerPartNumber_, node, 'ManufacturerPartNumber')
            self.ManufacturerPartNumber = ManufacturerPartNumber_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesOrPurchase':
            obj_ = SalesOrPurchase.factory()
            obj_.build(child_)
            self.set_SalesOrPurchase(obj_)
        elif nodeName_ == 'SalesAndPurchase':
            obj_ = SalesAndPurchase.factory()
            obj_.build(child_)
            self.set_SalesAndPurchase(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemNonInventoryRet


class ManufacturerPartNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ManufacturerPartNumber.subclass:
            return ManufacturerPartNumber.subclass(*args_, **kwargs_)
        else:
            return ManufacturerPartNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ManufacturerPartNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ManufacturerPartNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ManufacturerPartNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ManufacturerPartNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ManufacturerPartNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ManufacturerPartNumber


class ItemOtherChargeRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesOrPurchase=None, SalesAndPurchase=None, SpecialItemType=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesOrPurchase = SalesOrPurchase
        self.SalesAndPurchase = SalesAndPurchase
        self.SpecialItemType = SpecialItemType
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemOtherChargeRet.subclass:
            return ItemOtherChargeRet.subclass(*args_, **kwargs_)
        else:
            return ItemOtherChargeRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesOrPurchase(self): return self.SalesOrPurchase
    def set_SalesOrPurchase(self, SalesOrPurchase): self.SalesOrPurchase = SalesOrPurchase
    def get_SalesAndPurchase(self): return self.SalesAndPurchase
    def set_SalesAndPurchase(self, SalesAndPurchase): self.SalesAndPurchase = SalesAndPurchase
    def get_SpecialItemType(self): return self.SpecialItemType
    def set_SpecialItemType(self, SpecialItemType): self.SpecialItemType = SpecialItemType
    def validate_SpecialItemType(self, value):
        # Validate type SpecialItemType, a restriction on ENUMTYPE.
        pass
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemOtherChargeRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemOtherChargeRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemOtherChargeRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemOtherChargeRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesOrPurchase is not None:
            self.SalesOrPurchase.export(outfile, level, namespace_, name_='SalesOrPurchase', pretty_print=pretty_print)
        if self.SalesAndPurchase is not None:
            self.SalesAndPurchase.export(outfile, level, namespace_, name_='SalesAndPurchase', pretty_print=pretty_print)
        if self.SpecialItemType is not None:
            self.SpecialItemType.export(outfile, level, namespace_, name_='SpecialItemType', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesOrPurchase is not None or
            self.SalesAndPurchase is not None or
            self.SpecialItemType is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemOtherChargeRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesOrPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesOrPurchase=model_.SalesOrPurchase(\n')
            self.SalesOrPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesAndPurchase is not None:
            showIndent(outfile, level)
            outfile.write('SalesAndPurchase=model_.SalesAndPurchase(\n')
            self.SalesAndPurchase.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SpecialItemType is not None:
            showIndent(outfile, level)
            outfile.write('SpecialItemType=model_.SpecialItemType(\n')
            self.SpecialItemType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesOrPurchase':
            obj_ = SalesOrPurchase.factory()
            obj_.build(child_)
            self.set_SalesOrPurchase(obj_)
        elif nodeName_ == 'SalesAndPurchase':
            obj_ = SalesAndPurchase.factory()
            obj_.build(child_)
            self.set_SalesAndPurchase(obj_)
        elif nodeName_ == 'SpecialItemType':
            obj_ = None
            self.set_SpecialItemType(obj_)
            self.validate_SpecialItemType(self.SpecialItemType)    # validate type SpecialItemType
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemOtherChargeRet


class ItemInventoryRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, ManufacturerPartNumber=None, UnitOfMeasureSetRef=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesDesc=None, SalesPrice=None, IncomeAccountRef=None, PurchaseDesc=None, PurchaseCost=None, PurchaseTaxCodeRef=None, COGSAccountRef=None, PrefVendorRef=None, AssetAccountRef=None, ReorderPoint=None, QuantityOnHand=None, AverageCost=None, QuantityOnOrder=None, QuantityOnSalesOrder=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.ManufacturerPartNumber = ManufacturerPartNumber
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesDesc = SalesDesc
        self.SalesPrice = SalesPrice
        self.IncomeAccountRef = IncomeAccountRef
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseCost = PurchaseCost
        self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
        self.COGSAccountRef = COGSAccountRef
        self.PrefVendorRef = PrefVendorRef
        self.AssetAccountRef = AssetAccountRef
        self.ReorderPoint = ReorderPoint
        self.QuantityOnHand = QuantityOnHand
        self.AverageCost = AverageCost
        self.QuantityOnOrder = QuantityOnOrder
        self.QuantityOnSalesOrder = QuantityOnSalesOrder
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemInventoryRet.subclass:
            return ItemInventoryRet.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_ManufacturerPartNumber(self): return self.ManufacturerPartNumber
    def set_ManufacturerPartNumber(self, ManufacturerPartNumber): self.ManufacturerPartNumber = ManufacturerPartNumber
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_IncomeAccountRef(self): return self.IncomeAccountRef
    def set_IncomeAccountRef(self, IncomeAccountRef): self.IncomeAccountRef = IncomeAccountRef
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_PurchaseTaxCodeRef(self): return self.PurchaseTaxCodeRef
    def set_PurchaseTaxCodeRef(self, PurchaseTaxCodeRef): self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
    def get_COGSAccountRef(self): return self.COGSAccountRef
    def set_COGSAccountRef(self, COGSAccountRef): self.COGSAccountRef = COGSAccountRef
    def get_PrefVendorRef(self): return self.PrefVendorRef
    def set_PrefVendorRef(self, PrefVendorRef): self.PrefVendorRef = PrefVendorRef
    def get_AssetAccountRef(self): return self.AssetAccountRef
    def set_AssetAccountRef(self, AssetAccountRef): self.AssetAccountRef = AssetAccountRef
    def get_ReorderPoint(self): return self.ReorderPoint
    def set_ReorderPoint(self, ReorderPoint): self.ReorderPoint = ReorderPoint
    def get_QuantityOnHand(self): return self.QuantityOnHand
    def set_QuantityOnHand(self, QuantityOnHand): self.QuantityOnHand = QuantityOnHand
    def get_AverageCost(self): return self.AverageCost
    def set_AverageCost(self, AverageCost): self.AverageCost = AverageCost
    def get_QuantityOnOrder(self): return self.QuantityOnOrder
    def set_QuantityOnOrder(self, QuantityOnOrder): self.QuantityOnOrder = QuantityOnOrder
    def get_QuantityOnSalesOrder(self): return self.QuantityOnSalesOrder
    def set_QuantityOnSalesOrder(self, QuantityOnSalesOrder): self.QuantityOnSalesOrder = QuantityOnSalesOrder
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemInventoryRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerPartNumber>%s</%sManufacturerPartNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ManufacturerPartNumber).encode(ExternalEncoding), input_name='ManufacturerPartNumber'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.IncomeAccountRef is not None:
            self.IncomeAccountRef.export(outfile, level, namespace_, name_='IncomeAccountRef', pretty_print=pretty_print)
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.PurchaseTaxCodeRef is not None:
            self.PurchaseTaxCodeRef.export(outfile, level, namespace_, name_='PurchaseTaxCodeRef', pretty_print=pretty_print)
        if self.COGSAccountRef is not None:
            self.COGSAccountRef.export(outfile, level, namespace_, name_='COGSAccountRef', pretty_print=pretty_print)
        if self.PrefVendorRef is not None:
            self.PrefVendorRef.export(outfile, level, namespace_, name_='PrefVendorRef', pretty_print=pretty_print)
        if self.AssetAccountRef is not None:
            self.AssetAccountRef.export(outfile, level, namespace_, name_='AssetAccountRef', pretty_print=pretty_print)
        if self.ReorderPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReorderPoint>%s</%sReorderPoint>%s' % (namespace_, self.gds_format_string(quote_xml(self.ReorderPoint).encode(ExternalEncoding), input_name='ReorderPoint'), namespace_, eol_))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnHand>%s</%sQuantityOnHand>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnHand).encode(ExternalEncoding), input_name='QuantityOnHand'), namespace_, eol_))
        if self.AverageCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageCost>%s</%sAverageCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.AverageCost).encode(ExternalEncoding), input_name='AverageCost'), namespace_, eol_))
        if self.QuantityOnOrder is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnOrder>%s</%sQuantityOnOrder>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnOrder).encode(ExternalEncoding), input_name='QuantityOnOrder'), namespace_, eol_))
        if self.QuantityOnSalesOrder is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnSalesOrder>%s</%sQuantityOnSalesOrder>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnSalesOrder).encode(ExternalEncoding), input_name='QuantityOnSalesOrder'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.ManufacturerPartNumber is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesDesc is not None or
            self.SalesPrice is not None or
            self.IncomeAccountRef is not None or
            self.PurchaseDesc is not None or
            self.PurchaseCost is not None or
            self.PurchaseTaxCodeRef is not None or
            self.COGSAccountRef is not None or
            self.PrefVendorRef is not None or
            self.AssetAccountRef is not None or
            self.ReorderPoint is not None or
            self.QuantityOnHand is not None or
            self.AverageCost is not None or
            self.QuantityOnOrder is not None or
            self.QuantityOnSalesOrder is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level)
            outfile.write('ManufacturerPartNumber=%s,\n' % quote_python(self.ManufacturerPartNumber).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.IncomeAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('IncomeAccountRef=model_.IncomeAccountRef(\n')
            self.IncomeAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.PurchaseTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseTaxCodeRef=model_.PurchaseTaxCodeRef(\n')
            self.PurchaseTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COGSAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('COGSAccountRef=model_.COGSAccountRef(\n')
            self.COGSAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrefVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('PrefVendorRef=model_.PrefVendorRef(\n')
            self.PrefVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssetAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AssetAccountRef=model_.AssetAccountRef(\n')
            self.AssetAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReorderPoint is not None:
            showIndent(outfile, level)
            outfile.write('ReorderPoint=%s,\n' % quote_python(self.ReorderPoint).encode(ExternalEncoding))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnHand=%s,\n' % quote_python(self.QuantityOnHand).encode(ExternalEncoding))
        if self.AverageCost is not None:
            showIndent(outfile, level)
            outfile.write('AverageCost=%s,\n' % quote_python(self.AverageCost).encode(ExternalEncoding))
        if self.QuantityOnOrder is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnOrder=%s,\n' % quote_python(self.QuantityOnOrder).encode(ExternalEncoding))
        if self.QuantityOnSalesOrder is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnSalesOrder=%s,\n' % quote_python(self.QuantityOnSalesOrder).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'ManufacturerPartNumber':
            ManufacturerPartNumber_ = child_.text
            ManufacturerPartNumber_ = self.gds_validate_string(ManufacturerPartNumber_, node, 'ManufacturerPartNumber')
            self.ManufacturerPartNumber = ManufacturerPartNumber_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'IncomeAccountRef':
            obj_ = IncomeAccountRef.factory()
            obj_.build(child_)
            self.set_IncomeAccountRef(obj_)
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'PurchaseTaxCodeRef':
            obj_ = PurchaseTaxCodeRef.factory()
            obj_.build(child_)
            self.set_PurchaseTaxCodeRef(obj_)
        elif nodeName_ == 'COGSAccountRef':
            obj_ = COGSAccountRef.factory()
            obj_.build(child_)
            self.set_COGSAccountRef(obj_)
        elif nodeName_ == 'PrefVendorRef':
            obj_ = PrefVendorRef.factory()
            obj_.build(child_)
            self.set_PrefVendorRef(obj_)
        elif nodeName_ == 'AssetAccountRef':
            obj_ = AssetAccountRef.factory()
            obj_.build(child_)
            self.set_AssetAccountRef(obj_)
        elif nodeName_ == 'ReorderPoint':
            ReorderPoint_ = child_.text
            ReorderPoint_ = self.gds_validate_string(ReorderPoint_, node, 'ReorderPoint')
            self.ReorderPoint = ReorderPoint_
        elif nodeName_ == 'QuantityOnHand':
            QuantityOnHand_ = child_.text
            QuantityOnHand_ = self.gds_validate_string(QuantityOnHand_, node, 'QuantityOnHand')
            self.QuantityOnHand = QuantityOnHand_
        elif nodeName_ == 'AverageCost':
            AverageCost_ = child_.text
            AverageCost_ = self.gds_validate_string(AverageCost_, node, 'AverageCost')
            self.AverageCost = AverageCost_
        elif nodeName_ == 'QuantityOnOrder':
            QuantityOnOrder_ = child_.text
            QuantityOnOrder_ = self.gds_validate_string(QuantityOnOrder_, node, 'QuantityOnOrder')
            self.QuantityOnOrder = QuantityOnOrder_
        elif nodeName_ == 'QuantityOnSalesOrder':
            QuantityOnSalesOrder_ = child_.text
            QuantityOnSalesOrder_ = self.gds_validate_string(QuantityOnSalesOrder_, node, 'QuantityOnSalesOrder')
            self.QuantityOnSalesOrder = QuantityOnSalesOrder_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemInventoryRet


class ItemInventoryAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Name=None, BarCode=None, IsActive=None, ClassRef=None, ParentRef=None, ManufacturerPartNumber=None, UnitOfMeasureSetRef=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesDesc=None, SalesPrice=None, IncomeAccountRef=None, PurchaseDesc=None, PurchaseCost=None, PurchaseTaxCodeRef=None, COGSAccountRef=None, PrefVendorRef=None, AssetAccountRef=None, ReorderPoint=None, QuantityOnHand=None, TotalValue=None, InventoryDate=None, ExternalGUID=None):
        self.Name = Name
        self.BarCode = BarCode
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.ManufacturerPartNumber = ManufacturerPartNumber
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesDesc = SalesDesc
        self.SalesPrice = SalesPrice
        self.IncomeAccountRef = IncomeAccountRef
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseCost = PurchaseCost
        self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
        self.COGSAccountRef = COGSAccountRef
        self.PrefVendorRef = PrefVendorRef
        self.AssetAccountRef = AssetAccountRef
        self.ReorderPoint = ReorderPoint
        self.QuantityOnHand = QuantityOnHand
        self.TotalValue = TotalValue
        self.InventoryDate = InventoryDate
        self.ExternalGUID = ExternalGUID
    def factory(*args_, **kwargs_):
        if ItemInventoryAdd.subclass:
            return ItemInventoryAdd.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCode(self): return self.BarCode
    def set_BarCode(self, BarCode): self.BarCode = BarCode
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_ManufacturerPartNumber(self): return self.ManufacturerPartNumber
    def set_ManufacturerPartNumber(self, ManufacturerPartNumber): self.ManufacturerPartNumber = ManufacturerPartNumber
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_IncomeAccountRef(self): return self.IncomeAccountRef
    def set_IncomeAccountRef(self, IncomeAccountRef): self.IncomeAccountRef = IncomeAccountRef
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_PurchaseTaxCodeRef(self): return self.PurchaseTaxCodeRef
    def set_PurchaseTaxCodeRef(self, PurchaseTaxCodeRef): self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
    def get_COGSAccountRef(self): return self.COGSAccountRef
    def set_COGSAccountRef(self, COGSAccountRef): self.COGSAccountRef = COGSAccountRef
    def get_PrefVendorRef(self): return self.PrefVendorRef
    def set_PrefVendorRef(self, PrefVendorRef): self.PrefVendorRef = PrefVendorRef
    def get_AssetAccountRef(self): return self.AssetAccountRef
    def set_AssetAccountRef(self, AssetAccountRef): self.AssetAccountRef = AssetAccountRef
    def get_ReorderPoint(self): return self.ReorderPoint
    def set_ReorderPoint(self, ReorderPoint): self.ReorderPoint = ReorderPoint
    def get_QuantityOnHand(self): return self.QuantityOnHand
    def set_QuantityOnHand(self, QuantityOnHand): self.QuantityOnHand = QuantityOnHand
    def get_TotalValue(self): return self.TotalValue
    def set_TotalValue(self, TotalValue): self.TotalValue = TotalValue
    def get_InventoryDate(self): return self.InventoryDate
    def set_InventoryDate(self, InventoryDate): self.InventoryDate = InventoryDate
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def export(self, outfile, level, namespace_='', name_='ItemInventoryAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCode is not None:
            self.BarCode.export(outfile, level, namespace_, name_='BarCode', pretty_print=pretty_print)
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerPartNumber>%s</%sManufacturerPartNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ManufacturerPartNumber).encode(ExternalEncoding), input_name='ManufacturerPartNumber'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.IncomeAccountRef is not None:
            self.IncomeAccountRef.export(outfile, level, namespace_, name_='IncomeAccountRef', pretty_print=pretty_print)
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.PurchaseTaxCodeRef is not None:
            self.PurchaseTaxCodeRef.export(outfile, level, namespace_, name_='PurchaseTaxCodeRef', pretty_print=pretty_print)
        if self.COGSAccountRef is not None:
            self.COGSAccountRef.export(outfile, level, namespace_, name_='COGSAccountRef', pretty_print=pretty_print)
        if self.PrefVendorRef is not None:
            self.PrefVendorRef.export(outfile, level, namespace_, name_='PrefVendorRef', pretty_print=pretty_print)
        if self.AssetAccountRef is not None:
            self.AssetAccountRef.export(outfile, level, namespace_, name_='AssetAccountRef', pretty_print=pretty_print)
        if self.ReorderPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReorderPoint>%s</%sReorderPoint>%s' % (namespace_, self.gds_format_string(quote_xml(self.ReorderPoint).encode(ExternalEncoding), input_name='ReorderPoint'), namespace_, eol_))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnHand>%s</%sQuantityOnHand>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnHand).encode(ExternalEncoding), input_name='QuantityOnHand'), namespace_, eol_))
        if self.TotalValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalValue>%s</%sTotalValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalValue).encode(ExternalEncoding), input_name='TotalValue'), namespace_, eol_))
        if self.InventoryDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInventoryDate>%s</%sInventoryDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.InventoryDate).encode(ExternalEncoding), input_name='InventoryDate'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.Name is not None or
            self.BarCode is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.ManufacturerPartNumber is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesDesc is not None or
            self.SalesPrice is not None or
            self.IncomeAccountRef is not None or
            self.PurchaseDesc is not None or
            self.PurchaseCost is not None or
            self.PurchaseTaxCodeRef is not None or
            self.COGSAccountRef is not None or
            self.PrefVendorRef is not None or
            self.AssetAccountRef is not None or
            self.ReorderPoint is not None or
            self.QuantityOnHand is not None or
            self.TotalValue is not None or
            self.InventoryDate is not None or
            self.ExternalGUID is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCode is not None:
            showIndent(outfile, level)
            outfile.write('BarCode=model_.BarCode(\n')
            self.BarCode.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level)
            outfile.write('ManufacturerPartNumber=%s,\n' % quote_python(self.ManufacturerPartNumber).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.IncomeAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('IncomeAccountRef=model_.IncomeAccountRef(\n')
            self.IncomeAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.PurchaseTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseTaxCodeRef=model_.PurchaseTaxCodeRef(\n')
            self.PurchaseTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COGSAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('COGSAccountRef=model_.COGSAccountRef(\n')
            self.COGSAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrefVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('PrefVendorRef=model_.PrefVendorRef(\n')
            self.PrefVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssetAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AssetAccountRef=model_.AssetAccountRef(\n')
            self.AssetAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReorderPoint is not None:
            showIndent(outfile, level)
            outfile.write('ReorderPoint=%s,\n' % quote_python(self.ReorderPoint).encode(ExternalEncoding))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnHand=%s,\n' % quote_python(self.QuantityOnHand).encode(ExternalEncoding))
        if self.TotalValue is not None:
            showIndent(outfile, level)
            outfile.write('TotalValue=%s,\n' % quote_python(self.TotalValue).encode(ExternalEncoding))
        if self.InventoryDate is not None:
            showIndent(outfile, level)
            outfile.write('InventoryDate=%s,\n' % quote_python(self.InventoryDate).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCode':
            obj_ = BarCode.factory()
            obj_.build(child_)
            self.set_BarCode(obj_)
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'ManufacturerPartNumber':
            ManufacturerPartNumber_ = child_.text
            ManufacturerPartNumber_ = self.gds_validate_string(ManufacturerPartNumber_, node, 'ManufacturerPartNumber')
            self.ManufacturerPartNumber = ManufacturerPartNumber_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'IncomeAccountRef':
            obj_ = IncomeAccountRef.factory()
            obj_.build(child_)
            self.set_IncomeAccountRef(obj_)
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'PurchaseTaxCodeRef':
            obj_ = PurchaseTaxCodeRef.factory()
            obj_.build(child_)
            self.set_PurchaseTaxCodeRef(obj_)
        elif nodeName_ == 'COGSAccountRef':
            obj_ = COGSAccountRef.factory()
            obj_.build(child_)
            self.set_COGSAccountRef(obj_)
        elif nodeName_ == 'PrefVendorRef':
            obj_ = PrefVendorRef.factory()
            obj_.build(child_)
            self.set_PrefVendorRef(obj_)
        elif nodeName_ == 'AssetAccountRef':
            obj_ = AssetAccountRef.factory()
            obj_.build(child_)
            self.set_AssetAccountRef(obj_)
        elif nodeName_ == 'ReorderPoint':
            ReorderPoint_ = child_.text
            ReorderPoint_ = self.gds_validate_string(ReorderPoint_, node, 'ReorderPoint')
            self.ReorderPoint = ReorderPoint_
        elif nodeName_ == 'QuantityOnHand':
            QuantityOnHand_ = child_.text
            QuantityOnHand_ = self.gds_validate_string(QuantityOnHand_, node, 'QuantityOnHand')
            self.QuantityOnHand = QuantityOnHand_
        elif nodeName_ == 'TotalValue':
            TotalValue_ = child_.text
            TotalValue_ = self.gds_validate_string(TotalValue_, node, 'TotalValue')
            self.TotalValue = TotalValue_
        elif nodeName_ == 'InventoryDate':
            InventoryDate_ = child_.text
            InventoryDate_ = re_.sub(String_cleanup_pat_, " ", InventoryDate_).strip()
            InventoryDate_ = self.gds_validate_string(InventoryDate_, node, 'InventoryDate')
            self.InventoryDate = InventoryDate_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
# end class ItemInventoryAdd


class ItemInventoryMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, EditSequence=None, Name=None, BarCode=None, IsActive=None, ClassRef=None, ParentRef=None, ManufacturerPartNumber=None, UnitOfMeasureSetRef=None, ForceUOMChange=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesDesc=None, SalesPrice=None, IncomeAccountRef=None, ApplyIncomeAccountRefToExistingTxns=None, PurchaseDesc=None, PurchaseCost=None, PurchaseTaxCodeRef=None, COGSAccountRef=None, ApplyCOGSAccountRefToExistingTxns=None, PrefVendorRef=None, AssetAccountRef=None, ReorderPoint=None):
        self.ListID = ListID
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCode = BarCode
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.ManufacturerPartNumber = ManufacturerPartNumber
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.ForceUOMChange = ForceUOMChange
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesDesc = SalesDesc
        self.SalesPrice = SalesPrice
        self.IncomeAccountRef = IncomeAccountRef
        self.ApplyIncomeAccountRefToExistingTxns = ApplyIncomeAccountRefToExistingTxns
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseCost = PurchaseCost
        self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
        self.COGSAccountRef = COGSAccountRef
        self.ApplyCOGSAccountRefToExistingTxns = ApplyCOGSAccountRefToExistingTxns
        self.PrefVendorRef = PrefVendorRef
        self.AssetAccountRef = AssetAccountRef
        self.ReorderPoint = ReorderPoint
    def factory(*args_, **kwargs_):
        if ItemInventoryMod.subclass:
            return ItemInventoryMod.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCode(self): return self.BarCode
    def set_BarCode(self, BarCode): self.BarCode = BarCode
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_ManufacturerPartNumber(self): return self.ManufacturerPartNumber
    def set_ManufacturerPartNumber(self, ManufacturerPartNumber): self.ManufacturerPartNumber = ManufacturerPartNumber
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_ForceUOMChange(self): return self.ForceUOMChange
    def set_ForceUOMChange(self, ForceUOMChange): self.ForceUOMChange = ForceUOMChange
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_IncomeAccountRef(self): return self.IncomeAccountRef
    def set_IncomeAccountRef(self, IncomeAccountRef): self.IncomeAccountRef = IncomeAccountRef
    def get_ApplyIncomeAccountRefToExistingTxns(self): return self.ApplyIncomeAccountRefToExistingTxns
    def set_ApplyIncomeAccountRefToExistingTxns(self, ApplyIncomeAccountRefToExistingTxns): self.ApplyIncomeAccountRefToExistingTxns = ApplyIncomeAccountRefToExistingTxns
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_PurchaseTaxCodeRef(self): return self.PurchaseTaxCodeRef
    def set_PurchaseTaxCodeRef(self, PurchaseTaxCodeRef): self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
    def get_COGSAccountRef(self): return self.COGSAccountRef
    def set_COGSAccountRef(self, COGSAccountRef): self.COGSAccountRef = COGSAccountRef
    def get_ApplyCOGSAccountRefToExistingTxns(self): return self.ApplyCOGSAccountRefToExistingTxns
    def set_ApplyCOGSAccountRefToExistingTxns(self, ApplyCOGSAccountRefToExistingTxns): self.ApplyCOGSAccountRefToExistingTxns = ApplyCOGSAccountRefToExistingTxns
    def get_PrefVendorRef(self): return self.PrefVendorRef
    def set_PrefVendorRef(self, PrefVendorRef): self.PrefVendorRef = PrefVendorRef
    def get_AssetAccountRef(self): return self.AssetAccountRef
    def set_AssetAccountRef(self, AssetAccountRef): self.AssetAccountRef = AssetAccountRef
    def get_ReorderPoint(self): return self.ReorderPoint
    def set_ReorderPoint(self, ReorderPoint): self.ReorderPoint = ReorderPoint
    def export(self, outfile, level, namespace_='', name_='ItemInventoryMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCode is not None:
            self.BarCode.export(outfile, level, namespace_, name_='BarCode', pretty_print=pretty_print)
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerPartNumber>%s</%sManufacturerPartNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ManufacturerPartNumber).encode(ExternalEncoding), input_name='ManufacturerPartNumber'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.ForceUOMChange is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sForceUOMChange>%s</%sForceUOMChange>%s' % (namespace_, self.gds_format_string(quote_xml(self.ForceUOMChange).encode(ExternalEncoding), input_name='ForceUOMChange'), namespace_, eol_))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.IncomeAccountRef is not None:
            self.IncomeAccountRef.export(outfile, level, namespace_, name_='IncomeAccountRef', pretty_print=pretty_print)
        if self.ApplyIncomeAccountRefToExistingTxns is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplyIncomeAccountRefToExistingTxns>%s</%sApplyIncomeAccountRefToExistingTxns>%s' % (namespace_, self.gds_format_string(quote_xml(self.ApplyIncomeAccountRefToExistingTxns).encode(ExternalEncoding), input_name='ApplyIncomeAccountRefToExistingTxns'), namespace_, eol_))
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.PurchaseTaxCodeRef is not None:
            self.PurchaseTaxCodeRef.export(outfile, level, namespace_, name_='PurchaseTaxCodeRef', pretty_print=pretty_print)
        if self.COGSAccountRef is not None:
            self.COGSAccountRef.export(outfile, level, namespace_, name_='COGSAccountRef', pretty_print=pretty_print)
        if self.ApplyCOGSAccountRefToExistingTxns is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplyCOGSAccountRefToExistingTxns>%s</%sApplyCOGSAccountRefToExistingTxns>%s' % (namespace_, self.gds_format_string(quote_xml(self.ApplyCOGSAccountRefToExistingTxns).encode(ExternalEncoding), input_name='ApplyCOGSAccountRefToExistingTxns'), namespace_, eol_))
        if self.PrefVendorRef is not None:
            self.PrefVendorRef.export(outfile, level, namespace_, name_='PrefVendorRef', pretty_print=pretty_print)
        if self.AssetAccountRef is not None:
            self.AssetAccountRef.export(outfile, level, namespace_, name_='AssetAccountRef', pretty_print=pretty_print)
        if self.ReorderPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sReorderPoint>%s</%sReorderPoint>%s' % (namespace_, self.gds_format_string(quote_xml(self.ReorderPoint).encode(ExternalEncoding), input_name='ReorderPoint'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCode is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.ManufacturerPartNumber is not None or
            self.UnitOfMeasureSetRef is not None or
            self.ForceUOMChange is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesDesc is not None or
            self.SalesPrice is not None or
            self.IncomeAccountRef is not None or
            self.ApplyIncomeAccountRefToExistingTxns is not None or
            self.PurchaseDesc is not None or
            self.PurchaseCost is not None or
            self.PurchaseTaxCodeRef is not None or
            self.COGSAccountRef is not None or
            self.ApplyCOGSAccountRefToExistingTxns is not None or
            self.PrefVendorRef is not None or
            self.AssetAccountRef is not None or
            self.ReorderPoint is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCode is not None:
            showIndent(outfile, level)
            outfile.write('BarCode=model_.BarCode(\n')
            self.BarCode.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level)
            outfile.write('ManufacturerPartNumber=%s,\n' % quote_python(self.ManufacturerPartNumber).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ForceUOMChange is not None:
            showIndent(outfile, level)
            outfile.write('ForceUOMChange=%s,\n' % quote_python(self.ForceUOMChange).encode(ExternalEncoding))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.IncomeAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('IncomeAccountRef=model_.IncomeAccountRef(\n')
            self.IncomeAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ApplyIncomeAccountRefToExistingTxns is not None:
            showIndent(outfile, level)
            outfile.write('ApplyIncomeAccountRefToExistingTxns=%s,\n' % quote_python(self.ApplyIncomeAccountRefToExistingTxns).encode(ExternalEncoding))
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.PurchaseTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseTaxCodeRef=model_.PurchaseTaxCodeRef(\n')
            self.PurchaseTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COGSAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('COGSAccountRef=model_.COGSAccountRef(\n')
            self.COGSAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ApplyCOGSAccountRefToExistingTxns is not None:
            showIndent(outfile, level)
            outfile.write('ApplyCOGSAccountRefToExistingTxns=%s,\n' % quote_python(self.ApplyCOGSAccountRefToExistingTxns).encode(ExternalEncoding))
        if self.PrefVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('PrefVendorRef=model_.PrefVendorRef(\n')
            self.PrefVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssetAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AssetAccountRef=model_.AssetAccountRef(\n')
            self.AssetAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ReorderPoint is not None:
            showIndent(outfile, level)
            outfile.write('ReorderPoint=%s,\n' % quote_python(self.ReorderPoint).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCode':
            obj_ = BarCode.factory()
            obj_.build(child_)
            self.set_BarCode(obj_)
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'ManufacturerPartNumber':
            ManufacturerPartNumber_ = child_.text
            ManufacturerPartNumber_ = self.gds_validate_string(ManufacturerPartNumber_, node, 'ManufacturerPartNumber')
            self.ManufacturerPartNumber = ManufacturerPartNumber_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'ForceUOMChange':
            ForceUOMChange_ = child_.text
            ForceUOMChange_ = re_.sub(String_cleanup_pat_, " ", ForceUOMChange_).strip()
            ForceUOMChange_ = self.gds_validate_string(ForceUOMChange_, node, 'ForceUOMChange')
            self.ForceUOMChange = ForceUOMChange_
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'IncomeAccountRef':
            obj_ = IncomeAccountRef.factory()
            obj_.build(child_)
            self.set_IncomeAccountRef(obj_)
        elif nodeName_ == 'ApplyIncomeAccountRefToExistingTxns':
            ApplyIncomeAccountRefToExistingTxns_ = child_.text
            ApplyIncomeAccountRefToExistingTxns_ = re_.sub(String_cleanup_pat_, " ", ApplyIncomeAccountRefToExistingTxns_).strip()
            ApplyIncomeAccountRefToExistingTxns_ = self.gds_validate_string(ApplyIncomeAccountRefToExistingTxns_, node, 'ApplyIncomeAccountRefToExistingTxns')
            self.ApplyIncomeAccountRefToExistingTxns = ApplyIncomeAccountRefToExistingTxns_
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'PurchaseTaxCodeRef':
            obj_ = PurchaseTaxCodeRef.factory()
            obj_.build(child_)
            self.set_PurchaseTaxCodeRef(obj_)
        elif nodeName_ == 'COGSAccountRef':
            obj_ = COGSAccountRef.factory()
            obj_.build(child_)
            self.set_COGSAccountRef(obj_)
        elif nodeName_ == 'ApplyCOGSAccountRefToExistingTxns':
            ApplyCOGSAccountRefToExistingTxns_ = child_.text
            ApplyCOGSAccountRefToExistingTxns_ = re_.sub(String_cleanup_pat_, " ", ApplyCOGSAccountRefToExistingTxns_).strip()
            ApplyCOGSAccountRefToExistingTxns_ = self.gds_validate_string(ApplyCOGSAccountRefToExistingTxns_, node, 'ApplyCOGSAccountRefToExistingTxns')
            self.ApplyCOGSAccountRefToExistingTxns = ApplyCOGSAccountRefToExistingTxns_
        elif nodeName_ == 'PrefVendorRef':
            obj_ = PrefVendorRef.factory()
            obj_.build(child_)
            self.set_PrefVendorRef(obj_)
        elif nodeName_ == 'AssetAccountRef':
            obj_ = AssetAccountRef.factory()
            obj_.build(child_)
            self.set_AssetAccountRef(obj_)
        elif nodeName_ == 'ReorderPoint':
            ReorderPoint_ = child_.text
            ReorderPoint_ = self.gds_validate_string(ReorderPoint_, node, 'ReorderPoint')
            self.ReorderPoint = ReorderPoint_
# end class ItemInventoryMod


class ItemInventoryAssemblyLine(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemInventoryRef=None, Quantity=None):
        self.ItemInventoryRef = ItemInventoryRef
        self.Quantity = Quantity
    def factory(*args_, **kwargs_):
        if ItemInventoryAssemblyLine.subclass:
            return ItemInventoryAssemblyLine.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryAssemblyLine(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemInventoryRef(self): return self.ItemInventoryRef
    def set_ItemInventoryRef(self, ItemInventoryRef): self.ItemInventoryRef = ItemInventoryRef
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def export(self, outfile, level, namespace_='', name_='ItemInventoryAssemblyLine', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryAssemblyLine')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryAssemblyLine'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryAssemblyLine', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemInventoryRef is not None:
            self.ItemInventoryRef.export(outfile, level, namespace_, name_='ItemInventoryRef', pretty_print=pretty_print)
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ItemInventoryRef is not None or
            self.Quantity is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryAssemblyLine'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemInventoryRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemInventoryRef=model_.ItemInventoryRef(\n')
            self.ItemInventoryRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemInventoryRef':
            obj_ = ItemInventoryRef.factory()
            obj_.build(child_)
            self.set_ItemInventoryRef(obj_)
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
# end class ItemInventoryAssemblyLine


class ItemInventoryAssemblyRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, ManufacturerPartNumber=None, UnitOfMeasureSetRef=None, IsTaxIncluded=None, SalesTaxCodeRef=None, SalesDesc=None, SalesPrice=None, IncomeAccountRef=None, PurchaseDesc=None, PurchaseCost=None, PurchaseTaxCodeRef=None, COGSAccountRef=None, PrefVendorRef=None, AssetAccountRef=None, BuildPoint=None, QuantityOnHand=None, AverageCost=None, QuantityOnOrder=None, QuantityOnSalesOrder=None, ExternalGUID=None, ItemInventoryAssemblyLine=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.ManufacturerPartNumber = ManufacturerPartNumber
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsTaxIncluded = IsTaxIncluded
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.SalesDesc = SalesDesc
        self.SalesPrice = SalesPrice
        self.IncomeAccountRef = IncomeAccountRef
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseCost = PurchaseCost
        self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
        self.COGSAccountRef = COGSAccountRef
        self.PrefVendorRef = PrefVendorRef
        self.AssetAccountRef = AssetAccountRef
        self.BuildPoint = BuildPoint
        self.QuantityOnHand = QuantityOnHand
        self.AverageCost = AverageCost
        self.QuantityOnOrder = QuantityOnOrder
        self.QuantityOnSalesOrder = QuantityOnSalesOrder
        self.ExternalGUID = ExternalGUID
        if ItemInventoryAssemblyLine is None:
            self.ItemInventoryAssemblyLine = []
        else:
            self.ItemInventoryAssemblyLine = ItemInventoryAssemblyLine
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemInventoryAssemblyRet.subclass:
            return ItemInventoryAssemblyRet.subclass(*args_, **kwargs_)
        else:
            return ItemInventoryAssemblyRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_ManufacturerPartNumber(self): return self.ManufacturerPartNumber
    def set_ManufacturerPartNumber(self, ManufacturerPartNumber): self.ManufacturerPartNumber = ManufacturerPartNumber
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_IncomeAccountRef(self): return self.IncomeAccountRef
    def set_IncomeAccountRef(self, IncomeAccountRef): self.IncomeAccountRef = IncomeAccountRef
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_PurchaseTaxCodeRef(self): return self.PurchaseTaxCodeRef
    def set_PurchaseTaxCodeRef(self, PurchaseTaxCodeRef): self.PurchaseTaxCodeRef = PurchaseTaxCodeRef
    def get_COGSAccountRef(self): return self.COGSAccountRef
    def set_COGSAccountRef(self, COGSAccountRef): self.COGSAccountRef = COGSAccountRef
    def get_PrefVendorRef(self): return self.PrefVendorRef
    def set_PrefVendorRef(self, PrefVendorRef): self.PrefVendorRef = PrefVendorRef
    def get_AssetAccountRef(self): return self.AssetAccountRef
    def set_AssetAccountRef(self, AssetAccountRef): self.AssetAccountRef = AssetAccountRef
    def get_BuildPoint(self): return self.BuildPoint
    def set_BuildPoint(self, BuildPoint): self.BuildPoint = BuildPoint
    def get_QuantityOnHand(self): return self.QuantityOnHand
    def set_QuantityOnHand(self, QuantityOnHand): self.QuantityOnHand = QuantityOnHand
    def get_AverageCost(self): return self.AverageCost
    def set_AverageCost(self, AverageCost): self.AverageCost = AverageCost
    def get_QuantityOnOrder(self): return self.QuantityOnOrder
    def set_QuantityOnOrder(self, QuantityOnOrder): self.QuantityOnOrder = QuantityOnOrder
    def get_QuantityOnSalesOrder(self): return self.QuantityOnSalesOrder
    def set_QuantityOnSalesOrder(self, QuantityOnSalesOrder): self.QuantityOnSalesOrder = QuantityOnSalesOrder
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_ItemInventoryAssemblyLine(self): return self.ItemInventoryAssemblyLine
    def set_ItemInventoryAssemblyLine(self, ItemInventoryAssemblyLine): self.ItemInventoryAssemblyLine = ItemInventoryAssemblyLine
    def add_ItemInventoryAssemblyLine(self, value): self.ItemInventoryAssemblyLine.append(value)
    def insert_ItemInventoryAssemblyLine(self, index, value): self.ItemInventoryAssemblyLine[index] = value
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemInventoryAssemblyRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemInventoryAssemblyRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemInventoryAssemblyRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemInventoryAssemblyRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sManufacturerPartNumber>%s</%sManufacturerPartNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.ManufacturerPartNumber).encode(ExternalEncoding), input_name='ManufacturerPartNumber'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.IncomeAccountRef is not None:
            self.IncomeAccountRef.export(outfile, level, namespace_, name_='IncomeAccountRef', pretty_print=pretty_print)
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.PurchaseTaxCodeRef is not None:
            self.PurchaseTaxCodeRef.export(outfile, level, namespace_, name_='PurchaseTaxCodeRef', pretty_print=pretty_print)
        if self.COGSAccountRef is not None:
            self.COGSAccountRef.export(outfile, level, namespace_, name_='COGSAccountRef', pretty_print=pretty_print)
        if self.PrefVendorRef is not None:
            self.PrefVendorRef.export(outfile, level, namespace_, name_='PrefVendorRef', pretty_print=pretty_print)
        if self.AssetAccountRef is not None:
            self.AssetAccountRef.export(outfile, level, namespace_, name_='AssetAccountRef', pretty_print=pretty_print)
        if self.BuildPoint is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBuildPoint>%s</%sBuildPoint>%s' % (namespace_, self.gds_format_string(quote_xml(self.BuildPoint).encode(ExternalEncoding), input_name='BuildPoint'), namespace_, eol_))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnHand>%s</%sQuantityOnHand>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnHand).encode(ExternalEncoding), input_name='QuantityOnHand'), namespace_, eol_))
        if self.AverageCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAverageCost>%s</%sAverageCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.AverageCost).encode(ExternalEncoding), input_name='AverageCost'), namespace_, eol_))
        if self.QuantityOnOrder is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnOrder>%s</%sQuantityOnOrder>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnOrder).encode(ExternalEncoding), input_name='QuantityOnOrder'), namespace_, eol_))
        if self.QuantityOnSalesOrder is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantityOnSalesOrder>%s</%sQuantityOnSalesOrder>%s' % (namespace_, self.gds_format_string(quote_xml(self.QuantityOnSalesOrder).encode(ExternalEncoding), input_name='QuantityOnSalesOrder'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for ItemInventoryAssemblyLine_ in self.ItemInventoryAssemblyLine:
            ItemInventoryAssemblyLine_.export(outfile, level, namespace_, name_='ItemInventoryAssemblyLine', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.ManufacturerPartNumber is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsTaxIncluded is not None or
            self.SalesTaxCodeRef is not None or
            self.SalesDesc is not None or
            self.SalesPrice is not None or
            self.IncomeAccountRef is not None or
            self.PurchaseDesc is not None or
            self.PurchaseCost is not None or
            self.PurchaseTaxCodeRef is not None or
            self.COGSAccountRef is not None or
            self.PrefVendorRef is not None or
            self.AssetAccountRef is not None or
            self.BuildPoint is not None or
            self.QuantityOnHand is not None or
            self.AverageCost is not None or
            self.QuantityOnOrder is not None or
            self.QuantityOnSalesOrder is not None or
            self.ExternalGUID is not None or
            self.ItemInventoryAssemblyLine or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemInventoryAssemblyRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.ManufacturerPartNumber is not None:
            showIndent(outfile, level)
            outfile.write('ManufacturerPartNumber=%s,\n' % quote_python(self.ManufacturerPartNumber).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.IncomeAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('IncomeAccountRef=model_.IncomeAccountRef(\n')
            self.IncomeAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.PurchaseTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseTaxCodeRef=model_.PurchaseTaxCodeRef(\n')
            self.PurchaseTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.COGSAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('COGSAccountRef=model_.COGSAccountRef(\n')
            self.COGSAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PrefVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('PrefVendorRef=model_.PrefVendorRef(\n')
            self.PrefVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssetAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AssetAccountRef=model_.AssetAccountRef(\n')
            self.AssetAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BuildPoint is not None:
            showIndent(outfile, level)
            outfile.write('BuildPoint=%s,\n' % quote_python(self.BuildPoint).encode(ExternalEncoding))
        if self.QuantityOnHand is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnHand=%s,\n' % quote_python(self.QuantityOnHand).encode(ExternalEncoding))
        if self.AverageCost is not None:
            showIndent(outfile, level)
            outfile.write('AverageCost=%s,\n' % quote_python(self.AverageCost).encode(ExternalEncoding))
        if self.QuantityOnOrder is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnOrder=%s,\n' % quote_python(self.QuantityOnOrder).encode(ExternalEncoding))
        if self.QuantityOnSalesOrder is not None:
            showIndent(outfile, level)
            outfile.write('QuantityOnSalesOrder=%s,\n' % quote_python(self.QuantityOnSalesOrder).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ItemInventoryAssemblyLine=[\n')
        level += 1
        for ItemInventoryAssemblyLine_ in self.ItemInventoryAssemblyLine:
            showIndent(outfile, level)
            outfile.write('model_.ItemInventoryAssemblyLine(\n')
            ItemInventoryAssemblyLine_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'ManufacturerPartNumber':
            ManufacturerPartNumber_ = child_.text
            ManufacturerPartNumber_ = self.gds_validate_string(ManufacturerPartNumber_, node, 'ManufacturerPartNumber')
            self.ManufacturerPartNumber = ManufacturerPartNumber_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'IncomeAccountRef':
            obj_ = IncomeAccountRef.factory()
            obj_.build(child_)
            self.set_IncomeAccountRef(obj_)
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'PurchaseTaxCodeRef':
            obj_ = PurchaseTaxCodeRef.factory()
            obj_.build(child_)
            self.set_PurchaseTaxCodeRef(obj_)
        elif nodeName_ == 'COGSAccountRef':
            obj_ = COGSAccountRef.factory()
            obj_.build(child_)
            self.set_COGSAccountRef(obj_)
        elif nodeName_ == 'PrefVendorRef':
            obj_ = PrefVendorRef.factory()
            obj_.build(child_)
            self.set_PrefVendorRef(obj_)
        elif nodeName_ == 'AssetAccountRef':
            obj_ = AssetAccountRef.factory()
            obj_.build(child_)
            self.set_AssetAccountRef(obj_)
        elif nodeName_ == 'BuildPoint':
            BuildPoint_ = child_.text
            BuildPoint_ = self.gds_validate_string(BuildPoint_, node, 'BuildPoint')
            self.BuildPoint = BuildPoint_
        elif nodeName_ == 'QuantityOnHand':
            QuantityOnHand_ = child_.text
            QuantityOnHand_ = self.gds_validate_string(QuantityOnHand_, node, 'QuantityOnHand')
            self.QuantityOnHand = QuantityOnHand_
        elif nodeName_ == 'AverageCost':
            AverageCost_ = child_.text
            AverageCost_ = self.gds_validate_string(AverageCost_, node, 'AverageCost')
            self.AverageCost = AverageCost_
        elif nodeName_ == 'QuantityOnOrder':
            QuantityOnOrder_ = child_.text
            QuantityOnOrder_ = self.gds_validate_string(QuantityOnOrder_, node, 'QuantityOnOrder')
            self.QuantityOnOrder = QuantityOnOrder_
        elif nodeName_ == 'QuantityOnSalesOrder':
            QuantityOnSalesOrder_ = child_.text
            QuantityOnSalesOrder_ = self.gds_validate_string(QuantityOnSalesOrder_, node, 'QuantityOnSalesOrder')
            self.QuantityOnSalesOrder = QuantityOnSalesOrder_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'ItemInventoryAssemblyLine':
            obj_ = ItemInventoryAssemblyLine.factory()
            obj_.build(child_)
            self.ItemInventoryAssemblyLine.append(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemInventoryAssemblyRet


class FixedAssetSalesInfo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SalesDesc=None, SalesDate=None, SalesPrice=None, SalesExpense=None):
        self.SalesDesc = SalesDesc
        self.SalesDate = SalesDate
        self.SalesPrice = SalesPrice
        self.SalesExpense = SalesExpense
    def factory(*args_, **kwargs_):
        if FixedAssetSalesInfo.subclass:
            return FixedAssetSalesInfo.subclass(*args_, **kwargs_)
        else:
            return FixedAssetSalesInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SalesDesc(self): return self.SalesDesc
    def set_SalesDesc(self, SalesDesc): self.SalesDesc = SalesDesc
    def get_SalesDate(self): return self.SalesDate
    def set_SalesDate(self, SalesDate): self.SalesDate = SalesDate
    def get_SalesPrice(self): return self.SalesPrice
    def set_SalesPrice(self, SalesPrice): self.SalesPrice = SalesPrice
    def get_SalesExpense(self): return self.SalesExpense
    def set_SalesExpense(self, SalesExpense): self.SalesExpense = SalesExpense
    def export(self, outfile, level, namespace_='', name_='FixedAssetSalesInfo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FixedAssetSalesInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FixedAssetSalesInfo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FixedAssetSalesInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SalesDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDesc>%s</%sSalesDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDesc).encode(ExternalEncoding), input_name='SalesDesc'), namespace_, eol_))
        if self.SalesDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesDate>%s</%sSalesDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesDate).encode(ExternalEncoding), input_name='SalesDate'), namespace_, eol_))
        if self.SalesPrice is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesPrice>%s</%sSalesPrice>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesPrice).encode(ExternalEncoding), input_name='SalesPrice'), namespace_, eol_))
        if self.SalesExpense is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesExpense>%s</%sSalesExpense>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesExpense).encode(ExternalEncoding), input_name='SalesExpense'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.SalesDesc is not None or
            self.SalesDate is not None or
            self.SalesPrice is not None or
            self.SalesExpense is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FixedAssetSalesInfo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.SalesDesc is not None:
            showIndent(outfile, level)
            outfile.write('SalesDesc=%s,\n' % quote_python(self.SalesDesc).encode(ExternalEncoding))
        if self.SalesDate is not None:
            showIndent(outfile, level)
            outfile.write('SalesDate=%s,\n' % quote_python(self.SalesDate).encode(ExternalEncoding))
        if self.SalesPrice is not None:
            showIndent(outfile, level)
            outfile.write('SalesPrice=%s,\n' % quote_python(self.SalesPrice).encode(ExternalEncoding))
        if self.SalesExpense is not None:
            showIndent(outfile, level)
            outfile.write('SalesExpense=%s,\n' % quote_python(self.SalesExpense).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SalesDesc':
            SalesDesc_ = child_.text
            SalesDesc_ = self.gds_validate_string(SalesDesc_, node, 'SalesDesc')
            self.SalesDesc = SalesDesc_
        elif nodeName_ == 'SalesDate':
            SalesDate_ = child_.text
            SalesDate_ = re_.sub(String_cleanup_pat_, " ", SalesDate_).strip()
            SalesDate_ = self.gds_validate_string(SalesDate_, node, 'SalesDate')
            self.SalesDate = SalesDate_
        elif nodeName_ == 'SalesPrice':
            SalesPrice_ = child_.text
            SalesPrice_ = self.gds_validate_string(SalesPrice_, node, 'SalesPrice')
            self.SalesPrice = SalesPrice_
        elif nodeName_ == 'SalesExpense':
            SalesExpense_ = child_.text
            SalesExpense_ = self.gds_validate_string(SalesExpense_, node, 'SalesExpense')
            self.SalesExpense = SalesExpense_
# end class FixedAssetSalesInfo


class ItemFixedAssetRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ClassRef=None, AcquiredAs=None, PurchaseDesc=None, PurchaseDate=None, PurchaseCost=None, VendorOrPayeeName=None, AssetAccountRef=None, FixedAssetSalesInfo=None, AssetDesc=None, Location=None, PONumber=None, SerialNumber=None, WarrantyExpDate=None, Notes=None, AssetNumber=None, CostBasis=None, YearEndAccumulatedDepreciation=None, YearEndBookValue=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.AcquiredAs = AcquiredAs
        self.PurchaseDesc = PurchaseDesc
        self.PurchaseDate = PurchaseDate
        self.PurchaseCost = PurchaseCost
        self.VendorOrPayeeName = VendorOrPayeeName
        self.AssetAccountRef = AssetAccountRef
        self.FixedAssetSalesInfo = FixedAssetSalesInfo
        self.AssetDesc = AssetDesc
        self.Location = Location
        self.PONumber = PONumber
        self.SerialNumber = SerialNumber
        self.WarrantyExpDate = WarrantyExpDate
        self.Notes = Notes
        self.AssetNumber = AssetNumber
        self.CostBasis = CostBasis
        self.YearEndAccumulatedDepreciation = YearEndAccumulatedDepreciation
        self.YearEndBookValue = YearEndBookValue
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemFixedAssetRet.subclass:
            return ItemFixedAssetRet.subclass(*args_, **kwargs_)
        else:
            return ItemFixedAssetRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_AcquiredAs(self): return self.AcquiredAs
    def set_AcquiredAs(self, AcquiredAs): self.AcquiredAs = AcquiredAs
    def validate_AcquiredAs(self, value):
        # Validate type AcquiredAs, a restriction on ENUMTYPE.
        pass
    def get_PurchaseDesc(self): return self.PurchaseDesc
    def set_PurchaseDesc(self, PurchaseDesc): self.PurchaseDesc = PurchaseDesc
    def get_PurchaseDate(self): return self.PurchaseDate
    def set_PurchaseDate(self, PurchaseDate): self.PurchaseDate = PurchaseDate
    def get_PurchaseCost(self): return self.PurchaseCost
    def set_PurchaseCost(self, PurchaseCost): self.PurchaseCost = PurchaseCost
    def get_VendorOrPayeeName(self): return self.VendorOrPayeeName
    def set_VendorOrPayeeName(self, VendorOrPayeeName): self.VendorOrPayeeName = VendorOrPayeeName
    def get_AssetAccountRef(self): return self.AssetAccountRef
    def set_AssetAccountRef(self, AssetAccountRef): self.AssetAccountRef = AssetAccountRef
    def get_FixedAssetSalesInfo(self): return self.FixedAssetSalesInfo
    def set_FixedAssetSalesInfo(self, FixedAssetSalesInfo): self.FixedAssetSalesInfo = FixedAssetSalesInfo
    def get_AssetDesc(self): return self.AssetDesc
    def set_AssetDesc(self, AssetDesc): self.AssetDesc = AssetDesc
    def get_Location(self): return self.Location
    def set_Location(self, Location): self.Location = Location
    def get_PONumber(self): return self.PONumber
    def set_PONumber(self, PONumber): self.PONumber = PONumber
    def get_SerialNumber(self): return self.SerialNumber
    def set_SerialNumber(self, SerialNumber): self.SerialNumber = SerialNumber
    def get_WarrantyExpDate(self): return self.WarrantyExpDate
    def set_WarrantyExpDate(self, WarrantyExpDate): self.WarrantyExpDate = WarrantyExpDate
    def get_Notes(self): return self.Notes
    def set_Notes(self, Notes): self.Notes = Notes
    def get_AssetNumber(self): return self.AssetNumber
    def set_AssetNumber(self, AssetNumber): self.AssetNumber = AssetNumber
    def get_CostBasis(self): return self.CostBasis
    def set_CostBasis(self, CostBasis): self.CostBasis = CostBasis
    def get_YearEndAccumulatedDepreciation(self): return self.YearEndAccumulatedDepreciation
    def set_YearEndAccumulatedDepreciation(self, YearEndAccumulatedDepreciation): self.YearEndAccumulatedDepreciation = YearEndAccumulatedDepreciation
    def get_YearEndBookValue(self): return self.YearEndBookValue
    def set_YearEndBookValue(self, YearEndBookValue): self.YearEndBookValue = YearEndBookValue
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemFixedAssetRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemFixedAssetRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemFixedAssetRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemFixedAssetRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.AcquiredAs is not None:
            self.AcquiredAs.export(outfile, level, namespace_, name_='AcquiredAs', pretty_print=pretty_print)
        if self.PurchaseDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDesc>%s</%sPurchaseDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDesc).encode(ExternalEncoding), input_name='PurchaseDesc'), namespace_, eol_))
        if self.PurchaseDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseDate>%s</%sPurchaseDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseDate).encode(ExternalEncoding), input_name='PurchaseDate'), namespace_, eol_))
        if self.PurchaseCost is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPurchaseCost>%s</%sPurchaseCost>%s' % (namespace_, self.gds_format_string(quote_xml(self.PurchaseCost).encode(ExternalEncoding), input_name='PurchaseCost'), namespace_, eol_))
        if self.VendorOrPayeeName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVendorOrPayeeName>%s</%sVendorOrPayeeName>%s' % (namespace_, self.gds_format_string(quote_xml(self.VendorOrPayeeName).encode(ExternalEncoding), input_name='VendorOrPayeeName'), namespace_, eol_))
        if self.AssetAccountRef is not None:
            self.AssetAccountRef.export(outfile, level, namespace_, name_='AssetAccountRef', pretty_print=pretty_print)
        if self.FixedAssetSalesInfo is not None:
            self.FixedAssetSalesInfo.export(outfile, level, namespace_, name_='FixedAssetSalesInfo', pretty_print=pretty_print)
        if self.AssetDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssetDesc>%s</%sAssetDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.AssetDesc).encode(ExternalEncoding), input_name='AssetDesc'), namespace_, eol_))
        if self.Location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLocation>%s</%sLocation>%s' % (namespace_, self.gds_format_string(quote_xml(self.Location).encode(ExternalEncoding), input_name='Location'), namespace_, eol_))
        if self.PONumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPONumber>%s</%sPONumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.PONumber).encode(ExternalEncoding), input_name='PONumber'), namespace_, eol_))
        if self.SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.SerialNumber).encode(ExternalEncoding), input_name='SerialNumber'), namespace_, eol_))
        if self.WarrantyExpDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sWarrantyExpDate>%s</%sWarrantyExpDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.WarrantyExpDate).encode(ExternalEncoding), input_name='WarrantyExpDate'), namespace_, eol_))
        if self.Notes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNotes>%s</%sNotes>%s' % (namespace_, self.gds_format_string(quote_xml(self.Notes).encode(ExternalEncoding), input_name='Notes'), namespace_, eol_))
        if self.AssetNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAssetNumber>%s</%sAssetNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.AssetNumber).encode(ExternalEncoding), input_name='AssetNumber'), namespace_, eol_))
        if self.CostBasis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCostBasis>%s</%sCostBasis>%s' % (namespace_, self.gds_format_string(quote_xml(self.CostBasis).encode(ExternalEncoding), input_name='CostBasis'), namespace_, eol_))
        if self.YearEndAccumulatedDepreciation is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYearEndAccumulatedDepreciation>%s</%sYearEndAccumulatedDepreciation>%s' % (namespace_, self.gds_format_string(quote_xml(self.YearEndAccumulatedDepreciation).encode(ExternalEncoding), input_name='YearEndAccumulatedDepreciation'), namespace_, eol_))
        if self.YearEndBookValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sYearEndBookValue>%s</%sYearEndBookValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.YearEndBookValue).encode(ExternalEncoding), input_name='YearEndBookValue'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.AcquiredAs is not None or
            self.PurchaseDesc is not None or
            self.PurchaseDate is not None or
            self.PurchaseCost is not None or
            self.VendorOrPayeeName is not None or
            self.AssetAccountRef is not None or
            self.FixedAssetSalesInfo is not None or
            self.AssetDesc is not None or
            self.Location is not None or
            self.PONumber is not None or
            self.SerialNumber is not None or
            self.WarrantyExpDate is not None or
            self.Notes is not None or
            self.AssetNumber is not None or
            self.CostBasis is not None or
            self.YearEndAccumulatedDepreciation is not None or
            self.YearEndBookValue is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemFixedAssetRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AcquiredAs is not None:
            showIndent(outfile, level)
            outfile.write('AcquiredAs=model_.AcquiredAs(\n')
            self.AcquiredAs.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PurchaseDesc is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDesc=%s,\n' % quote_python(self.PurchaseDesc).encode(ExternalEncoding))
        if self.PurchaseDate is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseDate=%s,\n' % quote_python(self.PurchaseDate).encode(ExternalEncoding))
        if self.PurchaseCost is not None:
            showIndent(outfile, level)
            outfile.write('PurchaseCost=%s,\n' % quote_python(self.PurchaseCost).encode(ExternalEncoding))
        if self.VendorOrPayeeName is not None:
            showIndent(outfile, level)
            outfile.write('VendorOrPayeeName=%s,\n' % quote_python(self.VendorOrPayeeName).encode(ExternalEncoding))
        if self.AssetAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AssetAccountRef=model_.AssetAccountRef(\n')
            self.AssetAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FixedAssetSalesInfo is not None:
            showIndent(outfile, level)
            outfile.write('FixedAssetSalesInfo=model_.FixedAssetSalesInfo(\n')
            self.FixedAssetSalesInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.AssetDesc is not None:
            showIndent(outfile, level)
            outfile.write('AssetDesc=%s,\n' % quote_python(self.AssetDesc).encode(ExternalEncoding))
        if self.Location is not None:
            showIndent(outfile, level)
            outfile.write('Location=%s,\n' % quote_python(self.Location).encode(ExternalEncoding))
        if self.PONumber is not None:
            showIndent(outfile, level)
            outfile.write('PONumber=%s,\n' % quote_python(self.PONumber).encode(ExternalEncoding))
        if self.SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('SerialNumber=%s,\n' % quote_python(self.SerialNumber).encode(ExternalEncoding))
        if self.WarrantyExpDate is not None:
            showIndent(outfile, level)
            outfile.write('WarrantyExpDate=%s,\n' % quote_python(self.WarrantyExpDate).encode(ExternalEncoding))
        if self.Notes is not None:
            showIndent(outfile, level)
            outfile.write('Notes=%s,\n' % quote_python(self.Notes).encode(ExternalEncoding))
        if self.AssetNumber is not None:
            showIndent(outfile, level)
            outfile.write('AssetNumber=%s,\n' % quote_python(self.AssetNumber).encode(ExternalEncoding))
        if self.CostBasis is not None:
            showIndent(outfile, level)
            outfile.write('CostBasis=%s,\n' % quote_python(self.CostBasis).encode(ExternalEncoding))
        if self.YearEndAccumulatedDepreciation is not None:
            showIndent(outfile, level)
            outfile.write('YearEndAccumulatedDepreciation=%s,\n' % quote_python(self.YearEndAccumulatedDepreciation).encode(ExternalEncoding))
        if self.YearEndBookValue is not None:
            showIndent(outfile, level)
            outfile.write('YearEndBookValue=%s,\n' % quote_python(self.YearEndBookValue).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'AcquiredAs':
            obj_ = None
            self.set_AcquiredAs(obj_)
            self.validate_AcquiredAs(self.AcquiredAs)    # validate type AcquiredAs
        elif nodeName_ == 'PurchaseDesc':
            PurchaseDesc_ = child_.text
            PurchaseDesc_ = self.gds_validate_string(PurchaseDesc_, node, 'PurchaseDesc')
            self.PurchaseDesc = PurchaseDesc_
        elif nodeName_ == 'PurchaseDate':
            PurchaseDate_ = child_.text
            PurchaseDate_ = re_.sub(String_cleanup_pat_, " ", PurchaseDate_).strip()
            PurchaseDate_ = self.gds_validate_string(PurchaseDate_, node, 'PurchaseDate')
            self.PurchaseDate = PurchaseDate_
        elif nodeName_ == 'PurchaseCost':
            PurchaseCost_ = child_.text
            PurchaseCost_ = self.gds_validate_string(PurchaseCost_, node, 'PurchaseCost')
            self.PurchaseCost = PurchaseCost_
        elif nodeName_ == 'VendorOrPayeeName':
            VendorOrPayeeName_ = child_.text
            VendorOrPayeeName_ = self.gds_validate_string(VendorOrPayeeName_, node, 'VendorOrPayeeName')
            self.VendorOrPayeeName = VendorOrPayeeName_
        elif nodeName_ == 'AssetAccountRef':
            obj_ = AssetAccountRef.factory()
            obj_.build(child_)
            self.set_AssetAccountRef(obj_)
        elif nodeName_ == 'FixedAssetSalesInfo':
            obj_ = FixedAssetSalesInfo.factory()
            obj_.build(child_)
            self.set_FixedAssetSalesInfo(obj_)
        elif nodeName_ == 'AssetDesc':
            AssetDesc_ = child_.text
            AssetDesc_ = self.gds_validate_string(AssetDesc_, node, 'AssetDesc')
            self.AssetDesc = AssetDesc_
        elif nodeName_ == 'Location':
            Location_ = child_.text
            Location_ = self.gds_validate_string(Location_, node, 'Location')
            self.Location = Location_
        elif nodeName_ == 'PONumber':
            PONumber_ = child_.text
            PONumber_ = self.gds_validate_string(PONumber_, node, 'PONumber')
            self.PONumber = PONumber_
        elif nodeName_ == 'SerialNumber':
            SerialNumber_ = child_.text
            SerialNumber_ = self.gds_validate_string(SerialNumber_, node, 'SerialNumber')
            self.SerialNumber = SerialNumber_
        elif nodeName_ == 'WarrantyExpDate':
            WarrantyExpDate_ = child_.text
            WarrantyExpDate_ = re_.sub(String_cleanup_pat_, " ", WarrantyExpDate_).strip()
            WarrantyExpDate_ = self.gds_validate_string(WarrantyExpDate_, node, 'WarrantyExpDate')
            self.WarrantyExpDate = WarrantyExpDate_
        elif nodeName_ == 'Notes':
            Notes_ = child_.text
            Notes_ = self.gds_validate_string(Notes_, node, 'Notes')
            self.Notes = Notes_
        elif nodeName_ == 'AssetNumber':
            AssetNumber_ = child_.text
            AssetNumber_ = self.gds_validate_string(AssetNumber_, node, 'AssetNumber')
            self.AssetNumber = AssetNumber_
        elif nodeName_ == 'CostBasis':
            CostBasis_ = child_.text
            CostBasis_ = self.gds_validate_string(CostBasis_, node, 'CostBasis')
            self.CostBasis = CostBasis_
        elif nodeName_ == 'YearEndAccumulatedDepreciation':
            YearEndAccumulatedDepreciation_ = child_.text
            YearEndAccumulatedDepreciation_ = self.gds_validate_string(YearEndAccumulatedDepreciation_, node, 'YearEndAccumulatedDepreciation')
            self.YearEndAccumulatedDepreciation = YearEndAccumulatedDepreciation_
        elif nodeName_ == 'YearEndBookValue':
            YearEndBookValue_ = child_.text
            YearEndBookValue_ = self.gds_validate_string(YearEndBookValue_, node, 'YearEndBookValue')
            self.YearEndBookValue = YearEndBookValue_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemFixedAssetRet


class VendorOrPayeeName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if VendorOrPayeeName.subclass:
            return VendorOrPayeeName.subclass(*args_, **kwargs_)
        else:
            return VendorOrPayeeName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='VendorOrPayeeName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VendorOrPayeeName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VendorOrPayeeName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VendorOrPayeeName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='VendorOrPayeeName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VendorOrPayeeName


class AssetDesc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AssetDesc.subclass:
            return AssetDesc.subclass(*args_, **kwargs_)
        else:
            return AssetDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AssetDesc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssetDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssetDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AssetDesc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AssetDesc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AssetDesc


class Location(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Location.subclass:
            return Location.subclass(*args_, **kwargs_)
        else:
            return Location(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Location', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Location')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Location'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Location', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Location'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Location


class PONumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if PONumber.subclass:
            return PONumber.subclass(*args_, **kwargs_)
        else:
            return PONumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='PONumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PONumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PONumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PONumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PONumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PONumber


class SerialNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if SerialNumber.subclass:
            return SerialNumber.subclass(*args_, **kwargs_)
        else:
            return SerialNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='SerialNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SerialNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SerialNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SerialNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SerialNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SerialNumber


class AssetNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if AssetNumber.subclass:
            return AssetNumber.subclass(*args_, **kwargs_)
        else:
            return AssetNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='AssetNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AssetNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AssetNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AssetNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='AssetNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class AssetNumber


class ItemSubtotalRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ItemDesc=None, SpecialItemType=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ItemDesc = ItemDesc
        self.SpecialItemType = SpecialItemType
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemSubtotalRet.subclass:
            return ItemSubtotalRet.subclass(*args_, **kwargs_)
        else:
            return ItemSubtotalRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def validate_ItemDesc(self, value):
        # Validate type ItemDesc, a restriction on STRTYPE.
        pass
    def get_SpecialItemType(self): return self.SpecialItemType
    def set_SpecialItemType(self, SpecialItemType): self.SpecialItemType = SpecialItemType
    def validate_SpecialItemType(self, value):
        # Validate type SpecialItemType, a restriction on ENUMTYPE.
        pass
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemSubtotalRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemSubtotalRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemSubtotalRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemSubtotalRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.SpecialItemType is not None:
            self.SpecialItemType.export(outfile, level, namespace_, name_='SpecialItemType', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ItemDesc is not None or
            self.SpecialItemType is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemSubtotalRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.SpecialItemType is not None:
            showIndent(outfile, level)
            outfile.write('SpecialItemType=model_.SpecialItemType(\n')
            self.SpecialItemType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
            self.validate_ItemDesc(self.ItemDesc)    # validate type ItemDesc
        elif nodeName_ == 'SpecialItemType':
            obj_ = None
            self.set_SpecialItemType(obj_)
            self.validate_SpecialItemType(self.SpecialItemType)    # validate type SpecialItemType
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemSubtotalRet


class ItemDiscountRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, FullName=None, BarCodeValue=None, IsActive=None, ClassRef=None, ParentRef=None, Sublevel=None, ItemDesc=None, SalesTaxCodeRef=None, DiscountRate=None, DiscountRatePercent=None, AccountRef=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.FullName = FullName
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ParentRef = ParentRef
        self.Sublevel = Sublevel
        self.ItemDesc = ItemDesc
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.DiscountRate = DiscountRate
        self.DiscountRatePercent = DiscountRatePercent
        self.AccountRef = AccountRef
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemDiscountRet.subclass:
            return ItemDiscountRet.subclass(*args_, **kwargs_)
        else:
            return ItemDiscountRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_FullName(self): return self.FullName
    def set_FullName(self, FullName): self.FullName = FullName
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ParentRef(self): return self.ParentRef
    def set_ParentRef(self, ParentRef): self.ParentRef = ParentRef
    def get_Sublevel(self): return self.Sublevel
    def set_Sublevel(self, Sublevel): self.Sublevel = Sublevel
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_DiscountRate(self): return self.DiscountRate
    def set_DiscountRate(self, DiscountRate): self.DiscountRate = DiscountRate
    def get_DiscountRatePercent(self): return self.DiscountRatePercent
    def set_DiscountRatePercent(self, DiscountRatePercent): self.DiscountRatePercent = DiscountRatePercent
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemDiscountRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemDiscountRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemDiscountRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemDiscountRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.FullName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFullName>%s</%sFullName>%s' % (namespace_, self.gds_format_string(quote_xml(self.FullName).encode(ExternalEncoding), input_name='FullName'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ParentRef is not None:
            self.ParentRef.export(outfile, level, namespace_, name_='ParentRef', pretty_print=pretty_print)
        if self.Sublevel is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSublevel>%s</%sSublevel>%s' % (namespace_, self.gds_format_integer(self.Sublevel, input_name='Sublevel'), namespace_, eol_))
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.DiscountRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscountRate>%s</%sDiscountRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.DiscountRate).encode(ExternalEncoding), input_name='DiscountRate'), namespace_, eol_))
        if self.DiscountRatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscountRatePercent>%s</%sDiscountRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.DiscountRatePercent).encode(ExternalEncoding), input_name='DiscountRatePercent'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.FullName is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ParentRef is not None or
            self.Sublevel is not None or
            self.ItemDesc is not None or
            self.SalesTaxCodeRef is not None or
            self.DiscountRate is not None or
            self.DiscountRatePercent is not None or
            self.AccountRef is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemDiscountRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.FullName is not None:
            showIndent(outfile, level)
            outfile.write('FullName=%s,\n' % quote_python(self.FullName).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ParentRef is not None:
            showIndent(outfile, level)
            outfile.write('ParentRef=model_.ParentRef(\n')
            self.ParentRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Sublevel is not None:
            showIndent(outfile, level)
            outfile.write('Sublevel=%d,\n' % self.Sublevel)
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DiscountRate is not None:
            showIndent(outfile, level)
            outfile.write('DiscountRate=%s,\n' % quote_python(self.DiscountRate).encode(ExternalEncoding))
        if self.DiscountRatePercent is not None:
            showIndent(outfile, level)
            outfile.write('DiscountRatePercent=%s,\n' % quote_python(self.DiscountRatePercent).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'FullName':
            FullName_ = child_.text
            FullName_ = self.gds_validate_string(FullName_, node, 'FullName')
            self.FullName = FullName_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ParentRef':
            obj_ = ParentRef.factory()
            obj_.build(child_)
            self.set_ParentRef(obj_)
        elif nodeName_ == 'Sublevel':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Sublevel')
            self.Sublevel = ival_
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'DiscountRate':
            DiscountRate_ = child_.text
            DiscountRate_ = self.gds_validate_string(DiscountRate_, node, 'DiscountRate')
            self.DiscountRate = DiscountRate_
        elif nodeName_ == 'DiscountRatePercent':
            DiscountRatePercent_ = child_.text
            DiscountRatePercent_ = self.gds_validate_string(DiscountRatePercent_, node, 'DiscountRatePercent')
            self.DiscountRatePercent = DiscountRatePercent_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemDiscountRet


class ItemDesc(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if ItemDesc.subclass:
            return ItemDesc.subclass(*args_, **kwargs_)
        else:
            return ItemDesc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='ItemDesc', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemDesc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemDesc'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemDesc', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemDesc'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ItemDesc


class ItemPaymentRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ClassRef=None, ItemDesc=None, DepositToAccountRef=None, PaymentMethodRef=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ItemDesc = ItemDesc
        self.DepositToAccountRef = DepositToAccountRef
        self.PaymentMethodRef = PaymentMethodRef
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemPaymentRet.subclass:
            return ItemPaymentRet.subclass(*args_, **kwargs_)
        else:
            return ItemPaymentRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def get_DepositToAccountRef(self): return self.DepositToAccountRef
    def set_DepositToAccountRef(self, DepositToAccountRef): self.DepositToAccountRef = DepositToAccountRef
    def get_PaymentMethodRef(self): return self.PaymentMethodRef
    def set_PaymentMethodRef(self, PaymentMethodRef): self.PaymentMethodRef = PaymentMethodRef
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemPaymentRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemPaymentRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemPaymentRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemPaymentRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.DepositToAccountRef is not None:
            self.DepositToAccountRef.export(outfile, level, namespace_, name_='DepositToAccountRef', pretty_print=pretty_print)
        if self.PaymentMethodRef is not None:
            self.PaymentMethodRef.export(outfile, level, namespace_, name_='PaymentMethodRef', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ItemDesc is not None or
            self.DepositToAccountRef is not None or
            self.PaymentMethodRef is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemPaymentRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.DepositToAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('DepositToAccountRef=model_.DepositToAccountRef(\n')
            self.DepositToAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.PaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PaymentMethodRef=model_.PaymentMethodRef(\n')
            self.PaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
        elif nodeName_ == 'DepositToAccountRef':
            obj_ = DepositToAccountRef.factory()
            obj_.build(child_)
            self.set_DepositToAccountRef(obj_)
        elif nodeName_ == 'PaymentMethodRef':
            obj_ = PaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PaymentMethodRef(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemPaymentRet


class ItemSalesTaxRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ClassRef=None, ItemDesc=None, TaxRate=None, TaxVendorRef=None, SalesTaxReturnLineRef=None, ExternalGUID=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ClassRef = ClassRef
        self.ItemDesc = ItemDesc
        self.TaxRate = TaxRate
        self.TaxVendorRef = TaxVendorRef
        self.SalesTaxReturnLineRef = SalesTaxReturnLineRef
        self.ExternalGUID = ExternalGUID
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemSalesTaxRet.subclass:
            return ItemSalesTaxRet.subclass(*args_, **kwargs_)
        else:
            return ItemSalesTaxRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def get_TaxRate(self): return self.TaxRate
    def set_TaxRate(self, TaxRate): self.TaxRate = TaxRate
    def get_TaxVendorRef(self): return self.TaxVendorRef
    def set_TaxVendorRef(self, TaxVendorRef): self.TaxVendorRef = TaxVendorRef
    def get_SalesTaxReturnLineRef(self): return self.SalesTaxReturnLineRef
    def set_SalesTaxReturnLineRef(self, SalesTaxReturnLineRef): self.SalesTaxReturnLineRef = SalesTaxReturnLineRef
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemSalesTaxRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemSalesTaxRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemSalesTaxRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemSalesTaxRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.TaxRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxRate>%s</%sTaxRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxRate).encode(ExternalEncoding), input_name='TaxRate'), namespace_, eol_))
        if self.TaxVendorRef is not None:
            self.TaxVendorRef.export(outfile, level, namespace_, name_='TaxVendorRef', pretty_print=pretty_print)
        if self.SalesTaxReturnLineRef is not None:
            self.SalesTaxReturnLineRef.export(outfile, level, namespace_, name_='SalesTaxReturnLineRef', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ClassRef is not None or
            self.ItemDesc is not None or
            self.TaxRate is not None or
            self.TaxVendorRef is not None or
            self.SalesTaxReturnLineRef is not None or
            self.ExternalGUID is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemSalesTaxRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.TaxRate is not None:
            showIndent(outfile, level)
            outfile.write('TaxRate=%s,\n' % quote_python(self.TaxRate).encode(ExternalEncoding))
        if self.TaxVendorRef is not None:
            showIndent(outfile, level)
            outfile.write('TaxVendorRef=model_.TaxVendorRef(\n')
            self.TaxVendorRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxReturnLineRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxReturnLineRef=model_.SalesTaxReturnLineRef(\n')
            self.SalesTaxReturnLineRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
        elif nodeName_ == 'TaxRate':
            TaxRate_ = child_.text
            TaxRate_ = self.gds_validate_string(TaxRate_, node, 'TaxRate')
            self.TaxRate = TaxRate_
        elif nodeName_ == 'TaxVendorRef':
            obj_ = TaxVendorRef.factory()
            obj_.build(child_)
            self.set_TaxVendorRef(obj_)
        elif nodeName_ == 'SalesTaxReturnLineRef':
            obj_ = SalesTaxReturnLineRef.factory()
            obj_.build(child_)
            self.set_SalesTaxReturnLineRef(obj_)
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemSalesTaxRet


class ItemSalesTaxGroupRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ItemDesc=None, ExternalGUID=None, ItemSalesTaxRef=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ItemDesc = ItemDesc
        self.ExternalGUID = ExternalGUID
        if ItemSalesTaxRef is None:
            self.ItemSalesTaxRef = []
        else:
            self.ItemSalesTaxRef = ItemSalesTaxRef
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemSalesTaxGroupRet.subclass:
            return ItemSalesTaxGroupRet.subclass(*args_, **kwargs_)
        else:
            return ItemSalesTaxGroupRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def add_ItemSalesTaxRef(self, value): self.ItemSalesTaxRef.append(value)
    def insert_ItemSalesTaxRef(self, index, value): self.ItemSalesTaxRef[index] = value
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemSalesTaxGroupRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemSalesTaxGroupRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemSalesTaxGroupRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemSalesTaxGroupRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for ItemSalesTaxRef_ in self.ItemSalesTaxRef:
            ItemSalesTaxRef_.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ItemDesc is not None or
            self.ExternalGUID is not None or
            self.ItemSalesTaxRef or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemSalesTaxGroupRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ItemSalesTaxRef=[\n')
        level += 1
        for ItemSalesTaxRef_ in self.ItemSalesTaxRef:
            showIndent(outfile, level)
            outfile.write('model_.ItemSalesTaxRef(\n')
            ItemSalesTaxRef_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.ItemSalesTaxRef.append(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemSalesTaxGroupRet


class ItemGroupLine(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemRef=None, Quantity=None, UnitOfMeasure=None):
        self.ItemRef = ItemRef
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
    def factory(*args_, **kwargs_):
        if ItemGroupLine.subclass:
            return ItemGroupLine.subclass(*args_, **kwargs_)
        else:
            return ItemGroupLine(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemRef(self): return self.ItemRef
    def set_ItemRef(self, ItemRef): self.ItemRef = ItemRef
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def export(self, outfile, level, namespace_='', name_='ItemGroupLine', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemGroupLine')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemGroupLine'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemGroupLine', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemRef is not None:
            self.ItemRef.export(outfile, level, namespace_, name_='ItemRef', pretty_print=pretty_print)
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ItemRef is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemGroupLine'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemRef=model_.ItemRef(\n')
            self.ItemRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemRef':
            obj_ = ItemRef.factory()
            obj_.build(child_)
            self.set_ItemRef(obj_)
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
# end class ItemGroupLine


class UnitOfMeasure(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if UnitOfMeasure.subclass:
            return UnitOfMeasure.subclass(*args_, **kwargs_)
        else:
            return UnitOfMeasure(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='UnitOfMeasure', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='UnitOfMeasure')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='UnitOfMeasure'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='UnitOfMeasure', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='UnitOfMeasure'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class UnitOfMeasure


class ItemGroupRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListID=None, TimeCreated=None, TimeModified=None, EditSequence=None, Name=None, BarCodeValue=None, IsActive=None, ItemDesc=None, UnitOfMeasureSetRef=None, IsPrintItemsInGroup=None, SpecialItemType=None, ExternalGUID=None, ItemGroupLine=None, DataExtRet=None):
        self.ListID = ListID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.Name = Name
        self.BarCodeValue = BarCodeValue
        self.IsActive = IsActive
        self.ItemDesc = ItemDesc
        self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
        self.IsPrintItemsInGroup = IsPrintItemsInGroup
        self.SpecialItemType = SpecialItemType
        self.ExternalGUID = ExternalGUID
        if ItemGroupLine is None:
            self.ItemGroupLine = []
        else:
            self.ItemGroupLine = ItemGroupLine
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if ItemGroupRet.subclass:
            return ItemGroupRet.subclass(*args_, **kwargs_)
        else:
            return ItemGroupRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ListID(self): return self.ListID
    def set_ListID(self, ListID): self.ListID = ListID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_Name(self): return self.Name
    def set_Name(self, Name): self.Name = Name
    def get_BarCodeValue(self): return self.BarCodeValue
    def set_BarCodeValue(self, BarCodeValue): self.BarCodeValue = BarCodeValue
    def get_IsActive(self): return self.IsActive
    def set_IsActive(self, IsActive): self.IsActive = IsActive
    def get_ItemDesc(self): return self.ItemDesc
    def set_ItemDesc(self, ItemDesc): self.ItemDesc = ItemDesc
    def get_UnitOfMeasureSetRef(self): return self.UnitOfMeasureSetRef
    def set_UnitOfMeasureSetRef(self, UnitOfMeasureSetRef): self.UnitOfMeasureSetRef = UnitOfMeasureSetRef
    def get_IsPrintItemsInGroup(self): return self.IsPrintItemsInGroup
    def set_IsPrintItemsInGroup(self, IsPrintItemsInGroup): self.IsPrintItemsInGroup = IsPrintItemsInGroup
    def get_SpecialItemType(self): return self.SpecialItemType
    def set_SpecialItemType(self, SpecialItemType): self.SpecialItemType = SpecialItemType
    def validate_SpecialItemType(self, value):
        # Validate type SpecialItemType, a restriction on ENUMTYPE.
        pass
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_ItemGroupLine(self): return self.ItemGroupLine
    def set_ItemGroupLine(self, ItemGroupLine): self.ItemGroupLine = ItemGroupLine
    def add_ItemGroupLine(self, value): self.ItemGroupLine.append(value)
    def insert_ItemGroupLine(self, index, value): self.ItemGroupLine[index] = value
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='ItemGroupRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ItemGroupRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ItemGroupRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ItemGroupRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sListID>%s</%sListID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ListID).encode(ExternalEncoding), input_name='ListID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.Name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sName>%s</%sName>%s' % (namespace_, self.gds_format_string(quote_xml(self.Name).encode(ExternalEncoding), input_name='Name'), namespace_, eol_))
        if self.BarCodeValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBarCodeValue>%s</%sBarCodeValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.BarCodeValue).encode(ExternalEncoding), input_name='BarCodeValue'), namespace_, eol_))
        if self.IsActive is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsActive>%s</%sIsActive>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsActive).encode(ExternalEncoding), input_name='IsActive'), namespace_, eol_))
        if self.ItemDesc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemDesc>%s</%sItemDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.ItemDesc).encode(ExternalEncoding), input_name='ItemDesc'), namespace_, eol_))
        if self.UnitOfMeasureSetRef is not None:
            self.UnitOfMeasureSetRef.export(outfile, level, namespace_, name_='UnitOfMeasureSetRef', pretty_print=pretty_print)
        if self.IsPrintItemsInGroup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrintItemsInGroup>%s</%sIsPrintItemsInGroup>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsPrintItemsInGroup).encode(ExternalEncoding), input_name='IsPrintItemsInGroup'), namespace_, eol_))
        if self.SpecialItemType is not None:
            self.SpecialItemType.export(outfile, level, namespace_, name_='SpecialItemType', pretty_print=pretty_print)
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for ItemGroupLine_ in self.ItemGroupLine:
            ItemGroupLine_.export(outfile, level, namespace_, name_='ItemGroupLine', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ListID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.Name is not None or
            self.BarCodeValue is not None or
            self.IsActive is not None or
            self.ItemDesc is not None or
            self.UnitOfMeasureSetRef is not None or
            self.IsPrintItemsInGroup is not None or
            self.SpecialItemType is not None or
            self.ExternalGUID is not None or
            self.ItemGroupLine or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ItemGroupRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ListID is not None:
            showIndent(outfile, level)
            outfile.write('ListID=%s,\n' % quote_python(self.ListID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.Name is not None:
            showIndent(outfile, level)
            outfile.write('Name=%s,\n' % quote_python(self.Name).encode(ExternalEncoding))
        if self.BarCodeValue is not None:
            showIndent(outfile, level)
            outfile.write('BarCodeValue=%s,\n' % quote_python(self.BarCodeValue).encode(ExternalEncoding))
        if self.IsActive is not None:
            showIndent(outfile, level)
            outfile.write('IsActive=%s,\n' % quote_python(self.IsActive).encode(ExternalEncoding))
        if self.ItemDesc is not None:
            showIndent(outfile, level)
            outfile.write('ItemDesc=%s,\n' % quote_python(self.ItemDesc).encode(ExternalEncoding))
        if self.UnitOfMeasureSetRef is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasureSetRef=model_.UnitOfMeasureSetRef(\n')
            self.UnitOfMeasureSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsPrintItemsInGroup is not None:
            showIndent(outfile, level)
            outfile.write('IsPrintItemsInGroup=%s,\n' % quote_python(self.IsPrintItemsInGroup).encode(ExternalEncoding))
        if self.SpecialItemType is not None:
            showIndent(outfile, level)
            outfile.write('SpecialItemType=model_.SpecialItemType(\n')
            self.SpecialItemType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('ItemGroupLine=[\n')
        level += 1
        for ItemGroupLine_ in self.ItemGroupLine:
            showIndent(outfile, level)
            outfile.write('model_.ItemGroupLine(\n')
            ItemGroupLine_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListID':
            ListID_ = child_.text
            ListID_ = self.gds_validate_string(ListID_, node, 'ListID')
            self.ListID = ListID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'Name':
            Name_ = child_.text
            Name_ = self.gds_validate_string(Name_, node, 'Name')
            self.Name = Name_
        elif nodeName_ == 'BarCodeValue':
            BarCodeValue_ = child_.text
            BarCodeValue_ = self.gds_validate_string(BarCodeValue_, node, 'BarCodeValue')
            self.BarCodeValue = BarCodeValue_
        elif nodeName_ == 'IsActive':
            IsActive_ = child_.text
            IsActive_ = re_.sub(String_cleanup_pat_, " ", IsActive_).strip()
            IsActive_ = self.gds_validate_string(IsActive_, node, 'IsActive')
            self.IsActive = IsActive_
        elif nodeName_ == 'ItemDesc':
            ItemDesc_ = child_.text
            ItemDesc_ = self.gds_validate_string(ItemDesc_, node, 'ItemDesc')
            self.ItemDesc = ItemDesc_
        elif nodeName_ == 'UnitOfMeasureSetRef':
            obj_ = UnitOfMeasureSetRef.factory()
            obj_.build(child_)
            self.set_UnitOfMeasureSetRef(obj_)
        elif nodeName_ == 'IsPrintItemsInGroup':
            IsPrintItemsInGroup_ = child_.text
            IsPrintItemsInGroup_ = re_.sub(String_cleanup_pat_, " ", IsPrintItemsInGroup_).strip()
            IsPrintItemsInGroup_ = self.gds_validate_string(IsPrintItemsInGroup_, node, 'IsPrintItemsInGroup')
            self.IsPrintItemsInGroup = IsPrintItemsInGroup_
        elif nodeName_ == 'SpecialItemType':
            obj_ = None
            self.set_SpecialItemType(obj_)
            self.validate_SpecialItemType(self.SpecialItemType)    # validate type SpecialItemType
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'ItemGroupLine':
            obj_ = ItemGroupLine.factory()
            obj_.build(child_)
            self.ItemGroupLine.append(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class ItemGroupRet


class DiscountLineAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, RatePercent=None, IsTaxable=None, AccountRef=None):
        self.Amount = Amount
        self.RatePercent = RatePercent
        self.IsTaxable = IsTaxable
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if DiscountLineAdd.subclass:
            return DiscountLineAdd.subclass(*args_, **kwargs_)
        else:
            return DiscountLineAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_IsTaxable(self): return self.IsTaxable
    def set_IsTaxable(self, IsTaxable): self.IsTaxable = IsTaxable
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='DiscountLineAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DiscountLineAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DiscountLineAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DiscountLineAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.IsTaxable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxable>%s</%sIsTaxable>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxable).encode(ExternalEncoding), input_name='IsTaxable'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.RatePercent is not None or
            self.IsTaxable is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DiscountLineAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.IsTaxable is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxable=%s,\n' % quote_python(self.IsTaxable).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'IsTaxable':
            IsTaxable_ = child_.text
            IsTaxable_ = re_.sub(String_cleanup_pat_, " ", IsTaxable_).strip()
            IsTaxable_ = self.gds_validate_string(IsTaxable_, node, 'IsTaxable')
            self.IsTaxable = IsTaxable_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class DiscountLineAdd


class SalesTaxLineAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, RatePercent=None, AccountRef=None):
        self.Amount = Amount
        self.RatePercent = RatePercent
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if SalesTaxLineAdd.subclass:
            return SalesTaxLineAdd.subclass(*args_, **kwargs_)
        else:
            return SalesTaxLineAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='SalesTaxLineAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxLineAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxLineAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxLineAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.RatePercent is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxLineAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class SalesTaxLineAdd


class ShippingLineAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, AccountRef=None):
        self.Amount = Amount
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if ShippingLineAdd.subclass:
            return ShippingLineAdd.subclass(*args_, **kwargs_)
        else:
            return ShippingLineAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='ShippingLineAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingLineAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShippingLineAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShippingLineAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingLineAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class ShippingLineAdd


class DiscountLineRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, RatePercent=None, IsTaxable=None, AccountRef=None):
        self.Amount = Amount
        self.RatePercent = RatePercent
        self.IsTaxable = IsTaxable
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if DiscountLineRet.subclass:
            return DiscountLineRet.subclass(*args_, **kwargs_)
        else:
            return DiscountLineRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_IsTaxable(self): return self.IsTaxable
    def set_IsTaxable(self, IsTaxable): self.IsTaxable = IsTaxable
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='DiscountLineRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DiscountLineRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DiscountLineRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DiscountLineRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.IsTaxable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxable>%s</%sIsTaxable>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxable).encode(ExternalEncoding), input_name='IsTaxable'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.RatePercent is not None or
            self.IsTaxable is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DiscountLineRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.IsTaxable is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxable=%s,\n' % quote_python(self.IsTaxable).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'IsTaxable':
            IsTaxable_ = child_.text
            IsTaxable_ = re_.sub(String_cleanup_pat_, " ", IsTaxable_).strip()
            IsTaxable_ = self.gds_validate_string(IsTaxable_, node, 'IsTaxable')
            self.IsTaxable = IsTaxable_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class DiscountLineRet


class SalesTaxLineRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, RatePercent=None, AccountRef=None):
        self.Amount = Amount
        self.RatePercent = RatePercent
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if SalesTaxLineRet.subclass:
            return SalesTaxLineRet.subclass(*args_, **kwargs_)
        else:
            return SalesTaxLineRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='SalesTaxLineRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesTaxLineRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesTaxLineRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesTaxLineRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.RatePercent is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesTaxLineRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class SalesTaxLineRet


class ShippingLineRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Amount=None, AccountRef=None):
        self.Amount = Amount
        self.AccountRef = AccountRef
    def factory(*args_, **kwargs_):
        if ShippingLineRet.subclass:
            return ShippingLineRet.subclass(*args_, **kwargs_)
        else:
            return ShippingLineRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_AccountRef(self): return self.AccountRef
    def set_AccountRef(self, AccountRef): self.AccountRef = AccountRef
    def export(self, outfile, level, namespace_='', name_='ShippingLineRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ShippingLineRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ShippingLineRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ShippingLineRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.AccountRef is not None:
            self.AccountRef.export(outfile, level, namespace_, name_='AccountRef', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.Amount is not None or
            self.AccountRef is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ShippingLineRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.AccountRef is not None:
            showIndent(outfile, level)
            outfile.write('AccountRef=model_.AccountRef(\n')
            self.AccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'AccountRef':
            obj_ = AccountRef.factory()
            obj_.build(child_)
            self.set_AccountRef(obj_)
# end class ShippingLineRet


class SalesReceiptLineRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnLineID=None, ItemRef=None, Desc=None, Quantity=None, UnitOfMeasure=None, OverrideUOMSetRef=None, Rate=None, RatePercent=None, ClassRef=None, Amount=None, TaxAmount=None, InventorySiteRef=None, InventorySiteLocationRef=None, SerialNumber=None, LotNumber=None, ServiceDate=None, SalesTaxCodeRef=None, IsTaxable=None, Other1=None, Other2=None, CreditCardTxnInfo=None, DataExtRet=None):
        self.TxnLineID = TxnLineID
        self.ItemRef = ItemRef
        self.Desc = Desc
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.OverrideUOMSetRef = OverrideUOMSetRef
        self.Rate = Rate
        self.RatePercent = RatePercent
        self.ClassRef = ClassRef
        self.Amount = Amount
        self.TaxAmount = TaxAmount
        self.InventorySiteRef = InventorySiteRef
        self.InventorySiteLocationRef = InventorySiteLocationRef
        self.SerialNumber = SerialNumber
        self.LotNumber = LotNumber
        self.ServiceDate = ServiceDate
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.IsTaxable = IsTaxable
        self.Other1 = Other1
        self.Other2 = Other2
        self.CreditCardTxnInfo = CreditCardTxnInfo
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if SalesReceiptLineRet.subclass:
            return SalesReceiptLineRet.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnLineID(self): return self.TxnLineID
    def set_TxnLineID(self, TxnLineID): self.TxnLineID = TxnLineID
    def get_ItemRef(self): return self.ItemRef
    def set_ItemRef(self, ItemRef): self.ItemRef = ItemRef
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_OverrideUOMSetRef(self): return self.OverrideUOMSetRef
    def set_OverrideUOMSetRef(self, OverrideUOMSetRef): self.OverrideUOMSetRef = OverrideUOMSetRef
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_InventorySiteRef(self): return self.InventorySiteRef
    def set_InventorySiteRef(self, InventorySiteRef): self.InventorySiteRef = InventorySiteRef
    def get_InventorySiteLocationRef(self): return self.InventorySiteLocationRef
    def set_InventorySiteLocationRef(self, InventorySiteLocationRef): self.InventorySiteLocationRef = InventorySiteLocationRef
    def get_SerialNumber(self): return self.SerialNumber
    def set_SerialNumber(self, SerialNumber): self.SerialNumber = SerialNumber
    def get_LotNumber(self): return self.LotNumber
    def set_LotNumber(self, LotNumber): self.LotNumber = LotNumber
    def get_ServiceDate(self): return self.ServiceDate
    def set_ServiceDate(self, ServiceDate): self.ServiceDate = ServiceDate
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_IsTaxable(self): return self.IsTaxable
    def set_IsTaxable(self, IsTaxable): self.IsTaxable = IsTaxable
    def get_Other1(self): return self.Other1
    def set_Other1(self, Other1): self.Other1 = Other1
    def get_Other2(self): return self.Other2
    def set_Other2(self, Other2): self.Other2 = Other2
    def get_CreditCardTxnInfo(self): return self.CreditCardTxnInfo
    def set_CreditCardTxnInfo(self, CreditCardTxnInfo): self.CreditCardTxnInfo = CreditCardTxnInfo
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnLineID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnLineID>%s</%sTxnLineID>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnLineID).encode(ExternalEncoding), input_name='TxnLineID'), namespace_, eol_))
        if self.ItemRef is not None:
            self.ItemRef.export(outfile, level, namespace_, name_='ItemRef', pretty_print=pretty_print)
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.OverrideUOMSetRef is not None:
            self.OverrideUOMSetRef.export(outfile, level, namespace_, name_='OverrideUOMSetRef', pretty_print=pretty_print)
        if self.Rate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.Rate).encode(ExternalEncoding), input_name='Rate'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxAmount).encode(ExternalEncoding), input_name='TaxAmount'), namespace_, eol_))
        if self.InventorySiteRef is not None:
            self.InventorySiteRef.export(outfile, level, namespace_, name_='InventorySiteRef', pretty_print=pretty_print)
        if self.InventorySiteLocationRef is not None:
            self.InventorySiteLocationRef.export(outfile, level, namespace_, name_='InventorySiteLocationRef', pretty_print=pretty_print)
        if self.SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.SerialNumber).encode(ExternalEncoding), input_name='SerialNumber'), namespace_, eol_))
        if self.LotNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLotNumber>%s</%sLotNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.LotNumber).encode(ExternalEncoding), input_name='LotNumber'), namespace_, eol_))
        if self.ServiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceDate>%s</%sServiceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceDate).encode(ExternalEncoding), input_name='ServiceDate'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.IsTaxable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxable>%s</%sIsTaxable>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxable).encode(ExternalEncoding), input_name='IsTaxable'), namespace_, eol_))
        if self.Other1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther1>%s</%sOther1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other1).encode(ExternalEncoding), input_name='Other1'), namespace_, eol_))
        if self.Other2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther2>%s</%sOther2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other2).encode(ExternalEncoding), input_name='Other2'), namespace_, eol_))
        if self.CreditCardTxnInfo is not None:
            self.CreditCardTxnInfo.export(outfile, level, namespace_, name_='CreditCardTxnInfo', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.TxnLineID is not None or
            self.ItemRef is not None or
            self.Desc is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.OverrideUOMSetRef is not None or
            self.Rate is not None or
            self.RatePercent is not None or
            self.ClassRef is not None or
            self.Amount is not None or
            self.TaxAmount is not None or
            self.InventorySiteRef is not None or
            self.InventorySiteLocationRef is not None or
            self.SerialNumber is not None or
            self.LotNumber is not None or
            self.ServiceDate is not None or
            self.SalesTaxCodeRef is not None or
            self.IsTaxable is not None or
            self.Other1 is not None or
            self.Other2 is not None or
            self.CreditCardTxnInfo is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnLineID is not None:
            showIndent(outfile, level)
            outfile.write('TxnLineID=%s,\n' % quote_python(self.TxnLineID).encode(ExternalEncoding))
        if self.ItemRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemRef=model_.ItemRef(\n')
            self.ItemRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.OverrideUOMSetRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideUOMSetRef=model_.OverrideUOMSetRef(\n')
            self.OverrideUOMSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Rate is not None:
            showIndent(outfile, level)
            outfile.write('Rate=%s,\n' % quote_python(self.Rate).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.TaxAmount is not None:
            showIndent(outfile, level)
            outfile.write('TaxAmount=%s,\n' % quote_python(self.TaxAmount).encode(ExternalEncoding))
        if self.InventorySiteRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteRef=model_.InventorySiteRef(\n')
            self.InventorySiteRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InventorySiteLocationRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteLocationRef=model_.InventorySiteLocationRef(\n')
            self.InventorySiteLocationRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('SerialNumber=%s,\n' % quote_python(self.SerialNumber).encode(ExternalEncoding))
        if self.LotNumber is not None:
            showIndent(outfile, level)
            outfile.write('LotNumber=%s,\n' % quote_python(self.LotNumber).encode(ExternalEncoding))
        if self.ServiceDate is not None:
            showIndent(outfile, level)
            outfile.write('ServiceDate=%s,\n' % quote_python(self.ServiceDate).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxable is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxable=%s,\n' % quote_python(self.IsTaxable).encode(ExternalEncoding))
        if self.Other1 is not None:
            showIndent(outfile, level)
            outfile.write('Other1=%s,\n' % quote_python(self.Other1).encode(ExternalEncoding))
        if self.Other2 is not None:
            showIndent(outfile, level)
            outfile.write('Other2=%s,\n' % quote_python(self.Other2).encode(ExternalEncoding))
        if self.CreditCardTxnInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnInfo=model_.CreditCardTxnInfo(\n')
            self.CreditCardTxnInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnLineID':
            TxnLineID_ = child_.text
            TxnLineID_ = self.gds_validate_string(TxnLineID_, node, 'TxnLineID')
            self.TxnLineID = TxnLineID_
        elif nodeName_ == 'ItemRef':
            obj_ = ItemRef.factory()
            obj_.build(child_)
            self.set_ItemRef(obj_)
        elif nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'OverrideUOMSetRef':
            obj_ = OverrideUOMSetRef.factory()
            obj_.build(child_)
            self.set_OverrideUOMSetRef(obj_)
        elif nodeName_ == 'Rate':
            Rate_ = child_.text
            Rate_ = self.gds_validate_string(Rate_, node, 'Rate')
            self.Rate = Rate_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'InventorySiteRef':
            obj_ = InventorySiteRef.factory()
            obj_.build(child_)
            self.set_InventorySiteRef(obj_)
        elif nodeName_ == 'InventorySiteLocationRef':
            obj_ = InventorySiteLocationRef.factory()
            obj_.build(child_)
            self.set_InventorySiteLocationRef(obj_)
        elif nodeName_ == 'SerialNumber':
            SerialNumber_ = child_.text
            SerialNumber_ = self.gds_validate_string(SerialNumber_, node, 'SerialNumber')
            self.SerialNumber = SerialNumber_
        elif nodeName_ == 'LotNumber':
            LotNumber_ = child_.text
            LotNumber_ = self.gds_validate_string(LotNumber_, node, 'LotNumber')
            self.LotNumber = LotNumber_
        elif nodeName_ == 'ServiceDate':
            ServiceDate_ = child_.text
            ServiceDate_ = re_.sub(String_cleanup_pat_, " ", ServiceDate_).strip()
            ServiceDate_ = self.gds_validate_string(ServiceDate_, node, 'ServiceDate')
            self.ServiceDate = ServiceDate_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'IsTaxable':
            IsTaxable_ = child_.text
            IsTaxable_ = re_.sub(String_cleanup_pat_, " ", IsTaxable_).strip()
            IsTaxable_ = self.gds_validate_string(IsTaxable_, node, 'IsTaxable')
            self.IsTaxable = IsTaxable_
        elif nodeName_ == 'Other1':
            Other1_ = child_.text
            Other1_ = self.gds_validate_string(Other1_, node, 'Other1')
            self.Other1 = Other1_
        elif nodeName_ == 'Other2':
            Other2_ = child_.text
            Other2_ = self.gds_validate_string(Other2_, node, 'Other2')
            self.Other2 = Other2_
        elif nodeName_ == 'CreditCardTxnInfo':
            obj_ = CreditCardTxnInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnInfo(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class SalesReceiptLineRet


class LotNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if LotNumber.subclass:
            return LotNumber.subclass(*args_, **kwargs_)
        else:
            return LotNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='LotNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='LotNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='LotNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='LotNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='LotNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class LotNumber


class Other1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Other1.subclass:
            return Other1.subclass(*args_, **kwargs_)
        else:
            return Other1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Other1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Other1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Other1'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Other1', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Other1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Other1


class Other2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Other2.subclass:
            return Other2.subclass(*args_, **kwargs_)
        else:
            return Other2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Other2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Other2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Other2'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Other2', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Other2'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Other2


class SalesReceiptLineAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, defMacro=None, ItemRef=None, Desc=None, Quantity=None, UnitOfMeasure=None, Rate=None, RatePercent=None, PriceLevelRef=None, ClassRef=None, Amount=None, TaxAmount=None, InventorySiteRef=None, InventorySiteLocationRef=None, SerialNumber=None, LotNumber=None, ServiceDate=None, SalesTaxCodeRef=None, IsTaxable=None, OverrideItemAccountRef=None, Other1=None, Other2=None, CreditCardTxnInfo=None, DataExt=None):
        self.defMacro = _cast(None, defMacro)
        self.ItemRef = ItemRef
        self.Desc = Desc
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.Rate = Rate
        self.RatePercent = RatePercent
        self.PriceLevelRef = PriceLevelRef
        self.ClassRef = ClassRef
        self.Amount = Amount
        self.TaxAmount = TaxAmount
        self.InventorySiteRef = InventorySiteRef
        self.InventorySiteLocationRef = InventorySiteLocationRef
        self.SerialNumber = SerialNumber
        self.LotNumber = LotNumber
        self.ServiceDate = ServiceDate
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.IsTaxable = IsTaxable
        self.OverrideItemAccountRef = OverrideItemAccountRef
        self.Other1 = Other1
        self.Other2 = Other2
        self.CreditCardTxnInfo = CreditCardTxnInfo
        if DataExt is None:
            self.DataExt = []
        else:
            self.DataExt = DataExt
    def factory(*args_, **kwargs_):
        if SalesReceiptLineAdd.subclass:
            return SalesReceiptLineAdd.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemRef(self): return self.ItemRef
    def set_ItemRef(self, ItemRef): self.ItemRef = ItemRef
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_PriceLevelRef(self): return self.PriceLevelRef
    def set_PriceLevelRef(self, PriceLevelRef): self.PriceLevelRef = PriceLevelRef
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_InventorySiteRef(self): return self.InventorySiteRef
    def set_InventorySiteRef(self, InventorySiteRef): self.InventorySiteRef = InventorySiteRef
    def get_InventorySiteLocationRef(self): return self.InventorySiteLocationRef
    def set_InventorySiteLocationRef(self, InventorySiteLocationRef): self.InventorySiteLocationRef = InventorySiteLocationRef
    def get_SerialNumber(self): return self.SerialNumber
    def set_SerialNumber(self, SerialNumber): self.SerialNumber = SerialNumber
    def get_LotNumber(self): return self.LotNumber
    def set_LotNumber(self, LotNumber): self.LotNumber = LotNumber
    def get_ServiceDate(self): return self.ServiceDate
    def set_ServiceDate(self, ServiceDate): self.ServiceDate = ServiceDate
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_IsTaxable(self): return self.IsTaxable
    def set_IsTaxable(self, IsTaxable): self.IsTaxable = IsTaxable
    def get_OverrideItemAccountRef(self): return self.OverrideItemAccountRef
    def set_OverrideItemAccountRef(self, OverrideItemAccountRef): self.OverrideItemAccountRef = OverrideItemAccountRef
    def get_Other1(self): return self.Other1
    def set_Other1(self, Other1): self.Other1 = Other1
    def get_Other2(self): return self.Other2
    def set_Other2(self, Other2): self.Other2 = Other2
    def get_CreditCardTxnInfo(self): return self.CreditCardTxnInfo
    def set_CreditCardTxnInfo(self, CreditCardTxnInfo): self.CreditCardTxnInfo = CreditCardTxnInfo
    def get_DataExt(self): return self.DataExt
    def set_DataExt(self, DataExt): self.DataExt = DataExt
    def add_DataExt(self, value): self.DataExt.append(value)
    def insert_DataExt(self, index, value): self.DataExt[index] = value
    def get_defMacro(self): return self.defMacro
    def set_defMacro(self, defMacro): self.defMacro = defMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineAdd'):
        if self.defMacro is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            outfile.write(' defMacro=%s' % (quote_attrib(self.defMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemRef is not None:
            self.ItemRef.export(outfile, level, namespace_, name_='ItemRef', pretty_print=pretty_print)
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.Rate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.Rate).encode(ExternalEncoding), input_name='Rate'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.PriceLevelRef is not None:
            self.PriceLevelRef.export(outfile, level, namespace_, name_='PriceLevelRef', pretty_print=pretty_print)
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxAmount).encode(ExternalEncoding), input_name='TaxAmount'), namespace_, eol_))
        if self.InventorySiteRef is not None:
            self.InventorySiteRef.export(outfile, level, namespace_, name_='InventorySiteRef', pretty_print=pretty_print)
        if self.InventorySiteLocationRef is not None:
            self.InventorySiteLocationRef.export(outfile, level, namespace_, name_='InventorySiteLocationRef', pretty_print=pretty_print)
        if self.SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.SerialNumber).encode(ExternalEncoding), input_name='SerialNumber'), namespace_, eol_))
        if self.LotNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLotNumber>%s</%sLotNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.LotNumber).encode(ExternalEncoding), input_name='LotNumber'), namespace_, eol_))
        if self.ServiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceDate>%s</%sServiceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceDate).encode(ExternalEncoding), input_name='ServiceDate'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.IsTaxable is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxable>%s</%sIsTaxable>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxable).encode(ExternalEncoding), input_name='IsTaxable'), namespace_, eol_))
        if self.OverrideItemAccountRef is not None:
            self.OverrideItemAccountRef.export(outfile, level, namespace_, name_='OverrideItemAccountRef', pretty_print=pretty_print)
        if self.Other1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther1>%s</%sOther1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other1).encode(ExternalEncoding), input_name='Other1'), namespace_, eol_))
        if self.Other2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther2>%s</%sOther2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other2).encode(ExternalEncoding), input_name='Other2'), namespace_, eol_))
        if self.CreditCardTxnInfo is not None:
            self.CreditCardTxnInfo.export(outfile, level, namespace_, name_='CreditCardTxnInfo', pretty_print=pretty_print)
        for DataExt_ in self.DataExt:
            DataExt_.export(outfile, level, namespace_, name_='DataExt', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemRef is not None or
            self.Desc is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.Rate is not None or
            self.RatePercent is not None or
            self.PriceLevelRef is not None or
            self.ClassRef is not None or
            self.Amount is not None or
            self.TaxAmount is not None or
            self.InventorySiteRef is not None or
            self.InventorySiteLocationRef is not None or
            self.SerialNumber is not None or
            self.LotNumber is not None or
            self.ServiceDate is not None or
            self.SalesTaxCodeRef is not None or
            self.IsTaxable is not None or
            self.OverrideItemAccountRef is not None or
            self.Other1 is not None or
            self.Other2 is not None or
            self.CreditCardTxnInfo is not None or
            self.DataExt
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.defMacro is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            showIndent(outfile, level)
            outfile.write('defMacro = "%s",\n' % (self.defMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemRef=model_.ItemRef(\n')
            self.ItemRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.Rate is not None:
            showIndent(outfile, level)
            outfile.write('Rate=%s,\n' % quote_python(self.Rate).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.PriceLevelRef is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelRef=model_.PriceLevelRef(\n')
            self.PriceLevelRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.TaxAmount is not None:
            showIndent(outfile, level)
            outfile.write('TaxAmount=%s,\n' % quote_python(self.TaxAmount).encode(ExternalEncoding))
        if self.InventorySiteRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteRef=model_.InventorySiteRef(\n')
            self.InventorySiteRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InventorySiteLocationRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteLocationRef=model_.InventorySiteLocationRef(\n')
            self.InventorySiteLocationRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('SerialNumber=%s,\n' % quote_python(self.SerialNumber).encode(ExternalEncoding))
        if self.LotNumber is not None:
            showIndent(outfile, level)
            outfile.write('LotNumber=%s,\n' % quote_python(self.LotNumber).encode(ExternalEncoding))
        if self.ServiceDate is not None:
            showIndent(outfile, level)
            outfile.write('ServiceDate=%s,\n' % quote_python(self.ServiceDate).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsTaxable is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxable=%s,\n' % quote_python(self.IsTaxable).encode(ExternalEncoding))
        if self.OverrideItemAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideItemAccountRef=model_.OverrideItemAccountRef(\n')
            self.OverrideItemAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Other1 is not None:
            showIndent(outfile, level)
            outfile.write('Other1=%s,\n' % quote_python(self.Other1).encode(ExternalEncoding))
        if self.Other2 is not None:
            showIndent(outfile, level)
            outfile.write('Other2=%s,\n' % quote_python(self.Other2).encode(ExternalEncoding))
        if self.CreditCardTxnInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnInfo=model_.CreditCardTxnInfo(\n')
            self.CreditCardTxnInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExt=[\n')
        level += 1
        for DataExt_ in self.DataExt:
            showIndent(outfile, level)
            outfile.write('model_.DataExt(\n')
            DataExt_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('defMacro', node)
        if value is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            self.defMacro = value
            self.validate_MACROTYPE(self.defMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemRef':
            obj_ = ItemRef.factory()
            obj_.build(child_)
            self.set_ItemRef(obj_)
        elif nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'Rate':
            Rate_ = child_.text
            Rate_ = self.gds_validate_string(Rate_, node, 'Rate')
            self.Rate = Rate_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'PriceLevelRef':
            obj_ = PriceLevelRef.factory()
            obj_.build(child_)
            self.set_PriceLevelRef(obj_)
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'InventorySiteRef':
            obj_ = InventorySiteRef.factory()
            obj_.build(child_)
            self.set_InventorySiteRef(obj_)
        elif nodeName_ == 'InventorySiteLocationRef':
            obj_ = InventorySiteLocationRef.factory()
            obj_.build(child_)
            self.set_InventorySiteLocationRef(obj_)
        elif nodeName_ == 'SerialNumber':
            SerialNumber_ = child_.text
            SerialNumber_ = self.gds_validate_string(SerialNumber_, node, 'SerialNumber')
            self.SerialNumber = SerialNumber_
        elif nodeName_ == 'LotNumber':
            LotNumber_ = child_.text
            LotNumber_ = self.gds_validate_string(LotNumber_, node, 'LotNumber')
            self.LotNumber = LotNumber_
        elif nodeName_ == 'ServiceDate':
            ServiceDate_ = child_.text
            ServiceDate_ = re_.sub(String_cleanup_pat_, " ", ServiceDate_).strip()
            ServiceDate_ = self.gds_validate_string(ServiceDate_, node, 'ServiceDate')
            self.ServiceDate = ServiceDate_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'IsTaxable':
            IsTaxable_ = child_.text
            IsTaxable_ = re_.sub(String_cleanup_pat_, " ", IsTaxable_).strip()
            IsTaxable_ = self.gds_validate_string(IsTaxable_, node, 'IsTaxable')
            self.IsTaxable = IsTaxable_
        elif nodeName_ == 'OverrideItemAccountRef':
            obj_ = OverrideItemAccountRef.factory()
            obj_.build(child_)
            self.set_OverrideItemAccountRef(obj_)
        elif nodeName_ == 'Other1':
            Other1_ = child_.text
            Other1_ = self.gds_validate_string(Other1_, node, 'Other1')
            self.Other1 = Other1_
        elif nodeName_ == 'Other2':
            Other2_ = child_.text
            Other2_ = self.gds_validate_string(Other2_, node, 'Other2')
            self.Other2 = Other2_
        elif nodeName_ == 'CreditCardTxnInfo':
            obj_ = CreditCardTxnInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnInfo(obj_)
        elif nodeName_ == 'DataExt':
            obj_ = DataExt.factory()
            obj_.build(child_)
            self.DataExt.append(obj_)
# end class SalesReceiptLineAdd


class SalesReceiptLineGroupRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnLineID=None, ItemGroupRef=None, Desc=None, Quantity=None, UnitOfMeasure=None, OverrideUOMSetRef=None, IsPrintItemsInGroup=None, TotalAmount=None, ServiceDate=None, SalesReceiptLineRet=None, DataExtRet=None):
        self.TxnLineID = TxnLineID
        self.ItemGroupRef = ItemGroupRef
        self.Desc = Desc
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.OverrideUOMSetRef = OverrideUOMSetRef
        self.IsPrintItemsInGroup = IsPrintItemsInGroup
        self.TotalAmount = TotalAmount
        self.ServiceDate = ServiceDate
        if SalesReceiptLineRet is None:
            self.SalesReceiptLineRet = []
        else:
            self.SalesReceiptLineRet = SalesReceiptLineRet
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if SalesReceiptLineGroupRet.subclass:
            return SalesReceiptLineGroupRet.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineGroupRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnLineID(self): return self.TxnLineID
    def set_TxnLineID(self, TxnLineID): self.TxnLineID = TxnLineID
    def get_ItemGroupRef(self): return self.ItemGroupRef
    def set_ItemGroupRef(self, ItemGroupRef): self.ItemGroupRef = ItemGroupRef
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_OverrideUOMSetRef(self): return self.OverrideUOMSetRef
    def set_OverrideUOMSetRef(self, OverrideUOMSetRef): self.OverrideUOMSetRef = OverrideUOMSetRef
    def get_IsPrintItemsInGroup(self): return self.IsPrintItemsInGroup
    def set_IsPrintItemsInGroup(self, IsPrintItemsInGroup): self.IsPrintItemsInGroup = IsPrintItemsInGroup
    def get_TotalAmount(self): return self.TotalAmount
    def set_TotalAmount(self, TotalAmount): self.TotalAmount = TotalAmount
    def get_ServiceDate(self): return self.ServiceDate
    def set_ServiceDate(self, ServiceDate): self.ServiceDate = ServiceDate
    def get_SalesReceiptLineRet(self): return self.SalesReceiptLineRet
    def set_SalesReceiptLineRet(self, SalesReceiptLineRet): self.SalesReceiptLineRet = SalesReceiptLineRet
    def add_SalesReceiptLineRet(self, value): self.SalesReceiptLineRet.append(value)
    def insert_SalesReceiptLineRet(self, index, value): self.SalesReceiptLineRet[index] = value
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineGroupRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineGroupRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnLineID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnLineID>%s</%sTxnLineID>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnLineID).encode(ExternalEncoding), input_name='TxnLineID'), namespace_, eol_))
        if self.ItemGroupRef is not None:
            self.ItemGroupRef.export(outfile, level, namespace_, name_='ItemGroupRef', pretty_print=pretty_print)
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.OverrideUOMSetRef is not None:
            self.OverrideUOMSetRef.export(outfile, level, namespace_, name_='OverrideUOMSetRef', pretty_print=pretty_print)
        if self.IsPrintItemsInGroup is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPrintItemsInGroup>%s</%sIsPrintItemsInGroup>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsPrintItemsInGroup).encode(ExternalEncoding), input_name='IsPrintItemsInGroup'), namespace_, eol_))
        if self.TotalAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalAmount>%s</%sTotalAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalAmount).encode(ExternalEncoding), input_name='TotalAmount'), namespace_, eol_))
        if self.ServiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceDate>%s</%sServiceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceDate).encode(ExternalEncoding), input_name='ServiceDate'), namespace_, eol_))
        for SalesReceiptLineRet_ in self.SalesReceiptLineRet:
            SalesReceiptLineRet_.export(outfile, level, namespace_, name_='SalesReceiptLineRet', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.TxnLineID is not None or
            self.ItemGroupRef is not None or
            self.Desc is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.OverrideUOMSetRef is not None or
            self.IsPrintItemsInGroup is not None or
            self.TotalAmount is not None or
            self.ServiceDate is not None or
            self.SalesReceiptLineRet or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineGroupRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnLineID is not None:
            showIndent(outfile, level)
            outfile.write('TxnLineID=%s,\n' % quote_python(self.TxnLineID).encode(ExternalEncoding))
        if self.ItemGroupRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemGroupRef=model_.ItemGroupRef(\n')
            self.ItemGroupRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.OverrideUOMSetRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideUOMSetRef=model_.OverrideUOMSetRef(\n')
            self.OverrideUOMSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsPrintItemsInGroup is not None:
            showIndent(outfile, level)
            outfile.write('IsPrintItemsInGroup=%s,\n' % quote_python(self.IsPrintItemsInGroup).encode(ExternalEncoding))
        if self.TotalAmount is not None:
            showIndent(outfile, level)
            outfile.write('TotalAmount=%s,\n' % quote_python(self.TotalAmount).encode(ExternalEncoding))
        if self.ServiceDate is not None:
            showIndent(outfile, level)
            outfile.write('ServiceDate=%s,\n' % quote_python(self.ServiceDate).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineRet=[\n')
        level += 1
        for SalesReceiptLineRet_ in self.SalesReceiptLineRet:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineRet(\n')
            SalesReceiptLineRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnLineID':
            TxnLineID_ = child_.text
            TxnLineID_ = self.gds_validate_string(TxnLineID_, node, 'TxnLineID')
            self.TxnLineID = TxnLineID_
        elif nodeName_ == 'ItemGroupRef':
            obj_ = ItemGroupRef.factory()
            obj_.build(child_)
            self.set_ItemGroupRef(obj_)
        elif nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'OverrideUOMSetRef':
            obj_ = OverrideUOMSetRef.factory()
            obj_.build(child_)
            self.set_OverrideUOMSetRef(obj_)
        elif nodeName_ == 'IsPrintItemsInGroup':
            IsPrintItemsInGroup_ = child_.text
            IsPrintItemsInGroup_ = re_.sub(String_cleanup_pat_, " ", IsPrintItemsInGroup_).strip()
            IsPrintItemsInGroup_ = self.gds_validate_string(IsPrintItemsInGroup_, node, 'IsPrintItemsInGroup')
            self.IsPrintItemsInGroup = IsPrintItemsInGroup_
        elif nodeName_ == 'TotalAmount':
            TotalAmount_ = child_.text
            TotalAmount_ = self.gds_validate_string(TotalAmount_, node, 'TotalAmount')
            self.TotalAmount = TotalAmount_
        elif nodeName_ == 'ServiceDate':
            ServiceDate_ = child_.text
            ServiceDate_ = re_.sub(String_cleanup_pat_, " ", ServiceDate_).strip()
            ServiceDate_ = self.gds_validate_string(ServiceDate_, node, 'ServiceDate')
            self.ServiceDate = ServiceDate_
        elif nodeName_ == 'SalesReceiptLineRet':
            obj_ = SalesReceiptLineRet.factory()
            obj_.build(child_)
            self.SalesReceiptLineRet.append(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class SalesReceiptLineGroupRet


class SalesReceiptLineGroupAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ItemGroupRef=None, Desc=None, Quantity=None, UnitOfMeasure=None, ServiceDate=None, InventorySiteRef=None, InventorySiteLocationRef=None, DataExt=None):
        self.ItemGroupRef = ItemGroupRef
        self.Desc = Desc
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.ServiceDate = ServiceDate
        self.InventorySiteRef = InventorySiteRef
        self.InventorySiteLocationRef = InventorySiteLocationRef
        if DataExt is None:
            self.DataExt = []
        else:
            self.DataExt = DataExt
    def factory(*args_, **kwargs_):
        if SalesReceiptLineGroupAdd.subclass:
            return SalesReceiptLineGroupAdd.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineGroupAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ItemGroupRef(self): return self.ItemGroupRef
    def set_ItemGroupRef(self, ItemGroupRef): self.ItemGroupRef = ItemGroupRef
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def validate_Desc(self, value):
        # Validate type Desc, a restriction on STRTYPE.
        pass
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_ServiceDate(self): return self.ServiceDate
    def set_ServiceDate(self, ServiceDate): self.ServiceDate = ServiceDate
    def get_InventorySiteRef(self): return self.InventorySiteRef
    def set_InventorySiteRef(self, InventorySiteRef): self.InventorySiteRef = InventorySiteRef
    def get_InventorySiteLocationRef(self): return self.InventorySiteLocationRef
    def set_InventorySiteLocationRef(self, InventorySiteLocationRef): self.InventorySiteLocationRef = InventorySiteLocationRef
    def get_DataExt(self): return self.DataExt
    def set_DataExt(self, DataExt): self.DataExt = DataExt
    def add_DataExt(self, value): self.DataExt.append(value)
    def insert_DataExt(self, index, value): self.DataExt[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineGroupAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineGroupAdd'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ItemGroupRef is not None:
            self.ItemGroupRef.export(outfile, level, namespace_, name_='ItemGroupRef', pretty_print=pretty_print)
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.ServiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceDate>%s</%sServiceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceDate).encode(ExternalEncoding), input_name='ServiceDate'), namespace_, eol_))
        if self.InventorySiteRef is not None:
            self.InventorySiteRef.export(outfile, level, namespace_, name_='InventorySiteRef', pretty_print=pretty_print)
        if self.InventorySiteLocationRef is not None:
            self.InventorySiteLocationRef.export(outfile, level, namespace_, name_='InventorySiteLocationRef', pretty_print=pretty_print)
        for DataExt_ in self.DataExt:
            DataExt_.export(outfile, level, namespace_, name_='DataExt', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.ItemGroupRef is not None or
            self.Desc is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.ServiceDate is not None or
            self.InventorySiteRef is not None or
            self.InventorySiteLocationRef is not None or
            self.DataExt
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineGroupAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ItemGroupRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemGroupRef=model_.ItemGroupRef(\n')
            self.ItemGroupRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.ServiceDate is not None:
            showIndent(outfile, level)
            outfile.write('ServiceDate=%s,\n' % quote_python(self.ServiceDate).encode(ExternalEncoding))
        if self.InventorySiteRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteRef=model_.InventorySiteRef(\n')
            self.InventorySiteRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InventorySiteLocationRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteLocationRef=model_.InventorySiteLocationRef(\n')
            self.InventorySiteLocationRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExt=[\n')
        level += 1
        for DataExt_ in self.DataExt:
            showIndent(outfile, level)
            outfile.write('model_.DataExt(\n')
            DataExt_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ItemGroupRef':
            obj_ = ItemGroupRef.factory()
            obj_.build(child_)
            self.set_ItemGroupRef(obj_)
        elif nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
            self.validate_Desc(self.Desc)    # validate type Desc
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'ServiceDate':
            ServiceDate_ = child_.text
            ServiceDate_ = re_.sub(String_cleanup_pat_, " ", ServiceDate_).strip()
            ServiceDate_ = self.gds_validate_string(ServiceDate_, node, 'ServiceDate')
            self.ServiceDate = ServiceDate_
        elif nodeName_ == 'InventorySiteRef':
            obj_ = InventorySiteRef.factory()
            obj_.build(child_)
            self.set_InventorySiteRef(obj_)
        elif nodeName_ == 'InventorySiteLocationRef':
            obj_ = InventorySiteLocationRef.factory()
            obj_.build(child_)
            self.set_InventorySiteLocationRef(obj_)
        elif nodeName_ == 'DataExt':
            obj_ = DataExt.factory()
            obj_.build(child_)
            self.DataExt.append(obj_)
# end class SalesReceiptLineGroupAdd


class SalesReceiptLineMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnLineID=None, ItemRef=None, Desc=None, Quantity=None, UnitOfMeasure=None, OverrideUOMSetRef=None, Rate=None, RatePercent=None, PriceLevelRef=None, ClassRef=None, Amount=None, TaxAmount=None, InventorySiteRef=None, InventorySiteLocationRef=None, SerialNumber=None, LotNumber=None, ServiceDate=None, SalesTaxCodeRef=None, OverrideItemAccountRef=None, Other1=None, Other2=None):
        self.TxnLineID = TxnLineID
        self.ItemRef = ItemRef
        self.Desc = Desc
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.OverrideUOMSetRef = OverrideUOMSetRef
        self.Rate = Rate
        self.RatePercent = RatePercent
        self.PriceLevelRef = PriceLevelRef
        self.ClassRef = ClassRef
        self.Amount = Amount
        self.TaxAmount = TaxAmount
        self.InventorySiteRef = InventorySiteRef
        self.InventorySiteLocationRef = InventorySiteLocationRef
        self.SerialNumber = SerialNumber
        self.LotNumber = LotNumber
        self.ServiceDate = ServiceDate
        self.SalesTaxCodeRef = SalesTaxCodeRef
        self.OverrideItemAccountRef = OverrideItemAccountRef
        self.Other1 = Other1
        self.Other2 = Other2
    def factory(*args_, **kwargs_):
        if SalesReceiptLineMod.subclass:
            return SalesReceiptLineMod.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnLineID(self): return self.TxnLineID
    def set_TxnLineID(self, TxnLineID): self.TxnLineID = TxnLineID
    def get_ItemRef(self): return self.ItemRef
    def set_ItemRef(self, ItemRef): self.ItemRef = ItemRef
    def get_Desc(self): return self.Desc
    def set_Desc(self, Desc): self.Desc = Desc
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_OverrideUOMSetRef(self): return self.OverrideUOMSetRef
    def set_OverrideUOMSetRef(self, OverrideUOMSetRef): self.OverrideUOMSetRef = OverrideUOMSetRef
    def get_Rate(self): return self.Rate
    def set_Rate(self, Rate): self.Rate = Rate
    def get_RatePercent(self): return self.RatePercent
    def set_RatePercent(self, RatePercent): self.RatePercent = RatePercent
    def get_PriceLevelRef(self): return self.PriceLevelRef
    def set_PriceLevelRef(self, PriceLevelRef): self.PriceLevelRef = PriceLevelRef
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_Amount(self): return self.Amount
    def set_Amount(self, Amount): self.Amount = Amount
    def get_TaxAmount(self): return self.TaxAmount
    def set_TaxAmount(self, TaxAmount): self.TaxAmount = TaxAmount
    def get_InventorySiteRef(self): return self.InventorySiteRef
    def set_InventorySiteRef(self, InventorySiteRef): self.InventorySiteRef = InventorySiteRef
    def get_InventorySiteLocationRef(self): return self.InventorySiteLocationRef
    def set_InventorySiteLocationRef(self, InventorySiteLocationRef): self.InventorySiteLocationRef = InventorySiteLocationRef
    def get_SerialNumber(self): return self.SerialNumber
    def set_SerialNumber(self, SerialNumber): self.SerialNumber = SerialNumber
    def get_LotNumber(self): return self.LotNumber
    def set_LotNumber(self, LotNumber): self.LotNumber = LotNumber
    def get_ServiceDate(self): return self.ServiceDate
    def set_ServiceDate(self, ServiceDate): self.ServiceDate = ServiceDate
    def get_SalesTaxCodeRef(self): return self.SalesTaxCodeRef
    def set_SalesTaxCodeRef(self, SalesTaxCodeRef): self.SalesTaxCodeRef = SalesTaxCodeRef
    def get_OverrideItemAccountRef(self): return self.OverrideItemAccountRef
    def set_OverrideItemAccountRef(self, OverrideItemAccountRef): self.OverrideItemAccountRef = OverrideItemAccountRef
    def get_Other1(self): return self.Other1
    def set_Other1(self, Other1): self.Other1 = Other1
    def get_Other2(self): return self.Other2
    def set_Other2(self, Other2): self.Other2 = Other2
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnLineID is not None:
            self.TxnLineID.export(outfile, level, namespace_, name_='TxnLineID', pretty_print=pretty_print)
        if self.ItemRef is not None:
            self.ItemRef.export(outfile, level, namespace_, name_='ItemRef', pretty_print=pretty_print)
        if self.Desc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDesc>%s</%sDesc>%s' % (namespace_, self.gds_format_string(quote_xml(self.Desc).encode(ExternalEncoding), input_name='Desc'), namespace_, eol_))
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.OverrideUOMSetRef is not None:
            self.OverrideUOMSetRef.export(outfile, level, namespace_, name_='OverrideUOMSetRef', pretty_print=pretty_print)
        if self.Rate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRate>%s</%sRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.Rate).encode(ExternalEncoding), input_name='Rate'), namespace_, eol_))
        if self.RatePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRatePercent>%s</%sRatePercent>%s' % (namespace_, self.gds_format_string(quote_xml(self.RatePercent).encode(ExternalEncoding), input_name='RatePercent'), namespace_, eol_))
        if self.PriceLevelRef is not None:
            self.PriceLevelRef.export(outfile, level, namespace_, name_='PriceLevelRef', pretty_print=pretty_print)
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.Amount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAmount>%s</%sAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.Amount).encode(ExternalEncoding), input_name='Amount'), namespace_, eol_))
        if self.TaxAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTaxAmount>%s</%sTaxAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.TaxAmount).encode(ExternalEncoding), input_name='TaxAmount'), namespace_, eol_))
        if self.InventorySiteRef is not None:
            self.InventorySiteRef.export(outfile, level, namespace_, name_='InventorySiteRef', pretty_print=pretty_print)
        if self.InventorySiteLocationRef is not None:
            self.InventorySiteLocationRef.export(outfile, level, namespace_, name_='InventorySiteLocationRef', pretty_print=pretty_print)
        if self.SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerialNumber>%s</%sSerialNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.SerialNumber).encode(ExternalEncoding), input_name='SerialNumber'), namespace_, eol_))
        if self.LotNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLotNumber>%s</%sLotNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.LotNumber).encode(ExternalEncoding), input_name='LotNumber'), namespace_, eol_))
        if self.ServiceDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServiceDate>%s</%sServiceDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServiceDate).encode(ExternalEncoding), input_name='ServiceDate'), namespace_, eol_))
        if self.SalesTaxCodeRef is not None:
            self.SalesTaxCodeRef.export(outfile, level, namespace_, name_='SalesTaxCodeRef', pretty_print=pretty_print)
        if self.OverrideItemAccountRef is not None:
            self.OverrideItemAccountRef.export(outfile, level, namespace_, name_='OverrideItemAccountRef', pretty_print=pretty_print)
        if self.Other1 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther1>%s</%sOther1>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other1).encode(ExternalEncoding), input_name='Other1'), namespace_, eol_))
        if self.Other2 is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther2>%s</%sOther2>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other2).encode(ExternalEncoding), input_name='Other2'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.TxnLineID is not None or
            self.ItemRef is not None or
            self.Desc is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.OverrideUOMSetRef is not None or
            self.Rate is not None or
            self.RatePercent is not None or
            self.PriceLevelRef is not None or
            self.ClassRef is not None or
            self.Amount is not None or
            self.TaxAmount is not None or
            self.InventorySiteRef is not None or
            self.InventorySiteLocationRef is not None or
            self.SerialNumber is not None or
            self.LotNumber is not None or
            self.ServiceDate is not None or
            self.SalesTaxCodeRef is not None or
            self.OverrideItemAccountRef is not None or
            self.Other1 is not None or
            self.Other2 is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnLineID is not None:
            showIndent(outfile, level)
            outfile.write('TxnLineID=model_.TxnLineIDType(\n')
            self.TxnLineID.exportLiteral(outfile, level, name_='TxnLineID')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemRef=model_.ItemRef(\n')
            self.ItemRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Desc is not None:
            showIndent(outfile, level)
            outfile.write('Desc=%s,\n' % quote_python(self.Desc).encode(ExternalEncoding))
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.OverrideUOMSetRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideUOMSetRef=model_.OverrideUOMSetRef(\n')
            self.OverrideUOMSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Rate is not None:
            showIndent(outfile, level)
            outfile.write('Rate=%s,\n' % quote_python(self.Rate).encode(ExternalEncoding))
        if self.RatePercent is not None:
            showIndent(outfile, level)
            outfile.write('RatePercent=%s,\n' % quote_python(self.RatePercent).encode(ExternalEncoding))
        if self.PriceLevelRef is not None:
            showIndent(outfile, level)
            outfile.write('PriceLevelRef=model_.PriceLevelRef(\n')
            self.PriceLevelRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Amount is not None:
            showIndent(outfile, level)
            outfile.write('Amount=%s,\n' % quote_python(self.Amount).encode(ExternalEncoding))
        if self.TaxAmount is not None:
            showIndent(outfile, level)
            outfile.write('TaxAmount=%s,\n' % quote_python(self.TaxAmount).encode(ExternalEncoding))
        if self.InventorySiteRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteRef=model_.InventorySiteRef(\n')
            self.InventorySiteRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.InventorySiteLocationRef is not None:
            showIndent(outfile, level)
            outfile.write('InventorySiteLocationRef=model_.InventorySiteLocationRef(\n')
            self.InventorySiteLocationRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SerialNumber is not None:
            showIndent(outfile, level)
            outfile.write('SerialNumber=%s,\n' % quote_python(self.SerialNumber).encode(ExternalEncoding))
        if self.LotNumber is not None:
            showIndent(outfile, level)
            outfile.write('LotNumber=%s,\n' % quote_python(self.LotNumber).encode(ExternalEncoding))
        if self.ServiceDate is not None:
            showIndent(outfile, level)
            outfile.write('ServiceDate=%s,\n' % quote_python(self.ServiceDate).encode(ExternalEncoding))
        if self.SalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxCodeRef=model_.SalesTaxCodeRef(\n')
            self.SalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.OverrideItemAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideItemAccountRef=model_.OverrideItemAccountRef(\n')
            self.OverrideItemAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Other1 is not None:
            showIndent(outfile, level)
            outfile.write('Other1=%s,\n' % quote_python(self.Other1).encode(ExternalEncoding))
        if self.Other2 is not None:
            showIndent(outfile, level)
            outfile.write('Other2=%s,\n' % quote_python(self.Other2).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnLineID':
            obj_ = TxnLineIDType.factory()
            obj_.build(child_)
            self.set_TxnLineID(obj_)
        elif nodeName_ == 'ItemRef':
            obj_ = ItemRef.factory()
            obj_.build(child_)
            self.set_ItemRef(obj_)
        elif nodeName_ == 'Desc':
            Desc_ = child_.text
            Desc_ = self.gds_validate_string(Desc_, node, 'Desc')
            self.Desc = Desc_
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'OverrideUOMSetRef':
            obj_ = OverrideUOMSetRef.factory()
            obj_.build(child_)
            self.set_OverrideUOMSetRef(obj_)
        elif nodeName_ == 'Rate':
            Rate_ = child_.text
            Rate_ = self.gds_validate_string(Rate_, node, 'Rate')
            self.Rate = Rate_
        elif nodeName_ == 'RatePercent':
            RatePercent_ = child_.text
            RatePercent_ = self.gds_validate_string(RatePercent_, node, 'RatePercent')
            self.RatePercent = RatePercent_
        elif nodeName_ == 'PriceLevelRef':
            obj_ = PriceLevelRef.factory()
            obj_.build(child_)
            self.set_PriceLevelRef(obj_)
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'Amount':
            Amount_ = child_.text
            Amount_ = self.gds_validate_string(Amount_, node, 'Amount')
            self.Amount = Amount_
        elif nodeName_ == 'TaxAmount':
            TaxAmount_ = child_.text
            TaxAmount_ = self.gds_validate_string(TaxAmount_, node, 'TaxAmount')
            self.TaxAmount = TaxAmount_
        elif nodeName_ == 'InventorySiteRef':
            obj_ = InventorySiteRef.factory()
            obj_.build(child_)
            self.set_InventorySiteRef(obj_)
        elif nodeName_ == 'InventorySiteLocationRef':
            obj_ = InventorySiteLocationRef.factory()
            obj_.build(child_)
            self.set_InventorySiteLocationRef(obj_)
        elif nodeName_ == 'SerialNumber':
            SerialNumber_ = child_.text
            SerialNumber_ = self.gds_validate_string(SerialNumber_, node, 'SerialNumber')
            self.SerialNumber = SerialNumber_
        elif nodeName_ == 'LotNumber':
            LotNumber_ = child_.text
            LotNumber_ = self.gds_validate_string(LotNumber_, node, 'LotNumber')
            self.LotNumber = LotNumber_
        elif nodeName_ == 'ServiceDate':
            ServiceDate_ = child_.text
            ServiceDate_ = re_.sub(String_cleanup_pat_, " ", ServiceDate_).strip()
            ServiceDate_ = self.gds_validate_string(ServiceDate_, node, 'ServiceDate')
            self.ServiceDate = ServiceDate_
        elif nodeName_ == 'SalesTaxCodeRef':
            obj_ = SalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_SalesTaxCodeRef(obj_)
        elif nodeName_ == 'OverrideItemAccountRef':
            obj_ = OverrideItemAccountRef.factory()
            obj_.build(child_)
            self.set_OverrideItemAccountRef(obj_)
        elif nodeName_ == 'Other1':
            Other1_ = child_.text
            Other1_ = self.gds_validate_string(Other1_, node, 'Other1')
            self.Other1 = Other1_
        elif nodeName_ == 'Other2':
            Other2_ = child_.text
            Other2_ = self.gds_validate_string(Other2_, node, 'Other2')
            self.Other2 = Other2_
# end class SalesReceiptLineMod


class SalesReceiptLineGroupMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnLineID=None, ItemGroupRef=None, Quantity=None, UnitOfMeasure=None, OverrideUOMSetRef=None, SalesReceiptLineMod=None):
        self.TxnLineID = TxnLineID
        self.ItemGroupRef = ItemGroupRef
        self.Quantity = Quantity
        self.UnitOfMeasure = UnitOfMeasure
        self.OverrideUOMSetRef = OverrideUOMSetRef
        if SalesReceiptLineMod is None:
            self.SalesReceiptLineMod = []
        else:
            self.SalesReceiptLineMod = SalesReceiptLineMod
    def factory(*args_, **kwargs_):
        if SalesReceiptLineGroupMod.subclass:
            return SalesReceiptLineGroupMod.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptLineGroupMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnLineID(self): return self.TxnLineID
    def set_TxnLineID(self, TxnLineID): self.TxnLineID = TxnLineID
    def get_ItemGroupRef(self): return self.ItemGroupRef
    def set_ItemGroupRef(self, ItemGroupRef): self.ItemGroupRef = ItemGroupRef
    def get_Quantity(self): return self.Quantity
    def set_Quantity(self, Quantity): self.Quantity = Quantity
    def get_UnitOfMeasure(self): return self.UnitOfMeasure
    def set_UnitOfMeasure(self, UnitOfMeasure): self.UnitOfMeasure = UnitOfMeasure
    def get_OverrideUOMSetRef(self): return self.OverrideUOMSetRef
    def set_OverrideUOMSetRef(self, OverrideUOMSetRef): self.OverrideUOMSetRef = OverrideUOMSetRef
    def get_SalesReceiptLineMod(self): return self.SalesReceiptLineMod
    def set_SalesReceiptLineMod(self, SalesReceiptLineMod): self.SalesReceiptLineMod = SalesReceiptLineMod
    def add_SalesReceiptLineMod(self, value): self.SalesReceiptLineMod.append(value)
    def insert_SalesReceiptLineMod(self, index, value): self.SalesReceiptLineMod[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptLineGroupMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptLineGroupMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptLineGroupMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnLineID is not None:
            self.TxnLineID.export(outfile, level, namespace_, name_='TxnLineID', pretty_print=pretty_print)
        if self.ItemGroupRef is not None:
            self.ItemGroupRef.export(outfile, level, namespace_, name_='ItemGroupRef', pretty_print=pretty_print)
        if self.Quantity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantity>%s</%sQuantity>%s' % (namespace_, self.gds_format_string(quote_xml(self.Quantity).encode(ExternalEncoding), input_name='Quantity'), namespace_, eol_))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUnitOfMeasure>%s</%sUnitOfMeasure>%s' % (namespace_, self.gds_format_string(quote_xml(self.UnitOfMeasure).encode(ExternalEncoding), input_name='UnitOfMeasure'), namespace_, eol_))
        if self.OverrideUOMSetRef is not None:
            self.OverrideUOMSetRef.export(outfile, level, namespace_, name_='OverrideUOMSetRef', pretty_print=pretty_print)
        for SalesReceiptLineMod_ in self.SalesReceiptLineMod:
            SalesReceiptLineMod_.export(outfile, level, namespace_, name_='SalesReceiptLineMod', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.TxnLineID is not None or
            self.ItemGroupRef is not None or
            self.Quantity is not None or
            self.UnitOfMeasure is not None or
            self.OverrideUOMSetRef is not None or
            self.SalesReceiptLineMod
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptLineGroupMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnLineID is not None:
            showIndent(outfile, level)
            outfile.write('TxnLineID=model_.TxnLineIDType1(\n')
            self.TxnLineID.exportLiteral(outfile, level, name_='TxnLineID')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ItemGroupRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemGroupRef=model_.ItemGroupRef(\n')
            self.ItemGroupRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Quantity is not None:
            showIndent(outfile, level)
            outfile.write('Quantity=%s,\n' % quote_python(self.Quantity).encode(ExternalEncoding))
        if self.UnitOfMeasure is not None:
            showIndent(outfile, level)
            outfile.write('UnitOfMeasure=%s,\n' % quote_python(self.UnitOfMeasure).encode(ExternalEncoding))
        if self.OverrideUOMSetRef is not None:
            showIndent(outfile, level)
            outfile.write('OverrideUOMSetRef=model_.OverrideUOMSetRef(\n')
            self.OverrideUOMSetRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineMod=[\n')
        level += 1
        for SalesReceiptLineMod_ in self.SalesReceiptLineMod:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineMod(\n')
            SalesReceiptLineMod_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnLineID':
            obj_ = TxnLineIDType1.factory()
            obj_.build(child_)
            self.set_TxnLineID(obj_)
        elif nodeName_ == 'ItemGroupRef':
            obj_ = ItemGroupRef.factory()
            obj_.build(child_)
            self.set_ItemGroupRef(obj_)
        elif nodeName_ == 'Quantity':
            Quantity_ = child_.text
            Quantity_ = self.gds_validate_string(Quantity_, node, 'Quantity')
            self.Quantity = Quantity_
        elif nodeName_ == 'UnitOfMeasure':
            UnitOfMeasure_ = child_.text
            UnitOfMeasure_ = self.gds_validate_string(UnitOfMeasure_, node, 'UnitOfMeasure')
            self.UnitOfMeasure = UnitOfMeasure_
        elif nodeName_ == 'OverrideUOMSetRef':
            obj_ = OverrideUOMSetRef.factory()
            obj_.build(child_)
            self.set_OverrideUOMSetRef(obj_)
        elif nodeName_ == 'SalesReceiptLineMod':
            obj_ = SalesReceiptLineMod.factory()
            obj_.build(child_)
            self.SalesReceiptLineMod.append(obj_)
# end class SalesReceiptLineGroupMod


class SalesReceiptRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnID=None, TimeCreated=None, TimeModified=None, EditSequence=None, TxnNumber=None, CustomerRef=None, ClassRef=None, TemplateRef=None, TxnDate=None, RefNumber=None, BillAddress=None, BillAddressBlock=None, ShipAddress=None, ShipAddressBlock=None, IsPending=None, CheckNumber=None, PaymentMethodRef=None, DueDate=None, SalesRepRef=None, ShipDate=None, ShipMethodRef=None, FOB=None, Subtotal=None, ItemSalesTaxRef=None, SalesTaxPercentage=None, SalesTaxTotal=None, TotalAmount=None, CurrencyRef=None, ExchangeRate=None, TotalAmountInHomeCurrency=None, Memo=None, CustomerMsgRef=None, IsToBePrinted=None, IsToBeEmailed=None, IsTaxIncluded=None, CustomerSalesTaxCodeRef=None, DepositToAccountRef=None, CreditCardTxnInfo=None, Other=None, ExternalGUID=None, SalesReceiptLineRet=None, SalesReceiptLineGroupRet=None, DiscountLineRet=None, SalesTaxLineRet=None, ShippingLineRet=None, DataExtRet=None):
        self.TxnID = TxnID
        self.TimeCreated = TimeCreated
        self.TimeModified = TimeModified
        self.EditSequence = EditSequence
        self.TxnNumber = TxnNumber
        self.CustomerRef = CustomerRef
        self.ClassRef = ClassRef
        self.TemplateRef = TemplateRef
        self.TxnDate = TxnDate
        self.RefNumber = RefNumber
        self.BillAddress = BillAddress
        self.BillAddressBlock = BillAddressBlock
        self.ShipAddress = ShipAddress
        self.ShipAddressBlock = ShipAddressBlock
        self.IsPending = IsPending
        self.CheckNumber = CheckNumber
        self.PaymentMethodRef = PaymentMethodRef
        self.DueDate = DueDate
        self.SalesRepRef = SalesRepRef
        self.ShipDate = ShipDate
        self.ShipMethodRef = ShipMethodRef
        self.FOB = FOB
        self.Subtotal = Subtotal
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.SalesTaxPercentage = SalesTaxPercentage
        self.SalesTaxTotal = SalesTaxTotal
        self.TotalAmount = TotalAmount
        self.CurrencyRef = CurrencyRef
        self.ExchangeRate = ExchangeRate
        self.TotalAmountInHomeCurrency = TotalAmountInHomeCurrency
        self.Memo = Memo
        self.CustomerMsgRef = CustomerMsgRef
        self.IsToBePrinted = IsToBePrinted
        self.IsToBeEmailed = IsToBeEmailed
        self.IsTaxIncluded = IsTaxIncluded
        self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
        self.DepositToAccountRef = DepositToAccountRef
        self.CreditCardTxnInfo = CreditCardTxnInfo
        self.Other = Other
        self.ExternalGUID = ExternalGUID
        if SalesReceiptLineRet is None:
            self.SalesReceiptLineRet = []
        else:
            self.SalesReceiptLineRet = SalesReceiptLineRet
        if SalesReceiptLineGroupRet is None:
            self.SalesReceiptLineGroupRet = []
        else:
            self.SalesReceiptLineGroupRet = SalesReceiptLineGroupRet
        self.DiscountLineRet = DiscountLineRet
        self.SalesTaxLineRet = SalesTaxLineRet
        self.ShippingLineRet = ShippingLineRet
        if DataExtRet is None:
            self.DataExtRet = []
        else:
            self.DataExtRet = DataExtRet
    def factory(*args_, **kwargs_):
        if SalesReceiptRet.subclass:
            return SalesReceiptRet.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnID(self): return self.TxnID
    def set_TxnID(self, TxnID): self.TxnID = TxnID
    def get_TimeCreated(self): return self.TimeCreated
    def set_TimeCreated(self, TimeCreated): self.TimeCreated = TimeCreated
    def get_TimeModified(self): return self.TimeModified
    def set_TimeModified(self, TimeModified): self.TimeModified = TimeModified
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_TxnNumber(self): return self.TxnNumber
    def set_TxnNumber(self, TxnNumber): self.TxnNumber = TxnNumber
    def get_CustomerRef(self): return self.CustomerRef
    def set_CustomerRef(self, CustomerRef): self.CustomerRef = CustomerRef
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_TemplateRef(self): return self.TemplateRef
    def set_TemplateRef(self, TemplateRef): self.TemplateRef = TemplateRef
    def get_TxnDate(self): return self.TxnDate
    def set_TxnDate(self, TxnDate): self.TxnDate = TxnDate
    def get_RefNumber(self): return self.RefNumber
    def set_RefNumber(self, RefNumber): self.RefNumber = RefNumber
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_BillAddressBlock(self): return self.BillAddressBlock
    def set_BillAddressBlock(self, BillAddressBlock): self.BillAddressBlock = BillAddressBlock
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_ShipAddressBlock(self): return self.ShipAddressBlock
    def set_ShipAddressBlock(self, ShipAddressBlock): self.ShipAddressBlock = ShipAddressBlock
    def get_IsPending(self): return self.IsPending
    def set_IsPending(self, IsPending): self.IsPending = IsPending
    def get_CheckNumber(self): return self.CheckNumber
    def set_CheckNumber(self, CheckNumber): self.CheckNumber = CheckNumber
    def get_PaymentMethodRef(self): return self.PaymentMethodRef
    def set_PaymentMethodRef(self, PaymentMethodRef): self.PaymentMethodRef = PaymentMethodRef
    def get_DueDate(self): return self.DueDate
    def set_DueDate(self, DueDate): self.DueDate = DueDate
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ShipMethodRef(self): return self.ShipMethodRef
    def set_ShipMethodRef(self, ShipMethodRef): self.ShipMethodRef = ShipMethodRef
    def get_FOB(self): return self.FOB
    def set_FOB(self, FOB): self.FOB = FOB
    def get_Subtotal(self): return self.Subtotal
    def set_Subtotal(self, Subtotal): self.Subtotal = Subtotal
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_SalesTaxPercentage(self): return self.SalesTaxPercentage
    def set_SalesTaxPercentage(self, SalesTaxPercentage): self.SalesTaxPercentage = SalesTaxPercentage
    def get_SalesTaxTotal(self): return self.SalesTaxTotal
    def set_SalesTaxTotal(self, SalesTaxTotal): self.SalesTaxTotal = SalesTaxTotal
    def get_TotalAmount(self): return self.TotalAmount
    def set_TotalAmount(self, TotalAmount): self.TotalAmount = TotalAmount
    def get_CurrencyRef(self): return self.CurrencyRef
    def set_CurrencyRef(self, CurrencyRef): self.CurrencyRef = CurrencyRef
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_TotalAmountInHomeCurrency(self): return self.TotalAmountInHomeCurrency
    def set_TotalAmountInHomeCurrency(self, TotalAmountInHomeCurrency): self.TotalAmountInHomeCurrency = TotalAmountInHomeCurrency
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_CustomerMsgRef(self): return self.CustomerMsgRef
    def set_CustomerMsgRef(self, CustomerMsgRef): self.CustomerMsgRef = CustomerMsgRef
    def get_IsToBePrinted(self): return self.IsToBePrinted
    def set_IsToBePrinted(self, IsToBePrinted): self.IsToBePrinted = IsToBePrinted
    def get_IsToBeEmailed(self): return self.IsToBeEmailed
    def set_IsToBeEmailed(self, IsToBeEmailed): self.IsToBeEmailed = IsToBeEmailed
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_CustomerSalesTaxCodeRef(self): return self.CustomerSalesTaxCodeRef
    def set_CustomerSalesTaxCodeRef(self, CustomerSalesTaxCodeRef): self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
    def get_DepositToAccountRef(self): return self.DepositToAccountRef
    def set_DepositToAccountRef(self, DepositToAccountRef): self.DepositToAccountRef = DepositToAccountRef
    def get_CreditCardTxnInfo(self): return self.CreditCardTxnInfo
    def set_CreditCardTxnInfo(self, CreditCardTxnInfo): self.CreditCardTxnInfo = CreditCardTxnInfo
    def get_Other(self): return self.Other
    def set_Other(self, Other): self.Other = Other
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_SalesReceiptLineRet(self): return self.SalesReceiptLineRet
    def set_SalesReceiptLineRet(self, SalesReceiptLineRet): self.SalesReceiptLineRet = SalesReceiptLineRet
    def add_SalesReceiptLineRet(self, value): self.SalesReceiptLineRet.append(value)
    def insert_SalesReceiptLineRet(self, index, value): self.SalesReceiptLineRet[index] = value
    def get_SalesReceiptLineGroupRet(self): return self.SalesReceiptLineGroupRet
    def set_SalesReceiptLineGroupRet(self, SalesReceiptLineGroupRet): self.SalesReceiptLineGroupRet = SalesReceiptLineGroupRet
    def add_SalesReceiptLineGroupRet(self, value): self.SalesReceiptLineGroupRet.append(value)
    def insert_SalesReceiptLineGroupRet(self, index, value): self.SalesReceiptLineGroupRet[index] = value
    def get_DiscountLineRet(self): return self.DiscountLineRet
    def set_DiscountLineRet(self, DiscountLineRet): self.DiscountLineRet = DiscountLineRet
    def get_SalesTaxLineRet(self): return self.SalesTaxLineRet
    def set_SalesTaxLineRet(self, SalesTaxLineRet): self.SalesTaxLineRet = SalesTaxLineRet
    def get_ShippingLineRet(self): return self.ShippingLineRet
    def set_ShippingLineRet(self, ShippingLineRet): self.ShippingLineRet = ShippingLineRet
    def get_DataExtRet(self): return self.DataExtRet
    def set_DataExtRet(self, DataExtRet): self.DataExtRet = DataExtRet
    def add_DataExtRet(self, value): self.DataExtRet.append(value)
    def insert_DataExtRet(self, index, value): self.DataExtRet[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnID>%s</%sTxnID>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnID).encode(ExternalEncoding), input_name='TxnID'), namespace_, eol_))
        if self.TimeCreated is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeCreated>%s</%sTimeCreated>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeCreated).encode(ExternalEncoding), input_name='TimeCreated'), namespace_, eol_))
        if self.TimeModified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTimeModified>%s</%sTimeModified>%s' % (namespace_, self.gds_format_string(quote_xml(self.TimeModified).encode(ExternalEncoding), input_name='TimeModified'), namespace_, eol_))
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.TxnNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnNumber>%s</%sTxnNumber>%s' % (namespace_, self.gds_format_integer(self.TxnNumber, input_name='TxnNumber'), namespace_, eol_))
        if self.CustomerRef is not None:
            self.CustomerRef.export(outfile, level, namespace_, name_='CustomerRef', pretty_print=pretty_print)
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.TemplateRef is not None:
            self.TemplateRef.export(outfile, level, namespace_, name_='TemplateRef', pretty_print=pretty_print)
        if self.TxnDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnDate>%s</%sTxnDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnDate).encode(ExternalEncoding), input_name='TxnDate'), namespace_, eol_))
        if self.RefNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumber>%s</%sRefNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.RefNumber).encode(ExternalEncoding), input_name='RefNumber'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.BillAddressBlock is not None:
            self.BillAddressBlock.export(outfile, level, namespace_, name_='BillAddressBlock', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        if self.ShipAddressBlock is not None:
            self.ShipAddressBlock.export(outfile, level, namespace_, name_='ShipAddressBlock', pretty_print=pretty_print)
        if self.IsPending is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPending>%s</%sIsPending>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsPending).encode(ExternalEncoding), input_name='IsPending'), namespace_, eol_))
        if self.CheckNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCheckNumber>%s</%sCheckNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.CheckNumber).encode(ExternalEncoding), input_name='CheckNumber'), namespace_, eol_))
        if self.PaymentMethodRef is not None:
            self.PaymentMethodRef.export(outfile, level, namespace_, name_='PaymentMethodRef', pretty_print=pretty_print)
        if self.DueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDueDate>%s</%sDueDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.DueDate).encode(ExternalEncoding), input_name='DueDate'), namespace_, eol_))
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_, eol_))
        if self.ShipMethodRef is not None:
            self.ShipMethodRef.export(outfile, level, namespace_, name_='ShipMethodRef', pretty_print=pretty_print)
        if self.FOB is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOB>%s</%sFOB>%s' % (namespace_, self.gds_format_string(quote_xml(self.FOB).encode(ExternalEncoding), input_name='FOB'), namespace_, eol_))
        if self.Subtotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSubtotal>%s</%sSubtotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.Subtotal).encode(ExternalEncoding), input_name='Subtotal'), namespace_, eol_))
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.SalesTaxPercentage is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesTaxPercentage>%s</%sSalesTaxPercentage>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesTaxPercentage).encode(ExternalEncoding), input_name='SalesTaxPercentage'), namespace_, eol_))
        if self.SalesTaxTotal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSalesTaxTotal>%s</%sSalesTaxTotal>%s' % (namespace_, self.gds_format_string(quote_xml(self.SalesTaxTotal).encode(ExternalEncoding), input_name='SalesTaxTotal'), namespace_, eol_))
        if self.TotalAmount is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalAmount>%s</%sTotalAmount>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalAmount).encode(ExternalEncoding), input_name='TotalAmount'), namespace_, eol_))
        if self.CurrencyRef is not None:
            self.CurrencyRef.export(outfile, level, namespace_, name_='CurrencyRef', pretty_print=pretty_print)
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExchangeRate).encode(ExternalEncoding), input_name='ExchangeRate'), namespace_, eol_))
        if self.TotalAmountInHomeCurrency is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTotalAmountInHomeCurrency>%s</%sTotalAmountInHomeCurrency>%s' % (namespace_, self.gds_format_string(quote_xml(self.TotalAmountInHomeCurrency).encode(ExternalEncoding), input_name='TotalAmountInHomeCurrency'), namespace_, eol_))
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMemo>%s</%sMemo>%s' % (namespace_, self.gds_format_string(quote_xml(self.Memo).encode(ExternalEncoding), input_name='Memo'), namespace_, eol_))
        if self.CustomerMsgRef is not None:
            self.CustomerMsgRef.export(outfile, level, namespace_, name_='CustomerMsgRef', pretty_print=pretty_print)
        if self.IsToBePrinted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBePrinted>%s</%sIsToBePrinted>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBePrinted).encode(ExternalEncoding), input_name='IsToBePrinted'), namespace_, eol_))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBeEmailed>%s</%sIsToBeEmailed>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBeEmailed).encode(ExternalEncoding), input_name='IsToBeEmailed'), namespace_, eol_))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.CustomerSalesTaxCodeRef is not None:
            self.CustomerSalesTaxCodeRef.export(outfile, level, namespace_, name_='CustomerSalesTaxCodeRef', pretty_print=pretty_print)
        if self.DepositToAccountRef is not None:
            self.DepositToAccountRef.export(outfile, level, namespace_, name_='DepositToAccountRef', pretty_print=pretty_print)
        if self.CreditCardTxnInfo is not None:
            self.CreditCardTxnInfo.export(outfile, level, namespace_, name_='CreditCardTxnInfo', pretty_print=pretty_print)
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other).encode(ExternalEncoding), input_name='Other'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for SalesReceiptLineRet_ in self.SalesReceiptLineRet:
            SalesReceiptLineRet_.export(outfile, level, namespace_, name_='SalesReceiptLineRet', pretty_print=pretty_print)
        for SalesReceiptLineGroupRet_ in self.SalesReceiptLineGroupRet:
            SalesReceiptLineGroupRet_.export(outfile, level, namespace_, name_='SalesReceiptLineGroupRet', pretty_print=pretty_print)
        if self.DiscountLineRet is not None:
            self.DiscountLineRet.export(outfile, level, namespace_, name_='DiscountLineRet', pretty_print=pretty_print)
        if self.SalesTaxLineRet is not None:
            self.SalesTaxLineRet.export(outfile, level, namespace_, name_='SalesTaxLineRet', pretty_print=pretty_print)
        if self.ShippingLineRet is not None:
            self.ShippingLineRet.export(outfile, level, namespace_, name_='ShippingLineRet', pretty_print=pretty_print)
        for DataExtRet_ in self.DataExtRet:
            DataExtRet_.export(outfile, level, namespace_, name_='DataExtRet', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.TxnID is not None or
            self.TimeCreated is not None or
            self.TimeModified is not None or
            self.EditSequence is not None or
            self.TxnNumber is not None or
            self.CustomerRef is not None or
            self.ClassRef is not None or
            self.TemplateRef is not None or
            self.TxnDate is not None or
            self.RefNumber is not None or
            self.BillAddress is not None or
            self.BillAddressBlock is not None or
            self.ShipAddress is not None or
            self.ShipAddressBlock is not None or
            self.IsPending is not None or
            self.CheckNumber is not None or
            self.PaymentMethodRef is not None or
            self.DueDate is not None or
            self.SalesRepRef is not None or
            self.ShipDate is not None or
            self.ShipMethodRef is not None or
            self.FOB is not None or
            self.Subtotal is not None or
            self.ItemSalesTaxRef is not None or
            self.SalesTaxPercentage is not None or
            self.SalesTaxTotal is not None or
            self.TotalAmount is not None or
            self.CurrencyRef is not None or
            self.ExchangeRate is not None or
            self.TotalAmountInHomeCurrency is not None or
            self.Memo is not None or
            self.CustomerMsgRef is not None or
            self.IsToBePrinted is not None or
            self.IsToBeEmailed is not None or
            self.IsTaxIncluded is not None or
            self.CustomerSalesTaxCodeRef is not None or
            self.DepositToAccountRef is not None or
            self.CreditCardTxnInfo is not None or
            self.Other is not None or
            self.ExternalGUID is not None or
            self.SalesReceiptLineRet or
            self.SalesReceiptLineGroupRet or
            self.DiscountLineRet is not None or
            self.SalesTaxLineRet is not None or
            self.ShippingLineRet is not None or
            self.DataExtRet
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnID is not None:
            showIndent(outfile, level)
            outfile.write('TxnID=%s,\n' % quote_python(self.TxnID).encode(ExternalEncoding))
        if self.TimeCreated is not None:
            showIndent(outfile, level)
            outfile.write('TimeCreated=%s,\n' % quote_python(self.TimeCreated).encode(ExternalEncoding))
        if self.TimeModified is not None:
            showIndent(outfile, level)
            outfile.write('TimeModified=%s,\n' % quote_python(self.TimeModified).encode(ExternalEncoding))
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.TxnNumber is not None:
            showIndent(outfile, level)
            outfile.write('TxnNumber=%d,\n' % self.TxnNumber)
        if self.CustomerRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerRef=model_.CustomerRef(\n')
            self.CustomerRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TemplateRef is not None:
            showIndent(outfile, level)
            outfile.write('TemplateRef=model_.TemplateRef(\n')
            self.TemplateRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TxnDate is not None:
            showIndent(outfile, level)
            outfile.write('TxnDate=%s,\n' % quote_python(self.TxnDate).encode(ExternalEncoding))
        if self.RefNumber is not None:
            showIndent(outfile, level)
            outfile.write('RefNumber=%s,\n' % quote_python(self.RefNumber).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.BillAddressBlock is not None:
            showIndent(outfile, level)
            outfile.write('BillAddressBlock=model_.BillAddressBlock(\n')
            self.BillAddressBlock.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddressBlock is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddressBlock=model_.ShipAddressBlock(\n')
            self.ShipAddressBlock.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsPending is not None:
            showIndent(outfile, level)
            outfile.write('IsPending=%s,\n' % quote_python(self.IsPending).encode(ExternalEncoding))
        if self.CheckNumber is not None:
            showIndent(outfile, level)
            outfile.write('CheckNumber=%s,\n' % quote_python(self.CheckNumber).encode(ExternalEncoding))
        if self.PaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PaymentMethodRef=model_.PaymentMethodRef(\n')
            self.PaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DueDate is not None:
            showIndent(outfile, level)
            outfile.write('DueDate=%s,\n' % quote_python(self.DueDate).encode(ExternalEncoding))
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.ShipMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('ShipMethodRef=model_.ShipMethodRef(\n')
            self.ShipMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FOB is not None:
            showIndent(outfile, level)
            outfile.write('FOB=%s,\n' % quote_python(self.FOB).encode(ExternalEncoding))
        if self.Subtotal is not None:
            showIndent(outfile, level)
            outfile.write('Subtotal=%s,\n' % quote_python(self.Subtotal).encode(ExternalEncoding))
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxPercentage is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxPercentage=%s,\n' % quote_python(self.SalesTaxPercentage).encode(ExternalEncoding))
        if self.SalesTaxTotal is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxTotal=%s,\n' % quote_python(self.SalesTaxTotal).encode(ExternalEncoding))
        if self.TotalAmount is not None:
            showIndent(outfile, level)
            outfile.write('TotalAmount=%s,\n' % quote_python(self.TotalAmount).encode(ExternalEncoding))
        if self.CurrencyRef is not None:
            showIndent(outfile, level)
            outfile.write('CurrencyRef=model_.CurrencyRef(\n')
            self.CurrencyRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ExchangeRate is not None:
            showIndent(outfile, level)
            outfile.write('ExchangeRate=%s,\n' % quote_python(self.ExchangeRate).encode(ExternalEncoding))
        if self.TotalAmountInHomeCurrency is not None:
            showIndent(outfile, level)
            outfile.write('TotalAmountInHomeCurrency=%s,\n' % quote_python(self.TotalAmountInHomeCurrency).encode(ExternalEncoding))
        if self.Memo is not None:
            showIndent(outfile, level)
            outfile.write('Memo=%s,\n' % quote_python(self.Memo).encode(ExternalEncoding))
        if self.CustomerMsgRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerMsgRef=model_.CustomerMsgRef(\n')
            self.CustomerMsgRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsToBePrinted is not None:
            showIndent(outfile, level)
            outfile.write('IsToBePrinted=%s,\n' % quote_python(self.IsToBePrinted).encode(ExternalEncoding))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level)
            outfile.write('IsToBeEmailed=%s,\n' % quote_python(self.IsToBeEmailed).encode(ExternalEncoding))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.CustomerSalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerSalesTaxCodeRef=model_.CustomerSalesTaxCodeRef(\n')
            self.CustomerSalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DepositToAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('DepositToAccountRef=model_.DepositToAccountRef(\n')
            self.DepositToAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardTxnInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnInfo=model_.CreditCardTxnInfo(\n')
            self.CreditCardTxnInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Other is not None:
            showIndent(outfile, level)
            outfile.write('Other=%s,\n' % quote_python(self.Other).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineRet=[\n')
        level += 1
        for SalesReceiptLineRet_ in self.SalesReceiptLineRet:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineRet(\n')
            SalesReceiptLineRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineGroupRet=[\n')
        level += 1
        for SalesReceiptLineGroupRet_ in self.SalesReceiptLineGroupRet:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineGroupRet(\n')
            SalesReceiptLineGroupRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.DiscountLineRet is not None:
            showIndent(outfile, level)
            outfile.write('DiscountLineRet=model_.DiscountLineRet(\n')
            self.DiscountLineRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxLineRet is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxLineRet=model_.SalesTaxLineRet(\n')
            self.SalesTaxLineRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShippingLineRet is not None:
            showIndent(outfile, level)
            outfile.write('ShippingLineRet=model_.ShippingLineRet(\n')
            self.ShippingLineRet.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('DataExtRet=[\n')
        level += 1
        for DataExtRet_ in self.DataExtRet:
            showIndent(outfile, level)
            outfile.write('model_.DataExtRet(\n')
            DataExtRet_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnID':
            TxnID_ = child_.text
            TxnID_ = self.gds_validate_string(TxnID_, node, 'TxnID')
            self.TxnID = TxnID_
        elif nodeName_ == 'TimeCreated':
            TimeCreated_ = child_.text
            TimeCreated_ = re_.sub(String_cleanup_pat_, " ", TimeCreated_).strip()
            TimeCreated_ = self.gds_validate_string(TimeCreated_, node, 'TimeCreated')
            self.TimeCreated = TimeCreated_
        elif nodeName_ == 'TimeModified':
            TimeModified_ = child_.text
            TimeModified_ = re_.sub(String_cleanup_pat_, " ", TimeModified_).strip()
            TimeModified_ = self.gds_validate_string(TimeModified_, node, 'TimeModified')
            self.TimeModified = TimeModified_
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'TxnNumber':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'TxnNumber')
            self.TxnNumber = ival_
        elif nodeName_ == 'CustomerRef':
            obj_ = CustomerRef.factory()
            obj_.build(child_)
            self.set_CustomerRef(obj_)
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'TemplateRef':
            obj_ = TemplateRef.factory()
            obj_.build(child_)
            self.set_TemplateRef(obj_)
        elif nodeName_ == 'TxnDate':
            TxnDate_ = child_.text
            TxnDate_ = re_.sub(String_cleanup_pat_, " ", TxnDate_).strip()
            TxnDate_ = self.gds_validate_string(TxnDate_, node, 'TxnDate')
            self.TxnDate = TxnDate_
        elif nodeName_ == 'RefNumber':
            RefNumber_ = child_.text
            RefNumber_ = self.gds_validate_string(RefNumber_, node, 'RefNumber')
            self.RefNumber = RefNumber_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'BillAddressBlock':
            obj_ = BillAddressBlock.factory()
            obj_.build(child_)
            self.set_BillAddressBlock(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'ShipAddressBlock':
            obj_ = ShipAddressBlock.factory()
            obj_.build(child_)
            self.set_ShipAddressBlock(obj_)
        elif nodeName_ == 'IsPending':
            IsPending_ = child_.text
            IsPending_ = re_.sub(String_cleanup_pat_, " ", IsPending_).strip()
            IsPending_ = self.gds_validate_string(IsPending_, node, 'IsPending')
            self.IsPending = IsPending_
        elif nodeName_ == 'CheckNumber':
            CheckNumber_ = child_.text
            CheckNumber_ = self.gds_validate_string(CheckNumber_, node, 'CheckNumber')
            self.CheckNumber = CheckNumber_
        elif nodeName_ == 'PaymentMethodRef':
            obj_ = PaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PaymentMethodRef(obj_)
        elif nodeName_ == 'DueDate':
            DueDate_ = child_.text
            DueDate_ = re_.sub(String_cleanup_pat_, " ", DueDate_).strip()
            DueDate_ = self.gds_validate_string(DueDate_, node, 'DueDate')
            self.DueDate = DueDate_
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = re_.sub(String_cleanup_pat_, " ", ShipDate_).strip()
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'ShipMethodRef':
            obj_ = ShipMethodRef.factory()
            obj_.build(child_)
            self.set_ShipMethodRef(obj_)
        elif nodeName_ == 'FOB':
            FOB_ = child_.text
            FOB_ = self.gds_validate_string(FOB_, node, 'FOB')
            self.FOB = FOB_
        elif nodeName_ == 'Subtotal':
            Subtotal_ = child_.text
            Subtotal_ = self.gds_validate_string(Subtotal_, node, 'Subtotal')
            self.Subtotal = Subtotal_
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'SalesTaxPercentage':
            SalesTaxPercentage_ = child_.text
            SalesTaxPercentage_ = self.gds_validate_string(SalesTaxPercentage_, node, 'SalesTaxPercentage')
            self.SalesTaxPercentage = SalesTaxPercentage_
        elif nodeName_ == 'SalesTaxTotal':
            SalesTaxTotal_ = child_.text
            SalesTaxTotal_ = self.gds_validate_string(SalesTaxTotal_, node, 'SalesTaxTotal')
            self.SalesTaxTotal = SalesTaxTotal_
        elif nodeName_ == 'TotalAmount':
            TotalAmount_ = child_.text
            TotalAmount_ = self.gds_validate_string(TotalAmount_, node, 'TotalAmount')
            self.TotalAmount = TotalAmount_
        elif nodeName_ == 'CurrencyRef':
            obj_ = CurrencyRef.factory()
            obj_.build(child_)
            self.set_CurrencyRef(obj_)
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = re_.sub(String_cleanup_pat_, " ", ExchangeRate_).strip()
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'TotalAmountInHomeCurrency':
            TotalAmountInHomeCurrency_ = child_.text
            TotalAmountInHomeCurrency_ = self.gds_validate_string(TotalAmountInHomeCurrency_, node, 'TotalAmountInHomeCurrency')
            self.TotalAmountInHomeCurrency = TotalAmountInHomeCurrency_
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'CustomerMsgRef':
            obj_ = CustomerMsgRef.factory()
            obj_.build(child_)
            self.set_CustomerMsgRef(obj_)
        elif nodeName_ == 'IsToBePrinted':
            IsToBePrinted_ = child_.text
            IsToBePrinted_ = re_.sub(String_cleanup_pat_, " ", IsToBePrinted_).strip()
            IsToBePrinted_ = self.gds_validate_string(IsToBePrinted_, node, 'IsToBePrinted')
            self.IsToBePrinted = IsToBePrinted_
        elif nodeName_ == 'IsToBeEmailed':
            IsToBeEmailed_ = child_.text
            IsToBeEmailed_ = re_.sub(String_cleanup_pat_, " ", IsToBeEmailed_).strip()
            IsToBeEmailed_ = self.gds_validate_string(IsToBeEmailed_, node, 'IsToBeEmailed')
            self.IsToBeEmailed = IsToBeEmailed_
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'CustomerSalesTaxCodeRef':
            obj_ = CustomerSalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_CustomerSalesTaxCodeRef(obj_)
        elif nodeName_ == 'DepositToAccountRef':
            obj_ = DepositToAccountRef.factory()
            obj_.build(child_)
            self.set_DepositToAccountRef(obj_)
        elif nodeName_ == 'CreditCardTxnInfo':
            obj_ = CreditCardTxnInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnInfo(obj_)
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'SalesReceiptLineRet':
            obj_ = SalesReceiptLineRet.factory()
            obj_.build(child_)
            self.SalesReceiptLineRet.append(obj_)
        elif nodeName_ == 'SalesReceiptLineGroupRet':
            obj_ = SalesReceiptLineGroupRet.factory()
            obj_.build(child_)
            self.SalesReceiptLineGroupRet.append(obj_)
        elif nodeName_ == 'DiscountLineRet':
            obj_ = DiscountLineRet.factory()
            obj_.build(child_)
            self.set_DiscountLineRet(obj_)
        elif nodeName_ == 'SalesTaxLineRet':
            obj_ = SalesTaxLineRet.factory()
            obj_.build(child_)
            self.set_SalesTaxLineRet(obj_)
        elif nodeName_ == 'ShippingLineRet':
            obj_ = ShippingLineRet.factory()
            obj_.build(child_)
            self.set_ShippingLineRet(obj_)
        elif nodeName_ == 'DataExtRet':
            obj_ = DataExtRet.factory()
            obj_.build(child_)
            self.DataExtRet.append(obj_)
# end class SalesReceiptRet


class RefNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if RefNumber.subclass:
            return RefNumber.subclass(*args_, **kwargs_)
        else:
            return RefNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='RefNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RefNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RefNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RefNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='RefNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RefNumber


class CheckNumber(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if CheckNumber.subclass:
            return CheckNumber.subclass(*args_, **kwargs_)
        else:
            return CheckNumber(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='CheckNumber', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CheckNumber')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CheckNumber'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CheckNumber', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='CheckNumber'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CheckNumber


class FOB(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if FOB.subclass:
            return FOB.subclass(*args_, **kwargs_)
        else:
            return FOB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='FOB', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FOB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FOB'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='FOB', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='FOB'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class FOB


class Memo(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Memo.subclass:
            return Memo.subclass(*args_, **kwargs_)
        else:
            return Memo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Memo', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Memo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Memo'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Memo', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Memo'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Memo


class Other(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if Other.subclass:
            return Other.subclass(*args_, **kwargs_)
        else:
            return Other(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='Other', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Other')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Other'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='Other', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Other'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Other


class SalesReceiptAdd(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, defMacro=None, CustomerRef=None, ClassRef=None, TemplateRef=None, TxnDate=None, RefNumber=None, BillAddress=None, ShipAddress=None, IsPending=None, CheckNumber=None, PaymentMethodRef=None, DueDate=None, SalesRepRef=None, ShipDate=None, ShipMethodRef=None, FOB=None, ItemSalesTaxRef=None, Memo=None, CustomerMsgRef=None, IsToBePrinted=None, IsToBeEmailed=None, IsTaxIncluded=None, CustomerSalesTaxCodeRef=None, DepositToAccountRef=None, CreditCardTxnInfo=None, Other=None, ExchangeRate=None, ExternalGUID=None, SalesReceiptLineAdd=None, SalesReceiptLineGroupAdd=None, DiscountLineAdd=None, SalesTaxLineAdd=None, ShippingLineAdd=None):
        self.defMacro = _cast(None, defMacro)
        self.CustomerRef = CustomerRef
        self.ClassRef = ClassRef
        self.TemplateRef = TemplateRef
        self.TxnDate = TxnDate
        self.RefNumber = RefNumber
        self.BillAddress = BillAddress
        self.ShipAddress = ShipAddress
        self.IsPending = IsPending
        self.CheckNumber = CheckNumber
        self.PaymentMethodRef = PaymentMethodRef
        self.DueDate = DueDate
        self.SalesRepRef = SalesRepRef
        self.ShipDate = ShipDate
        self.ShipMethodRef = ShipMethodRef
        self.FOB = FOB
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.Memo = Memo
        self.CustomerMsgRef = CustomerMsgRef
        self.IsToBePrinted = IsToBePrinted
        self.IsToBeEmailed = IsToBeEmailed
        self.IsTaxIncluded = IsTaxIncluded
        self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
        self.DepositToAccountRef = DepositToAccountRef
        self.CreditCardTxnInfo = CreditCardTxnInfo
        self.Other = Other
        self.ExchangeRate = ExchangeRate
        self.ExternalGUID = ExternalGUID
        if SalesReceiptLineAdd is None:
            self.SalesReceiptLineAdd = []
        else:
            self.SalesReceiptLineAdd = SalesReceiptLineAdd
        if SalesReceiptLineGroupAdd is None:
            self.SalesReceiptLineGroupAdd = []
        else:
            self.SalesReceiptLineGroupAdd = SalesReceiptLineGroupAdd
        self.DiscountLineAdd = DiscountLineAdd
        self.SalesTaxLineAdd = SalesTaxLineAdd
        self.ShippingLineAdd = ShippingLineAdd
    def factory(*args_, **kwargs_):
        if SalesReceiptAdd.subclass:
            return SalesReceiptAdd.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptAdd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CustomerRef(self): return self.CustomerRef
    def set_CustomerRef(self, CustomerRef): self.CustomerRef = CustomerRef
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_TemplateRef(self): return self.TemplateRef
    def set_TemplateRef(self, TemplateRef): self.TemplateRef = TemplateRef
    def get_TxnDate(self): return self.TxnDate
    def set_TxnDate(self, TxnDate): self.TxnDate = TxnDate
    def get_RefNumber(self): return self.RefNumber
    def set_RefNumber(self, RefNumber): self.RefNumber = RefNumber
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_IsPending(self): return self.IsPending
    def set_IsPending(self, IsPending): self.IsPending = IsPending
    def get_CheckNumber(self): return self.CheckNumber
    def set_CheckNumber(self, CheckNumber): self.CheckNumber = CheckNumber
    def get_PaymentMethodRef(self): return self.PaymentMethodRef
    def set_PaymentMethodRef(self, PaymentMethodRef): self.PaymentMethodRef = PaymentMethodRef
    def get_DueDate(self): return self.DueDate
    def set_DueDate(self, DueDate): self.DueDate = DueDate
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ShipMethodRef(self): return self.ShipMethodRef
    def set_ShipMethodRef(self, ShipMethodRef): self.ShipMethodRef = ShipMethodRef
    def get_FOB(self): return self.FOB
    def set_FOB(self, FOB): self.FOB = FOB
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_CustomerMsgRef(self): return self.CustomerMsgRef
    def set_CustomerMsgRef(self, CustomerMsgRef): self.CustomerMsgRef = CustomerMsgRef
    def get_IsToBePrinted(self): return self.IsToBePrinted
    def set_IsToBePrinted(self, IsToBePrinted): self.IsToBePrinted = IsToBePrinted
    def get_IsToBeEmailed(self): return self.IsToBeEmailed
    def set_IsToBeEmailed(self, IsToBeEmailed): self.IsToBeEmailed = IsToBeEmailed
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_CustomerSalesTaxCodeRef(self): return self.CustomerSalesTaxCodeRef
    def set_CustomerSalesTaxCodeRef(self, CustomerSalesTaxCodeRef): self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
    def get_DepositToAccountRef(self): return self.DepositToAccountRef
    def set_DepositToAccountRef(self, DepositToAccountRef): self.DepositToAccountRef = DepositToAccountRef
    def get_CreditCardTxnInfo(self): return self.CreditCardTxnInfo
    def set_CreditCardTxnInfo(self, CreditCardTxnInfo): self.CreditCardTxnInfo = CreditCardTxnInfo
    def get_Other(self): return self.Other
    def set_Other(self, Other): self.Other = Other
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_ExternalGUID(self): return self.ExternalGUID
    def set_ExternalGUID(self, ExternalGUID): self.ExternalGUID = ExternalGUID
    def get_SalesReceiptLineAdd(self): return self.SalesReceiptLineAdd
    def set_SalesReceiptLineAdd(self, SalesReceiptLineAdd): self.SalesReceiptLineAdd = SalesReceiptLineAdd
    def add_SalesReceiptLineAdd(self, value): self.SalesReceiptLineAdd.append(value)
    def insert_SalesReceiptLineAdd(self, index, value): self.SalesReceiptLineAdd[index] = value
    def get_SalesReceiptLineGroupAdd(self): return self.SalesReceiptLineGroupAdd
    def set_SalesReceiptLineGroupAdd(self, SalesReceiptLineGroupAdd): self.SalesReceiptLineGroupAdd = SalesReceiptLineGroupAdd
    def add_SalesReceiptLineGroupAdd(self, value): self.SalesReceiptLineGroupAdd.append(value)
    def insert_SalesReceiptLineGroupAdd(self, index, value): self.SalesReceiptLineGroupAdd[index] = value
    def get_DiscountLineAdd(self): return self.DiscountLineAdd
    def set_DiscountLineAdd(self, DiscountLineAdd): self.DiscountLineAdd = DiscountLineAdd
    def get_SalesTaxLineAdd(self): return self.SalesTaxLineAdd
    def set_SalesTaxLineAdd(self, SalesTaxLineAdd): self.SalesTaxLineAdd = SalesTaxLineAdd
    def get_ShippingLineAdd(self): return self.ShippingLineAdd
    def set_ShippingLineAdd(self, ShippingLineAdd): self.ShippingLineAdd = ShippingLineAdd
    def get_defMacro(self): return self.defMacro
    def set_defMacro(self, defMacro): self.defMacro = defMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SalesReceiptAdd', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptAdd')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptAdd'):
        if self.defMacro is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            outfile.write(' defMacro=%s' % (quote_attrib(self.defMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptAdd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CustomerRef is not None:
            self.CustomerRef.export(outfile, level, namespace_, name_='CustomerRef', pretty_print=pretty_print)
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.TemplateRef is not None:
            self.TemplateRef.export(outfile, level, namespace_, name_='TemplateRef', pretty_print=pretty_print)
        if self.TxnDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnDate>%s</%sTxnDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnDate).encode(ExternalEncoding), input_name='TxnDate'), namespace_, eol_))
        if self.RefNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumber>%s</%sRefNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.RefNumber).encode(ExternalEncoding), input_name='RefNumber'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        if self.IsPending is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPending>%s</%sIsPending>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsPending).encode(ExternalEncoding), input_name='IsPending'), namespace_, eol_))
        if self.CheckNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCheckNumber>%s</%sCheckNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.CheckNumber).encode(ExternalEncoding), input_name='CheckNumber'), namespace_, eol_))
        if self.PaymentMethodRef is not None:
            self.PaymentMethodRef.export(outfile, level, namespace_, name_='PaymentMethodRef', pretty_print=pretty_print)
        if self.DueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDueDate>%s</%sDueDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.DueDate).encode(ExternalEncoding), input_name='DueDate'), namespace_, eol_))
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_, eol_))
        if self.ShipMethodRef is not None:
            self.ShipMethodRef.export(outfile, level, namespace_, name_='ShipMethodRef', pretty_print=pretty_print)
        if self.FOB is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOB>%s</%sFOB>%s' % (namespace_, self.gds_format_string(quote_xml(self.FOB).encode(ExternalEncoding), input_name='FOB'), namespace_, eol_))
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMemo>%s</%sMemo>%s' % (namespace_, self.gds_format_string(quote_xml(self.Memo).encode(ExternalEncoding), input_name='Memo'), namespace_, eol_))
        if self.CustomerMsgRef is not None:
            self.CustomerMsgRef.export(outfile, level, namespace_, name_='CustomerMsgRef', pretty_print=pretty_print)
        if self.IsToBePrinted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBePrinted>%s</%sIsToBePrinted>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBePrinted).encode(ExternalEncoding), input_name='IsToBePrinted'), namespace_, eol_))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBeEmailed>%s</%sIsToBeEmailed>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBeEmailed).encode(ExternalEncoding), input_name='IsToBeEmailed'), namespace_, eol_))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.CustomerSalesTaxCodeRef is not None:
            self.CustomerSalesTaxCodeRef.export(outfile, level, namespace_, name_='CustomerSalesTaxCodeRef', pretty_print=pretty_print)
        if self.DepositToAccountRef is not None:
            self.DepositToAccountRef.export(outfile, level, namespace_, name_='DepositToAccountRef', pretty_print=pretty_print)
        if self.CreditCardTxnInfo is not None:
            self.CreditCardTxnInfo.export(outfile, level, namespace_, name_='CreditCardTxnInfo', pretty_print=pretty_print)
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other).encode(ExternalEncoding), input_name='Other'), namespace_, eol_))
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExchangeRate).encode(ExternalEncoding), input_name='ExchangeRate'), namespace_, eol_))
        if self.ExternalGUID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExternalGUID>%s</%sExternalGUID>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExternalGUID).encode(ExternalEncoding), input_name='ExternalGUID'), namespace_, eol_))
        for SalesReceiptLineAdd_ in self.SalesReceiptLineAdd:
            SalesReceiptLineAdd_.export(outfile, level, namespace_, name_='SalesReceiptLineAdd', pretty_print=pretty_print)
        for SalesReceiptLineGroupAdd_ in self.SalesReceiptLineGroupAdd:
            SalesReceiptLineGroupAdd_.export(outfile, level, namespace_, name_='SalesReceiptLineGroupAdd', pretty_print=pretty_print)
        if self.DiscountLineAdd is not None:
            self.DiscountLineAdd.export(outfile, level, namespace_, name_='DiscountLineAdd', pretty_print=pretty_print)
        if self.SalesTaxLineAdd is not None:
            self.SalesTaxLineAdd.export(outfile, level, namespace_, name_='SalesTaxLineAdd', pretty_print=pretty_print)
        if self.ShippingLineAdd is not None:
            self.ShippingLineAdd.export(outfile, level, namespace_, name_='ShippingLineAdd', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.CustomerRef is not None or
            self.ClassRef is not None or
            self.TemplateRef is not None or
            self.TxnDate is not None or
            self.RefNumber is not None or
            self.BillAddress is not None or
            self.ShipAddress is not None or
            self.IsPending is not None or
            self.CheckNumber is not None or
            self.PaymentMethodRef is not None or
            self.DueDate is not None or
            self.SalesRepRef is not None or
            self.ShipDate is not None or
            self.ShipMethodRef is not None or
            self.FOB is not None or
            self.ItemSalesTaxRef is not None or
            self.Memo is not None or
            self.CustomerMsgRef is not None or
            self.IsToBePrinted is not None or
            self.IsToBeEmailed is not None or
            self.IsTaxIncluded is not None or
            self.CustomerSalesTaxCodeRef is not None or
            self.DepositToAccountRef is not None or
            self.CreditCardTxnInfo is not None or
            self.Other is not None or
            self.ExchangeRate is not None or
            self.ExternalGUID is not None or
            self.SalesReceiptLineAdd or
            self.SalesReceiptLineGroupAdd or
            self.DiscountLineAdd is not None or
            self.SalesTaxLineAdd is not None or
            self.ShippingLineAdd is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptAdd'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.defMacro is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            showIndent(outfile, level)
            outfile.write('defMacro = "%s",\n' % (self.defMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.CustomerRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerRef=model_.CustomerRef(\n')
            self.CustomerRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TemplateRef is not None:
            showIndent(outfile, level)
            outfile.write('TemplateRef=model_.TemplateRef(\n')
            self.TemplateRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TxnDate is not None:
            showIndent(outfile, level)
            outfile.write('TxnDate=%s,\n' % quote_python(self.TxnDate).encode(ExternalEncoding))
        if self.RefNumber is not None:
            showIndent(outfile, level)
            outfile.write('RefNumber=%s,\n' % quote_python(self.RefNumber).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsPending is not None:
            showIndent(outfile, level)
            outfile.write('IsPending=%s,\n' % quote_python(self.IsPending).encode(ExternalEncoding))
        if self.CheckNumber is not None:
            showIndent(outfile, level)
            outfile.write('CheckNumber=%s,\n' % quote_python(self.CheckNumber).encode(ExternalEncoding))
        if self.PaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PaymentMethodRef=model_.PaymentMethodRef(\n')
            self.PaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DueDate is not None:
            showIndent(outfile, level)
            outfile.write('DueDate=%s,\n' % quote_python(self.DueDate).encode(ExternalEncoding))
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.ShipMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('ShipMethodRef=model_.ShipMethodRef(\n')
            self.ShipMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FOB is not None:
            showIndent(outfile, level)
            outfile.write('FOB=%s,\n' % quote_python(self.FOB).encode(ExternalEncoding))
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Memo is not None:
            showIndent(outfile, level)
            outfile.write('Memo=%s,\n' % quote_python(self.Memo).encode(ExternalEncoding))
        if self.CustomerMsgRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerMsgRef=model_.CustomerMsgRef(\n')
            self.CustomerMsgRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsToBePrinted is not None:
            showIndent(outfile, level)
            outfile.write('IsToBePrinted=%s,\n' % quote_python(self.IsToBePrinted).encode(ExternalEncoding))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level)
            outfile.write('IsToBeEmailed=%s,\n' % quote_python(self.IsToBeEmailed).encode(ExternalEncoding))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.CustomerSalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerSalesTaxCodeRef=model_.CustomerSalesTaxCodeRef(\n')
            self.CustomerSalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DepositToAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('DepositToAccountRef=model_.DepositToAccountRef(\n')
            self.DepositToAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.CreditCardTxnInfo is not None:
            showIndent(outfile, level)
            outfile.write('CreditCardTxnInfo=model_.CreditCardTxnInfo(\n')
            self.CreditCardTxnInfo.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Other is not None:
            showIndent(outfile, level)
            outfile.write('Other=%s,\n' % quote_python(self.Other).encode(ExternalEncoding))
        if self.ExchangeRate is not None:
            showIndent(outfile, level)
            outfile.write('ExchangeRate=%s,\n' % quote_python(self.ExchangeRate).encode(ExternalEncoding))
        if self.ExternalGUID is not None:
            showIndent(outfile, level)
            outfile.write('ExternalGUID=%s,\n' % quote_python(self.ExternalGUID).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineAdd=[\n')
        level += 1
        for SalesReceiptLineAdd_ in self.SalesReceiptLineAdd:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineAdd(\n')
            SalesReceiptLineAdd_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineGroupAdd=[\n')
        level += 1
        for SalesReceiptLineGroupAdd_ in self.SalesReceiptLineGroupAdd:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineGroupAdd(\n')
            SalesReceiptLineGroupAdd_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.DiscountLineAdd is not None:
            showIndent(outfile, level)
            outfile.write('DiscountLineAdd=model_.DiscountLineAdd(\n')
            self.DiscountLineAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.SalesTaxLineAdd is not None:
            showIndent(outfile, level)
            outfile.write('SalesTaxLineAdd=model_.SalesTaxLineAdd(\n')
            self.SalesTaxLineAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShippingLineAdd is not None:
            showIndent(outfile, level)
            outfile.write('ShippingLineAdd=model_.ShippingLineAdd(\n')
            self.ShippingLineAdd.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('defMacro', node)
        if value is not None and 'defMacro' not in already_processed:
            already_processed.append('defMacro')
            self.defMacro = value
            self.validate_MACROTYPE(self.defMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CustomerRef':
            obj_ = CustomerRef.factory()
            obj_.build(child_)
            self.set_CustomerRef(obj_)
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'TemplateRef':
            obj_ = TemplateRef.factory()
            obj_.build(child_)
            self.set_TemplateRef(obj_)
        elif nodeName_ == 'TxnDate':
            TxnDate_ = child_.text
            TxnDate_ = re_.sub(String_cleanup_pat_, " ", TxnDate_).strip()
            TxnDate_ = self.gds_validate_string(TxnDate_, node, 'TxnDate')
            self.TxnDate = TxnDate_
        elif nodeName_ == 'RefNumber':
            RefNumber_ = child_.text
            RefNumber_ = self.gds_validate_string(RefNumber_, node, 'RefNumber')
            self.RefNumber = RefNumber_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'IsPending':
            IsPending_ = child_.text
            IsPending_ = re_.sub(String_cleanup_pat_, " ", IsPending_).strip()
            IsPending_ = self.gds_validate_string(IsPending_, node, 'IsPending')
            self.IsPending = IsPending_
        elif nodeName_ == 'CheckNumber':
            CheckNumber_ = child_.text
            CheckNumber_ = self.gds_validate_string(CheckNumber_, node, 'CheckNumber')
            self.CheckNumber = CheckNumber_
        elif nodeName_ == 'PaymentMethodRef':
            obj_ = PaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PaymentMethodRef(obj_)
        elif nodeName_ == 'DueDate':
            DueDate_ = child_.text
            DueDate_ = re_.sub(String_cleanup_pat_, " ", DueDate_).strip()
            DueDate_ = self.gds_validate_string(DueDate_, node, 'DueDate')
            self.DueDate = DueDate_
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = re_.sub(String_cleanup_pat_, " ", ShipDate_).strip()
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'ShipMethodRef':
            obj_ = ShipMethodRef.factory()
            obj_.build(child_)
            self.set_ShipMethodRef(obj_)
        elif nodeName_ == 'FOB':
            FOB_ = child_.text
            FOB_ = self.gds_validate_string(FOB_, node, 'FOB')
            self.FOB = FOB_
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'CustomerMsgRef':
            obj_ = CustomerMsgRef.factory()
            obj_.build(child_)
            self.set_CustomerMsgRef(obj_)
        elif nodeName_ == 'IsToBePrinted':
            IsToBePrinted_ = child_.text
            IsToBePrinted_ = re_.sub(String_cleanup_pat_, " ", IsToBePrinted_).strip()
            IsToBePrinted_ = self.gds_validate_string(IsToBePrinted_, node, 'IsToBePrinted')
            self.IsToBePrinted = IsToBePrinted_
        elif nodeName_ == 'IsToBeEmailed':
            IsToBeEmailed_ = child_.text
            IsToBeEmailed_ = re_.sub(String_cleanup_pat_, " ", IsToBeEmailed_).strip()
            IsToBeEmailed_ = self.gds_validate_string(IsToBeEmailed_, node, 'IsToBeEmailed')
            self.IsToBeEmailed = IsToBeEmailed_
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'CustomerSalesTaxCodeRef':
            obj_ = CustomerSalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_CustomerSalesTaxCodeRef(obj_)
        elif nodeName_ == 'DepositToAccountRef':
            obj_ = DepositToAccountRef.factory()
            obj_.build(child_)
            self.set_DepositToAccountRef(obj_)
        elif nodeName_ == 'CreditCardTxnInfo':
            obj_ = CreditCardTxnInfo.factory()
            obj_.build(child_)
            self.set_CreditCardTxnInfo(obj_)
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = re_.sub(String_cleanup_pat_, " ", ExchangeRate_).strip()
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'ExternalGUID':
            ExternalGUID_ = child_.text
            ExternalGUID_ = self.gds_validate_string(ExternalGUID_, node, 'ExternalGUID')
            self.ExternalGUID = ExternalGUID_
        elif nodeName_ == 'SalesReceiptLineAdd':
            obj_ = SalesReceiptLineAdd.factory()
            obj_.build(child_)
            self.SalesReceiptLineAdd.append(obj_)
        elif nodeName_ == 'SalesReceiptLineGroupAdd':
            obj_ = SalesReceiptLineGroupAdd.factory()
            obj_.build(child_)
            self.SalesReceiptLineGroupAdd.append(obj_)
        elif nodeName_ == 'DiscountLineAdd':
            obj_ = DiscountLineAdd.factory()
            obj_.build(child_)
            self.set_DiscountLineAdd(obj_)
        elif nodeName_ == 'SalesTaxLineAdd':
            obj_ = SalesTaxLineAdd.factory()
            obj_.build(child_)
            self.set_SalesTaxLineAdd(obj_)
        elif nodeName_ == 'ShippingLineAdd':
            obj_ = ShippingLineAdd.factory()
            obj_.build(child_)
            self.set_ShippingLineAdd(obj_)
# end class SalesReceiptAdd


class SalesReceiptMod(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TxnID=None, EditSequence=None, CustomerRef=None, ClassRef=None, TemplateRef=None, TxnDate=None, RefNumber=None, BillAddress=None, ShipAddress=None, IsPending=None, CheckNumber=None, PaymentMethodRef=None, DueDate=None, SalesRepRef=None, ShipDate=None, ShipMethodRef=None, FOB=None, ItemSalesTaxRef=None, Memo=None, CustomerMsgRef=None, IsToBePrinted=None, IsToBeEmailed=None, IsTaxIncluded=None, CustomerSalesTaxCodeRef=None, DepositToAccountRef=None, Other=None, ExchangeRate=None, SalesReceiptLineMod=None, SalesReceiptLineGroupMod=None):
        self.TxnID = TxnID
        self.EditSequence = EditSequence
        self.CustomerRef = CustomerRef
        self.ClassRef = ClassRef
        self.TemplateRef = TemplateRef
        self.TxnDate = TxnDate
        self.RefNumber = RefNumber
        self.BillAddress = BillAddress
        self.ShipAddress = ShipAddress
        self.IsPending = IsPending
        self.CheckNumber = CheckNumber
        self.PaymentMethodRef = PaymentMethodRef
        self.DueDate = DueDate
        self.SalesRepRef = SalesRepRef
        self.ShipDate = ShipDate
        self.ShipMethodRef = ShipMethodRef
        self.FOB = FOB
        self.ItemSalesTaxRef = ItemSalesTaxRef
        self.Memo = Memo
        self.CustomerMsgRef = CustomerMsgRef
        self.IsToBePrinted = IsToBePrinted
        self.IsToBeEmailed = IsToBeEmailed
        self.IsTaxIncluded = IsTaxIncluded
        self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
        self.DepositToAccountRef = DepositToAccountRef
        self.Other = Other
        self.ExchangeRate = ExchangeRate
        if SalesReceiptLineMod is None:
            self.SalesReceiptLineMod = []
        else:
            self.SalesReceiptLineMod = SalesReceiptLineMod
        if SalesReceiptLineGroupMod is None:
            self.SalesReceiptLineGroupMod = []
        else:
            self.SalesReceiptLineGroupMod = SalesReceiptLineGroupMod
    def factory(*args_, **kwargs_):
        if SalesReceiptMod.subclass:
            return SalesReceiptMod.subclass(*args_, **kwargs_)
        else:
            return SalesReceiptMod(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TxnID(self): return self.TxnID
    def set_TxnID(self, TxnID): self.TxnID = TxnID
    def get_EditSequence(self): return self.EditSequence
    def set_EditSequence(self, EditSequence): self.EditSequence = EditSequence
    def get_CustomerRef(self): return self.CustomerRef
    def set_CustomerRef(self, CustomerRef): self.CustomerRef = CustomerRef
    def get_ClassRef(self): return self.ClassRef
    def set_ClassRef(self, ClassRef): self.ClassRef = ClassRef
    def get_TemplateRef(self): return self.TemplateRef
    def set_TemplateRef(self, TemplateRef): self.TemplateRef = TemplateRef
    def get_TxnDate(self): return self.TxnDate
    def set_TxnDate(self, TxnDate): self.TxnDate = TxnDate
    def get_RefNumber(self): return self.RefNumber
    def set_RefNumber(self, RefNumber): self.RefNumber = RefNumber
    def get_BillAddress(self): return self.BillAddress
    def set_BillAddress(self, BillAddress): self.BillAddress = BillAddress
    def get_ShipAddress(self): return self.ShipAddress
    def set_ShipAddress(self, ShipAddress): self.ShipAddress = ShipAddress
    def get_IsPending(self): return self.IsPending
    def set_IsPending(self, IsPending): self.IsPending = IsPending
    def get_CheckNumber(self): return self.CheckNumber
    def set_CheckNumber(self, CheckNumber): self.CheckNumber = CheckNumber
    def get_PaymentMethodRef(self): return self.PaymentMethodRef
    def set_PaymentMethodRef(self, PaymentMethodRef): self.PaymentMethodRef = PaymentMethodRef
    def get_DueDate(self): return self.DueDate
    def set_DueDate(self, DueDate): self.DueDate = DueDate
    def get_SalesRepRef(self): return self.SalesRepRef
    def set_SalesRepRef(self, SalesRepRef): self.SalesRepRef = SalesRepRef
    def get_ShipDate(self): return self.ShipDate
    def set_ShipDate(self, ShipDate): self.ShipDate = ShipDate
    def get_ShipMethodRef(self): return self.ShipMethodRef
    def set_ShipMethodRef(self, ShipMethodRef): self.ShipMethodRef = ShipMethodRef
    def get_FOB(self): return self.FOB
    def set_FOB(self, FOB): self.FOB = FOB
    def get_ItemSalesTaxRef(self): return self.ItemSalesTaxRef
    def set_ItemSalesTaxRef(self, ItemSalesTaxRef): self.ItemSalesTaxRef = ItemSalesTaxRef
    def get_Memo(self): return self.Memo
    def set_Memo(self, Memo): self.Memo = Memo
    def get_CustomerMsgRef(self): return self.CustomerMsgRef
    def set_CustomerMsgRef(self, CustomerMsgRef): self.CustomerMsgRef = CustomerMsgRef
    def get_IsToBePrinted(self): return self.IsToBePrinted
    def set_IsToBePrinted(self, IsToBePrinted): self.IsToBePrinted = IsToBePrinted
    def get_IsToBeEmailed(self): return self.IsToBeEmailed
    def set_IsToBeEmailed(self, IsToBeEmailed): self.IsToBeEmailed = IsToBeEmailed
    def get_IsTaxIncluded(self): return self.IsTaxIncluded
    def set_IsTaxIncluded(self, IsTaxIncluded): self.IsTaxIncluded = IsTaxIncluded
    def get_CustomerSalesTaxCodeRef(self): return self.CustomerSalesTaxCodeRef
    def set_CustomerSalesTaxCodeRef(self, CustomerSalesTaxCodeRef): self.CustomerSalesTaxCodeRef = CustomerSalesTaxCodeRef
    def get_DepositToAccountRef(self): return self.DepositToAccountRef
    def set_DepositToAccountRef(self, DepositToAccountRef): self.DepositToAccountRef = DepositToAccountRef
    def get_Other(self): return self.Other
    def set_Other(self, Other): self.Other = Other
    def get_ExchangeRate(self): return self.ExchangeRate
    def set_ExchangeRate(self, ExchangeRate): self.ExchangeRate = ExchangeRate
    def get_SalesReceiptLineMod(self): return self.SalesReceiptLineMod
    def set_SalesReceiptLineMod(self, SalesReceiptLineMod): self.SalesReceiptLineMod = SalesReceiptLineMod
    def add_SalesReceiptLineMod(self, value): self.SalesReceiptLineMod.append(value)
    def insert_SalesReceiptLineMod(self, index, value): self.SalesReceiptLineMod[index] = value
    def get_SalesReceiptLineGroupMod(self): return self.SalesReceiptLineGroupMod
    def set_SalesReceiptLineGroupMod(self, SalesReceiptLineGroupMod): self.SalesReceiptLineGroupMod = SalesReceiptLineGroupMod
    def add_SalesReceiptLineGroupMod(self, value): self.SalesReceiptLineGroupMod.append(value)
    def insert_SalesReceiptLineGroupMod(self, index, value): self.SalesReceiptLineGroupMod[index] = value
    def export(self, outfile, level, namespace_='', name_='SalesReceiptMod', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SalesReceiptMod')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SalesReceiptMod'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SalesReceiptMod', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TxnID is not None:
            self.TxnID.export(outfile, level, namespace_, name_='TxnID', pretty_print=pretty_print)
        if self.EditSequence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEditSequence>%s</%sEditSequence>%s' % (namespace_, self.gds_format_string(quote_xml(self.EditSequence).encode(ExternalEncoding), input_name='EditSequence'), namespace_, eol_))
        if self.CustomerRef is not None:
            self.CustomerRef.export(outfile, level, namespace_, name_='CustomerRef', pretty_print=pretty_print)
        if self.ClassRef is not None:
            self.ClassRef.export(outfile, level, namespace_, name_='ClassRef', pretty_print=pretty_print)
        if self.TemplateRef is not None:
            self.TemplateRef.export(outfile, level, namespace_, name_='TemplateRef', pretty_print=pretty_print)
        if self.TxnDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTxnDate>%s</%sTxnDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.TxnDate).encode(ExternalEncoding), input_name='TxnDate'), namespace_, eol_))
        if self.RefNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefNumber>%s</%sRefNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.RefNumber).encode(ExternalEncoding), input_name='RefNumber'), namespace_, eol_))
        if self.BillAddress is not None:
            self.BillAddress.export(outfile, level, namespace_, name_='BillAddress', pretty_print=pretty_print)
        if self.ShipAddress is not None:
            self.ShipAddress.export(outfile, level, namespace_, name_='ShipAddress', pretty_print=pretty_print)
        if self.IsPending is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsPending>%s</%sIsPending>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsPending).encode(ExternalEncoding), input_name='IsPending'), namespace_, eol_))
        if self.CheckNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCheckNumber>%s</%sCheckNumber>%s' % (namespace_, self.gds_format_string(quote_xml(self.CheckNumber).encode(ExternalEncoding), input_name='CheckNumber'), namespace_, eol_))
        if self.PaymentMethodRef is not None:
            self.PaymentMethodRef.export(outfile, level, namespace_, name_='PaymentMethodRef', pretty_print=pretty_print)
        if self.DueDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDueDate>%s</%sDueDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.DueDate).encode(ExternalEncoding), input_name='DueDate'), namespace_, eol_))
        if self.SalesRepRef is not None:
            self.SalesRepRef.export(outfile, level, namespace_, name_='SalesRepRef', pretty_print=pretty_print)
        if self.ShipDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sShipDate>%s</%sShipDate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ShipDate).encode(ExternalEncoding), input_name='ShipDate'), namespace_, eol_))
        if self.ShipMethodRef is not None:
            self.ShipMethodRef.export(outfile, level, namespace_, name_='ShipMethodRef', pretty_print=pretty_print)
        if self.FOB is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFOB>%s</%sFOB>%s' % (namespace_, self.gds_format_string(quote_xml(self.FOB).encode(ExternalEncoding), input_name='FOB'), namespace_, eol_))
        if self.ItemSalesTaxRef is not None:
            self.ItemSalesTaxRef.export(outfile, level, namespace_, name_='ItemSalesTaxRef', pretty_print=pretty_print)
        if self.Memo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMemo>%s</%sMemo>%s' % (namespace_, self.gds_format_string(quote_xml(self.Memo).encode(ExternalEncoding), input_name='Memo'), namespace_, eol_))
        if self.CustomerMsgRef is not None:
            self.CustomerMsgRef.export(outfile, level, namespace_, name_='CustomerMsgRef', pretty_print=pretty_print)
        if self.IsToBePrinted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBePrinted>%s</%sIsToBePrinted>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBePrinted).encode(ExternalEncoding), input_name='IsToBePrinted'), namespace_, eol_))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsToBeEmailed>%s</%sIsToBeEmailed>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsToBeEmailed).encode(ExternalEncoding), input_name='IsToBeEmailed'), namespace_, eol_))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIsTaxIncluded>%s</%sIsTaxIncluded>%s' % (namespace_, self.gds_format_string(quote_xml(self.IsTaxIncluded).encode(ExternalEncoding), input_name='IsTaxIncluded'), namespace_, eol_))
        if self.CustomerSalesTaxCodeRef is not None:
            self.CustomerSalesTaxCodeRef.export(outfile, level, namespace_, name_='CustomerSalesTaxCodeRef', pretty_print=pretty_print)
        if self.DepositToAccountRef is not None:
            self.DepositToAccountRef.export(outfile, level, namespace_, name_='DepositToAccountRef', pretty_print=pretty_print)
        if self.Other is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOther>%s</%sOther>%s' % (namespace_, self.gds_format_string(quote_xml(self.Other).encode(ExternalEncoding), input_name='Other'), namespace_, eol_))
        if self.ExchangeRate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sExchangeRate>%s</%sExchangeRate>%s' % (namespace_, self.gds_format_string(quote_xml(self.ExchangeRate).encode(ExternalEncoding), input_name='ExchangeRate'), namespace_, eol_))
        for SalesReceiptLineMod_ in self.SalesReceiptLineMod:
            SalesReceiptLineMod_.export(outfile, level, namespace_, name_='SalesReceiptLineMod', pretty_print=pretty_print)
        for SalesReceiptLineGroupMod_ in self.SalesReceiptLineGroupMod:
            SalesReceiptLineGroupMod_.export(outfile, level, namespace_, name_='SalesReceiptLineGroupMod', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.TxnID is not None or
            self.EditSequence is not None or
            self.CustomerRef is not None or
            self.ClassRef is not None or
            self.TemplateRef is not None or
            self.TxnDate is not None or
            self.RefNumber is not None or
            self.BillAddress is not None or
            self.ShipAddress is not None or
            self.IsPending is not None or
            self.CheckNumber is not None or
            self.PaymentMethodRef is not None or
            self.DueDate is not None or
            self.SalesRepRef is not None or
            self.ShipDate is not None or
            self.ShipMethodRef is not None or
            self.FOB is not None or
            self.ItemSalesTaxRef is not None or
            self.Memo is not None or
            self.CustomerMsgRef is not None or
            self.IsToBePrinted is not None or
            self.IsToBeEmailed is not None or
            self.IsTaxIncluded is not None or
            self.CustomerSalesTaxCodeRef is not None or
            self.DepositToAccountRef is not None or
            self.Other is not None or
            self.ExchangeRate is not None or
            self.SalesReceiptLineMod or
            self.SalesReceiptLineGroupMod
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SalesReceiptMod'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.TxnID is not None:
            showIndent(outfile, level)
            outfile.write('TxnID=model_.TxnIDType1(\n')
            self.TxnID.exportLiteral(outfile, level, name_='TxnID')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.EditSequence is not None:
            showIndent(outfile, level)
            outfile.write('EditSequence=%s,\n' % quote_python(self.EditSequence).encode(ExternalEncoding))
        if self.CustomerRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerRef=model_.CustomerRef(\n')
            self.CustomerRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ClassRef is not None:
            showIndent(outfile, level)
            outfile.write('ClassRef=model_.ClassRef(\n')
            self.ClassRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TemplateRef is not None:
            showIndent(outfile, level)
            outfile.write('TemplateRef=model_.TemplateRef(\n')
            self.TemplateRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.TxnDate is not None:
            showIndent(outfile, level)
            outfile.write('TxnDate=%s,\n' % quote_python(self.TxnDate).encode(ExternalEncoding))
        if self.RefNumber is not None:
            showIndent(outfile, level)
            outfile.write('RefNumber=%s,\n' % quote_python(self.RefNumber).encode(ExternalEncoding))
        if self.BillAddress is not None:
            showIndent(outfile, level)
            outfile.write('BillAddress=model_.BillAddress(\n')
            self.BillAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipAddress is not None:
            showIndent(outfile, level)
            outfile.write('ShipAddress=model_.ShipAddress(\n')
            self.ShipAddress.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsPending is not None:
            showIndent(outfile, level)
            outfile.write('IsPending=%s,\n' % quote_python(self.IsPending).encode(ExternalEncoding))
        if self.CheckNumber is not None:
            showIndent(outfile, level)
            outfile.write('CheckNumber=%s,\n' % quote_python(self.CheckNumber).encode(ExternalEncoding))
        if self.PaymentMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('PaymentMethodRef=model_.PaymentMethodRef(\n')
            self.PaymentMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DueDate is not None:
            showIndent(outfile, level)
            outfile.write('DueDate=%s,\n' % quote_python(self.DueDate).encode(ExternalEncoding))
        if self.SalesRepRef is not None:
            showIndent(outfile, level)
            outfile.write('SalesRepRef=model_.SalesRepRef(\n')
            self.SalesRepRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.ShipDate is not None:
            showIndent(outfile, level)
            outfile.write('ShipDate=%s,\n' % quote_python(self.ShipDate).encode(ExternalEncoding))
        if self.ShipMethodRef is not None:
            showIndent(outfile, level)
            outfile.write('ShipMethodRef=model_.ShipMethodRef(\n')
            self.ShipMethodRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.FOB is not None:
            showIndent(outfile, level)
            outfile.write('FOB=%s,\n' % quote_python(self.FOB).encode(ExternalEncoding))
        if self.ItemSalesTaxRef is not None:
            showIndent(outfile, level)
            outfile.write('ItemSalesTaxRef=model_.ItemSalesTaxRef(\n')
            self.ItemSalesTaxRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Memo is not None:
            showIndent(outfile, level)
            outfile.write('Memo=%s,\n' % quote_python(self.Memo).encode(ExternalEncoding))
        if self.CustomerMsgRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerMsgRef=model_.CustomerMsgRef(\n')
            self.CustomerMsgRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.IsToBePrinted is not None:
            showIndent(outfile, level)
            outfile.write('IsToBePrinted=%s,\n' % quote_python(self.IsToBePrinted).encode(ExternalEncoding))
        if self.IsToBeEmailed is not None:
            showIndent(outfile, level)
            outfile.write('IsToBeEmailed=%s,\n' % quote_python(self.IsToBeEmailed).encode(ExternalEncoding))
        if self.IsTaxIncluded is not None:
            showIndent(outfile, level)
            outfile.write('IsTaxIncluded=%s,\n' % quote_python(self.IsTaxIncluded).encode(ExternalEncoding))
        if self.CustomerSalesTaxCodeRef is not None:
            showIndent(outfile, level)
            outfile.write('CustomerSalesTaxCodeRef=model_.CustomerSalesTaxCodeRef(\n')
            self.CustomerSalesTaxCodeRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DepositToAccountRef is not None:
            showIndent(outfile, level)
            outfile.write('DepositToAccountRef=model_.DepositToAccountRef(\n')
            self.DepositToAccountRef.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.Other is not None:
            showIndent(outfile, level)
            outfile.write('Other=%s,\n' % quote_python(self.Other).encode(ExternalEncoding))
        if self.ExchangeRate is not None:
            showIndent(outfile, level)
            outfile.write('ExchangeRate=%s,\n' % quote_python(self.ExchangeRate).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineMod=[\n')
        level += 1
        for SalesReceiptLineMod_ in self.SalesReceiptLineMod:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineMod(\n')
            SalesReceiptLineMod_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SalesReceiptLineGroupMod=[\n')
        level += 1
        for SalesReceiptLineGroupMod_ in self.SalesReceiptLineGroupMod:
            showIndent(outfile, level)
            outfile.write('model_.SalesReceiptLineGroupMod(\n')
            SalesReceiptLineGroupMod_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TxnID':
            obj_ = TxnIDType1.factory()
            obj_.build(child_)
            self.set_TxnID(obj_)
        elif nodeName_ == 'EditSequence':
            EditSequence_ = child_.text
            EditSequence_ = self.gds_validate_string(EditSequence_, node, 'EditSequence')
            self.EditSequence = EditSequence_
        elif nodeName_ == 'CustomerRef':
            obj_ = CustomerRef.factory()
            obj_.build(child_)
            self.set_CustomerRef(obj_)
        elif nodeName_ == 'ClassRef':
            obj_ = ClassRef.factory()
            obj_.build(child_)
            self.set_ClassRef(obj_)
        elif nodeName_ == 'TemplateRef':
            obj_ = TemplateRef.factory()
            obj_.build(child_)
            self.set_TemplateRef(obj_)
        elif nodeName_ == 'TxnDate':
            TxnDate_ = child_.text
            TxnDate_ = re_.sub(String_cleanup_pat_, " ", TxnDate_).strip()
            TxnDate_ = self.gds_validate_string(TxnDate_, node, 'TxnDate')
            self.TxnDate = TxnDate_
        elif nodeName_ == 'RefNumber':
            RefNumber_ = child_.text
            RefNumber_ = self.gds_validate_string(RefNumber_, node, 'RefNumber')
            self.RefNumber = RefNumber_
        elif nodeName_ == 'BillAddress':
            obj_ = BillAddress.factory()
            obj_.build(child_)
            self.set_BillAddress(obj_)
        elif nodeName_ == 'ShipAddress':
            obj_ = ShipAddress.factory()
            obj_.build(child_)
            self.set_ShipAddress(obj_)
        elif nodeName_ == 'IsPending':
            IsPending_ = child_.text
            IsPending_ = re_.sub(String_cleanup_pat_, " ", IsPending_).strip()
            IsPending_ = self.gds_validate_string(IsPending_, node, 'IsPending')
            self.IsPending = IsPending_
        elif nodeName_ == 'CheckNumber':
            CheckNumber_ = child_.text
            CheckNumber_ = self.gds_validate_string(CheckNumber_, node, 'CheckNumber')
            self.CheckNumber = CheckNumber_
        elif nodeName_ == 'PaymentMethodRef':
            obj_ = PaymentMethodRef.factory()
            obj_.build(child_)
            self.set_PaymentMethodRef(obj_)
        elif nodeName_ == 'DueDate':
            DueDate_ = child_.text
            DueDate_ = re_.sub(String_cleanup_pat_, " ", DueDate_).strip()
            DueDate_ = self.gds_validate_string(DueDate_, node, 'DueDate')
            self.DueDate = DueDate_
        elif nodeName_ == 'SalesRepRef':
            obj_ = SalesRepRef.factory()
            obj_.build(child_)
            self.set_SalesRepRef(obj_)
        elif nodeName_ == 'ShipDate':
            ShipDate_ = child_.text
            ShipDate_ = re_.sub(String_cleanup_pat_, " ", ShipDate_).strip()
            ShipDate_ = self.gds_validate_string(ShipDate_, node, 'ShipDate')
            self.ShipDate = ShipDate_
        elif nodeName_ == 'ShipMethodRef':
            obj_ = ShipMethodRef.factory()
            obj_.build(child_)
            self.set_ShipMethodRef(obj_)
        elif nodeName_ == 'FOB':
            FOB_ = child_.text
            FOB_ = self.gds_validate_string(FOB_, node, 'FOB')
            self.FOB = FOB_
        elif nodeName_ == 'ItemSalesTaxRef':
            obj_ = ItemSalesTaxRef.factory()
            obj_.build(child_)
            self.set_ItemSalesTaxRef(obj_)
        elif nodeName_ == 'Memo':
            Memo_ = child_.text
            Memo_ = self.gds_validate_string(Memo_, node, 'Memo')
            self.Memo = Memo_
        elif nodeName_ == 'CustomerMsgRef':
            obj_ = CustomerMsgRef.factory()
            obj_.build(child_)
            self.set_CustomerMsgRef(obj_)
        elif nodeName_ == 'IsToBePrinted':
            IsToBePrinted_ = child_.text
            IsToBePrinted_ = re_.sub(String_cleanup_pat_, " ", IsToBePrinted_).strip()
            IsToBePrinted_ = self.gds_validate_string(IsToBePrinted_, node, 'IsToBePrinted')
            self.IsToBePrinted = IsToBePrinted_
        elif nodeName_ == 'IsToBeEmailed':
            IsToBeEmailed_ = child_.text
            IsToBeEmailed_ = re_.sub(String_cleanup_pat_, " ", IsToBeEmailed_).strip()
            IsToBeEmailed_ = self.gds_validate_string(IsToBeEmailed_, node, 'IsToBeEmailed')
            self.IsToBeEmailed = IsToBeEmailed_
        elif nodeName_ == 'IsTaxIncluded':
            IsTaxIncluded_ = child_.text
            IsTaxIncluded_ = re_.sub(String_cleanup_pat_, " ", IsTaxIncluded_).strip()
            IsTaxIncluded_ = self.gds_validate_string(IsTaxIncluded_, node, 'IsTaxIncluded')
            self.IsTaxIncluded = IsTaxIncluded_
        elif nodeName_ == 'CustomerSalesTaxCodeRef':
            obj_ = CustomerSalesTaxCodeRef.factory()
            obj_.build(child_)
            self.set_CustomerSalesTaxCodeRef(obj_)
        elif nodeName_ == 'DepositToAccountRef':
            obj_ = DepositToAccountRef.factory()
            obj_.build(child_)
            self.set_DepositToAccountRef(obj_)
        elif nodeName_ == 'Other':
            Other_ = child_.text
            Other_ = self.gds_validate_string(Other_, node, 'Other')
            self.Other = Other_
        elif nodeName_ == 'ExchangeRate':
            ExchangeRate_ = child_.text
            ExchangeRate_ = re_.sub(String_cleanup_pat_, " ", ExchangeRate_).strip()
            ExchangeRate_ = self.gds_validate_string(ExchangeRate_, node, 'ExchangeRate')
            self.ExchangeRate = ExchangeRate_
        elif nodeName_ == 'SalesReceiptLineMod':
            obj_ = SalesReceiptLineMod.factory()
            obj_.build(child_)
            self.SalesReceiptLineMod.append(obj_)
        elif nodeName_ == 'SalesReceiptLineGroupMod':
            obj_ = SalesReceiptLineGroupMod.factory()
            obj_.build(child_)
            self.SalesReceiptLineGroupMod.append(obj_)
# end class SalesReceiptMod


class DataExt(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OwnerID=None, DataExtName=None, DataExtValue=None):
        self.OwnerID = OwnerID
        self.DataExtName = DataExtName
        self.DataExtValue = DataExtValue
    def factory(*args_, **kwargs_):
        if DataExt.subclass:
            return DataExt.subclass(*args_, **kwargs_)
        else:
            return DataExt(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def get_DataExtName(self): return self.DataExtName
    def set_DataExtName(self, DataExtName): self.DataExtName = DataExtName
    def get_DataExtValue(self): return self.DataExtValue
    def set_DataExtValue(self, DataExtValue): self.DataExtValue = DataExtValue
    def export(self, outfile, level, namespace_='', name_='DataExt', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataExt')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DataExt'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DataExt', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OwnerID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(self.OwnerID).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
        if self.DataExtName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataExtName>%s</%sDataExtName>%s' % (namespace_, self.gds_format_string(quote_xml(self.DataExtName).encode(ExternalEncoding), input_name='DataExtName'), namespace_, eol_))
        if self.DataExtValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataExtValue>%s</%sDataExtValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.DataExtValue).encode(ExternalEncoding), input_name='DataExtValue'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.OwnerID is not None or
            self.DataExtName is not None or
            self.DataExtValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataExt'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OwnerID is not None:
            showIndent(outfile, level)
            outfile.write('OwnerID=%s,\n' % quote_python(self.OwnerID).encode(ExternalEncoding))
        if self.DataExtName is not None:
            showIndent(outfile, level)
            outfile.write('DataExtName=%s,\n' % quote_python(self.DataExtName).encode(ExternalEncoding))
        if self.DataExtValue is not None:
            showIndent(outfile, level)
            outfile.write('DataExtValue=%s,\n' % quote_python(self.DataExtValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID = OwnerID_
        elif nodeName_ == 'DataExtName':
            DataExtName_ = child_.text
            DataExtName_ = self.gds_validate_string(DataExtName_, node, 'DataExtName')
            self.DataExtName = DataExtName_
        elif nodeName_ == 'DataExtValue':
            DataExtValue_ = child_.text
            DataExtValue_ = self.gds_validate_string(DataExtValue_, node, 'DataExtValue')
            self.DataExtValue = DataExtValue_
# end class DataExt


class DataExtName(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if DataExtName.subclass:
            return DataExtName.subclass(*args_, **kwargs_)
        else:
            return DataExtName(*args_, **kwargs_)
    factory = staticmethod(factory)
    def export(self, outfile, level, namespace_='', name_='DataExtName', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataExtName')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DataExtName'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DataExtName', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataExtName'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DataExtName


class DataExtRet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, OwnerID=None, DataExtName=None, DataExtType=None, DataExtValue=None):
        self.OwnerID = OwnerID
        self.DataExtName = DataExtName
        self.DataExtType = DataExtType
        self.DataExtValue = DataExtValue
    def factory(*args_, **kwargs_):
        if DataExtRet.subclass:
            return DataExtRet.subclass(*args_, **kwargs_)
        else:
            return DataExtRet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_OwnerID(self): return self.OwnerID
    def set_OwnerID(self, OwnerID): self.OwnerID = OwnerID
    def get_DataExtName(self): return self.DataExtName
    def set_DataExtName(self, DataExtName): self.DataExtName = DataExtName
    def get_DataExtType(self): return self.DataExtType
    def set_DataExtType(self, DataExtType): self.DataExtType = DataExtType
    def validate_DataExtType(self, value):
        # Validate type DataExtType, a restriction on ENUMTYPE.
        pass
    def get_DataExtValue(self): return self.DataExtValue
    def set_DataExtValue(self, DataExtValue): self.DataExtValue = DataExtValue
    def export(self, outfile, level, namespace_='', name_='DataExtRet', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DataExtRet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DataExtRet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DataExtRet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.OwnerID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOwnerID>%s</%sOwnerID>%s' % (namespace_, self.gds_format_string(quote_xml(self.OwnerID).encode(ExternalEncoding), input_name='OwnerID'), namespace_, eol_))
        if self.DataExtName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataExtName>%s</%sDataExtName>%s' % (namespace_, self.gds_format_string(quote_xml(self.DataExtName).encode(ExternalEncoding), input_name='DataExtName'), namespace_, eol_))
        if self.DataExtType is not None:
            self.DataExtType.export(outfile, level, namespace_, name_='DataExtType', pretty_print=pretty_print)
        if self.DataExtValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataExtValue>%s</%sDataExtValue>%s' % (namespace_, self.gds_format_string(quote_xml(self.DataExtValue).encode(ExternalEncoding), input_name='DataExtValue'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.OwnerID is not None or
            self.DataExtName is not None or
            self.DataExtType is not None or
            self.DataExtValue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='DataExtRet'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.OwnerID is not None:
            showIndent(outfile, level)
            outfile.write('OwnerID=%s,\n' % quote_python(self.OwnerID).encode(ExternalEncoding))
        if self.DataExtName is not None:
            showIndent(outfile, level)
            outfile.write('DataExtName=%s,\n' % quote_python(self.DataExtName).encode(ExternalEncoding))
        if self.DataExtType is not None:
            showIndent(outfile, level)
            outfile.write('DataExtType=model_.DataExtType(\n')
            self.DataExtType.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.DataExtValue is not None:
            showIndent(outfile, level)
            outfile.write('DataExtValue=%s,\n' % quote_python(self.DataExtValue).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'OwnerID':
            OwnerID_ = child_.text
            OwnerID_ = self.gds_validate_string(OwnerID_, node, 'OwnerID')
            self.OwnerID = OwnerID_
        elif nodeName_ == 'DataExtName':
            DataExtName_ = child_.text
            DataExtName_ = self.gds_validate_string(DataExtName_, node, 'DataExtName')
            self.DataExtName = DataExtName_
        elif nodeName_ == 'DataExtType':
            obj_ = None
            self.set_DataExtType(obj_)
            self.validate_DataExtType(self.DataExtType)    # validate type DataExtType
        elif nodeName_ == 'DataExtValue':
            DataExtValue_ = child_.text
            DataExtValue_ = self.gds_validate_string(DataExtValue_, node, 'DataExtValue')
            self.DataExtValue = DataExtValue_
# end class DataExtRet


class SignonMsgsRq(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SignonAppCertRq=None, SignonDesktopRq=None, SignonTicketRq=None):
        if SignonAppCertRq is None:
            self.SignonAppCertRq = []
        else:
            self.SignonAppCertRq = SignonAppCertRq
        if SignonDesktopRq is None:
            self.SignonDesktopRq = []
        else:
            self.SignonDesktopRq = SignonDesktopRq
        if SignonTicketRq is None:
            self.SignonTicketRq = []
        else:
            self.SignonTicketRq = SignonTicketRq
    def factory(*args_, **kwargs_):
        if SignonMsgsRq.subclass:
            return SignonMsgsRq.subclass(*args_, **kwargs_)
        else:
            return SignonMsgsRq(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignonAppCertRq(self): return self.SignonAppCertRq
    def set_SignonAppCertRq(self, SignonAppCertRq): self.SignonAppCertRq = SignonAppCertRq
    def add_SignonAppCertRq(self, value): self.SignonAppCertRq.append(value)
    def insert_SignonAppCertRq(self, index, value): self.SignonAppCertRq[index] = value
    def get_SignonDesktopRq(self): return self.SignonDesktopRq
    def set_SignonDesktopRq(self, SignonDesktopRq): self.SignonDesktopRq = SignonDesktopRq
    def add_SignonDesktopRq(self, value): self.SignonDesktopRq.append(value)
    def insert_SignonDesktopRq(self, index, value): self.SignonDesktopRq[index] = value
    def get_SignonTicketRq(self): return self.SignonTicketRq
    def set_SignonTicketRq(self, SignonTicketRq): self.SignonTicketRq = SignonTicketRq
    def add_SignonTicketRq(self, value): self.SignonTicketRq.append(value)
    def insert_SignonTicketRq(self, index, value): self.SignonTicketRq[index] = value
    def export(self, outfile, level, namespace_='', name_='SignonMsgsRq', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonMsgsRq')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonMsgsRq'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SignonMsgsRq', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignonAppCertRq_ in self.SignonAppCertRq:
            SignonAppCertRq_.export(outfile, level, namespace_, name_='SignonAppCertRq', pretty_print=pretty_print)
        for SignonDesktopRq_ in self.SignonDesktopRq:
            SignonDesktopRq_.export(outfile, level, namespace_, name_='SignonDesktopRq', pretty_print=pretty_print)
        for SignonTicketRq_ in self.SignonTicketRq:
            SignonTicketRq_.export(outfile, level, namespace_, name_='SignonTicketRq', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SignonAppCertRq or
            self.SignonDesktopRq or
            self.SignonTicketRq
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonMsgsRq'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SignonAppCertRq=[\n')
        level += 1
        for SignonAppCertRq_ in self.SignonAppCertRq:
            showIndent(outfile, level)
            outfile.write('model_.SignonAppCertRqType(\n')
            SignonAppCertRq_.exportLiteral(outfile, level, name_='SignonAppCertRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SignonDesktopRq=[\n')
        level += 1
        for SignonDesktopRq_ in self.SignonDesktopRq:
            showIndent(outfile, level)
            outfile.write('model_.SignonDesktopRqType(\n')
            SignonDesktopRq_.exportLiteral(outfile, level, name_='SignonDesktopRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SignonTicketRq=[\n')
        level += 1
        for SignonTicketRq_ in self.SignonTicketRq:
            showIndent(outfile, level)
            outfile.write('model_.SignonTicketRqType(\n')
            SignonTicketRq_.exportLiteral(outfile, level, name_='SignonTicketRqType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignonAppCertRq':
            obj_ = SignonAppCertRqType.factory()
            obj_.build(child_)
            self.SignonAppCertRq.append(obj_)
        elif nodeName_ == 'SignonDesktopRq':
            obj_ = SignonDesktopRqType.factory()
            obj_.build(child_)
            self.SignonDesktopRq.append(obj_)
        elif nodeName_ == 'SignonTicketRq':
            obj_ = SignonTicketRqType.factory()
            obj_.build(child_)
            self.SignonTicketRq.append(obj_)
# end class SignonMsgsRq


class SignonMsgsRs(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SignonAppCertRs=None, SignonDesktopRs=None, SignonTicketRs=None):
        if SignonAppCertRs is None:
            self.SignonAppCertRs = []
        else:
            self.SignonAppCertRs = SignonAppCertRs
        if SignonDesktopRs is None:
            self.SignonDesktopRs = []
        else:
            self.SignonDesktopRs = SignonDesktopRs
        if SignonTicketRs is None:
            self.SignonTicketRs = []
        else:
            self.SignonTicketRs = SignonTicketRs
    def factory(*args_, **kwargs_):
        if SignonMsgsRs.subclass:
            return SignonMsgsRs.subclass(*args_, **kwargs_)
        else:
            return SignonMsgsRs(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignonAppCertRs(self): return self.SignonAppCertRs
    def set_SignonAppCertRs(self, SignonAppCertRs): self.SignonAppCertRs = SignonAppCertRs
    def add_SignonAppCertRs(self, value): self.SignonAppCertRs.append(value)
    def insert_SignonAppCertRs(self, index, value): self.SignonAppCertRs[index] = value
    def get_SignonDesktopRs(self): return self.SignonDesktopRs
    def set_SignonDesktopRs(self, SignonDesktopRs): self.SignonDesktopRs = SignonDesktopRs
    def add_SignonDesktopRs(self, value): self.SignonDesktopRs.append(value)
    def insert_SignonDesktopRs(self, index, value): self.SignonDesktopRs[index] = value
    def get_SignonTicketRs(self): return self.SignonTicketRs
    def set_SignonTicketRs(self, SignonTicketRs): self.SignonTicketRs = SignonTicketRs
    def add_SignonTicketRs(self, value): self.SignonTicketRs.append(value)
    def insert_SignonTicketRs(self, index, value): self.SignonTicketRs[index] = value
    def export(self, outfile, level, namespace_='', name_='SignonMsgsRs', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonMsgsRs')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonMsgsRs'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SignonMsgsRs', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignonAppCertRs_ in self.SignonAppCertRs:
            SignonAppCertRs_.export(outfile, level, namespace_, name_='SignonAppCertRs', pretty_print=pretty_print)
        for SignonDesktopRs_ in self.SignonDesktopRs:
            SignonDesktopRs_.export(outfile, level, namespace_, name_='SignonDesktopRs', pretty_print=pretty_print)
        for SignonTicketRs_ in self.SignonTicketRs:
            SignonTicketRs_.export(outfile, level, namespace_, name_='SignonTicketRs', pretty_print=pretty_print)
    def hasContent_(self):
        if (
            self.SignonAppCertRs or
            self.SignonDesktopRs or
            self.SignonTicketRs
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonMsgsRs'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('SignonAppCertRs=[\n')
        level += 1
        for SignonAppCertRs_ in self.SignonAppCertRs:
            showIndent(outfile, level)
            outfile.write('model_.SignonAppCertRsType(\n')
            SignonAppCertRs_.exportLiteral(outfile, level, name_='SignonAppCertRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SignonDesktopRs=[\n')
        level += 1
        for SignonDesktopRs_ in self.SignonDesktopRs:
            showIndent(outfile, level)
            outfile.write('model_.SignonDesktopRsType(\n')
            SignonDesktopRs_.exportLiteral(outfile, level, name_='SignonDesktopRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('SignonTicketRs=[\n')
        level += 1
        for SignonTicketRs_ in self.SignonTicketRs:
            showIndent(outfile, level)
            outfile.write('model_.SignonTicketRsType(\n')
            SignonTicketRs_.exportLiteral(outfile, level, name_='SignonTicketRsType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignonAppCertRs':
            obj_ = SignonAppCertRsType.factory()
            obj_.build(child_)
            self.SignonAppCertRs.append(obj_)
        elif nodeName_ == 'SignonDesktopRs':
            obj_ = SignonDesktopRsType.factory()
            obj_.build(child_)
            self.SignonDesktopRs.append(obj_)
        elif nodeName_ == 'SignonTicketRs':
            obj_ = SignonTicketRsType.factory()
            obj_.build(child_)
            self.SignonTicketRs.append(obj_)
# end class SignonMsgsRs


class SignonAppCertRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, ClientDateTime=None, ApplicationLogin=None, ConnectionTicket=None, InstallationID=None, Language=None, AppID=None, AppVer=None):
        self.requestID = _cast(None, requestID)
        self.ClientDateTime = ClientDateTime
        self.ApplicationLogin = ApplicationLogin
        self.ConnectionTicket = ConnectionTicket
        self.InstallationID = InstallationID
        self.Language = Language
        self.AppID = AppID
        self.AppVer = AppVer
    def factory(*args_, **kwargs_):
        if SignonAppCertRqType.subclass:
            return SignonAppCertRqType.subclass(*args_, **kwargs_)
        else:
            return SignonAppCertRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientDateTime(self): return self.ClientDateTime
    def set_ClientDateTime(self, ClientDateTime): self.ClientDateTime = ClientDateTime
    def get_ApplicationLogin(self): return self.ApplicationLogin
    def set_ApplicationLogin(self, ApplicationLogin): self.ApplicationLogin = ApplicationLogin
    def get_ConnectionTicket(self): return self.ConnectionTicket
    def set_ConnectionTicket(self, ConnectionTicket): self.ConnectionTicket = ConnectionTicket
    def get_InstallationID(self): return self.InstallationID
    def set_InstallationID(self, InstallationID): self.InstallationID = InstallationID
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_AppID(self): return self.AppID
    def set_AppID(self, AppID): self.AppID = AppID
    def get_AppVer(self): return self.AppVer
    def set_AppVer(self, AppVer): self.AppVer = AppVer
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonAppCertRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonAppCertRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonAppCertRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonAppCertRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientDateTime>%s</%sClientDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClientDateTime).encode(ExternalEncoding), input_name='ClientDateTime'), namespace_, eol_))
        if self.ApplicationLogin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationLogin>%s</%sApplicationLogin>%s' % (namespace_, self.gds_format_string(quote_xml(self.ApplicationLogin).encode(ExternalEncoding), input_name='ApplicationLogin'), namespace_, eol_))
        if self.ConnectionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConnectionTicket>%s</%sConnectionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.ConnectionTicket).encode(ExternalEncoding), input_name='ConnectionTicket'), namespace_, eol_))
        if self.InstallationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstallationID>%s</%sInstallationID>%s' % (namespace_, self.gds_format_string(quote_xml(self.InstallationID).encode(ExternalEncoding), input_name='InstallationID'), namespace_, eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespace_, self.gds_format_string(quote_xml(self.Language).encode(ExternalEncoding), input_name='Language'), namespace_, eol_))
        if self.AppID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppID>%s</%sAppID>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppID).encode(ExternalEncoding), input_name='AppID'), namespace_, eol_))
        if self.AppVer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppVer>%s</%sAppVer>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppVer).encode(ExternalEncoding), input_name='AppVer'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ClientDateTime is not None or
            self.ApplicationLogin is not None or
            self.ConnectionTicket is not None or
            self.InstallationID is not None or
            self.Language is not None or
            self.AppID is not None or
            self.AppVer is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonAppCertRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ClientDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ClientDateTime=%s,\n' % quote_python(self.ClientDateTime).encode(ExternalEncoding))
        if self.ApplicationLogin is not None:
            showIndent(outfile, level)
            outfile.write('ApplicationLogin=%s,\n' % quote_python(self.ApplicationLogin).encode(ExternalEncoding))
        if self.ConnectionTicket is not None:
            showIndent(outfile, level)
            outfile.write('ConnectionTicket=%s,\n' % quote_python(self.ConnectionTicket).encode(ExternalEncoding))
        if self.InstallationID is not None:
            showIndent(outfile, level)
            outfile.write('InstallationID=%s,\n' % quote_python(self.InstallationID).encode(ExternalEncoding))
        if self.Language is not None:
            showIndent(outfile, level)
            outfile.write('Language=%s,\n' % quote_python(self.Language).encode(ExternalEncoding))
        if self.AppID is not None:
            showIndent(outfile, level)
            outfile.write('AppID=%s,\n' % quote_python(self.AppID).encode(ExternalEncoding))
        if self.AppVer is not None:
            showIndent(outfile, level)
            outfile.write('AppVer=%s,\n' % quote_python(self.AppVer).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientDateTime':
            ClientDateTime_ = child_.text
            ClientDateTime_ = re_.sub(String_cleanup_pat_, " ", ClientDateTime_).strip()
            ClientDateTime_ = self.gds_validate_string(ClientDateTime_, node, 'ClientDateTime')
            self.ClientDateTime = ClientDateTime_
        elif nodeName_ == 'ApplicationLogin':
            ApplicationLogin_ = child_.text
            ApplicationLogin_ = self.gds_validate_string(ApplicationLogin_, node, 'ApplicationLogin')
            self.ApplicationLogin = ApplicationLogin_
        elif nodeName_ == 'ConnectionTicket':
            ConnectionTicket_ = child_.text
            ConnectionTicket_ = self.gds_validate_string(ConnectionTicket_, node, 'ConnectionTicket')
            self.ConnectionTicket = ConnectionTicket_
        elif nodeName_ == 'InstallationID':
            InstallationID_ = child_.text
            InstallationID_ = self.gds_validate_string(InstallationID_, node, 'InstallationID')
            self.InstallationID = InstallationID_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
        elif nodeName_ == 'AppID':
            AppID_ = child_.text
            AppID_ = self.gds_validate_string(AppID_, node, 'AppID')
            self.AppID = AppID_
        elif nodeName_ == 'AppVer':
            AppVer_ = child_.text
            AppVer_ = self.gds_validate_string(AppVer_, node, 'AppVer')
            self.AppVer = AppVer_
# end class SignonAppCertRqType


class SignonDesktopRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, ClientDateTime=None, ApplicationLogin=None, ConnectionTicket=None, InstallationID=None, Language=None, AppID=None, AppVer=None):
        self.requestID = _cast(None, requestID)
        self.ClientDateTime = ClientDateTime
        self.ApplicationLogin = ApplicationLogin
        self.ConnectionTicket = ConnectionTicket
        self.InstallationID = InstallationID
        self.Language = Language
        self.AppID = AppID
        self.AppVer = AppVer
    def factory(*args_, **kwargs_):
        if SignonDesktopRqType.subclass:
            return SignonDesktopRqType.subclass(*args_, **kwargs_)
        else:
            return SignonDesktopRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientDateTime(self): return self.ClientDateTime
    def set_ClientDateTime(self, ClientDateTime): self.ClientDateTime = ClientDateTime
    def get_ApplicationLogin(self): return self.ApplicationLogin
    def set_ApplicationLogin(self, ApplicationLogin): self.ApplicationLogin = ApplicationLogin
    def get_ConnectionTicket(self): return self.ConnectionTicket
    def set_ConnectionTicket(self, ConnectionTicket): self.ConnectionTicket = ConnectionTicket
    def get_InstallationID(self): return self.InstallationID
    def set_InstallationID(self, InstallationID): self.InstallationID = InstallationID
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_AppID(self): return self.AppID
    def set_AppID(self, AppID): self.AppID = AppID
    def get_AppVer(self): return self.AppVer
    def set_AppVer(self, AppVer): self.AppVer = AppVer
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonDesktopRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonDesktopRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonDesktopRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonDesktopRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientDateTime>%s</%sClientDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClientDateTime).encode(ExternalEncoding), input_name='ClientDateTime'), namespace_, eol_))
        if self.ApplicationLogin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sApplicationLogin>%s</%sApplicationLogin>%s' % (namespace_, self.gds_format_string(quote_xml(self.ApplicationLogin).encode(ExternalEncoding), input_name='ApplicationLogin'), namespace_, eol_))
        if self.ConnectionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sConnectionTicket>%s</%sConnectionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.ConnectionTicket).encode(ExternalEncoding), input_name='ConnectionTicket'), namespace_, eol_))
        if self.InstallationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstallationID>%s</%sInstallationID>%s' % (namespace_, self.gds_format_string(quote_xml(self.InstallationID).encode(ExternalEncoding), input_name='InstallationID'), namespace_, eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespace_, self.gds_format_string(quote_xml(self.Language).encode(ExternalEncoding), input_name='Language'), namespace_, eol_))
        if self.AppID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppID>%s</%sAppID>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppID).encode(ExternalEncoding), input_name='AppID'), namespace_, eol_))
        if self.AppVer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppVer>%s</%sAppVer>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppVer).encode(ExternalEncoding), input_name='AppVer'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ClientDateTime is not None or
            self.ApplicationLogin is not None or
            self.ConnectionTicket is not None or
            self.InstallationID is not None or
            self.Language is not None or
            self.AppID is not None or
            self.AppVer is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonDesktopRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ClientDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ClientDateTime=%s,\n' % quote_python(self.ClientDateTime).encode(ExternalEncoding))
        if self.ApplicationLogin is not None:
            showIndent(outfile, level)
            outfile.write('ApplicationLogin=%s,\n' % quote_python(self.ApplicationLogin).encode(ExternalEncoding))
        if self.ConnectionTicket is not None:
            showIndent(outfile, level)
            outfile.write('ConnectionTicket=%s,\n' % quote_python(self.ConnectionTicket).encode(ExternalEncoding))
        if self.InstallationID is not None:
            showIndent(outfile, level)
            outfile.write('InstallationID=%s,\n' % quote_python(self.InstallationID).encode(ExternalEncoding))
        if self.Language is not None:
            showIndent(outfile, level)
            outfile.write('Language=%s,\n' % quote_python(self.Language).encode(ExternalEncoding))
        if self.AppID is not None:
            showIndent(outfile, level)
            outfile.write('AppID=%s,\n' % quote_python(self.AppID).encode(ExternalEncoding))
        if self.AppVer is not None:
            showIndent(outfile, level)
            outfile.write('AppVer=%s,\n' % quote_python(self.AppVer).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientDateTime':
            ClientDateTime_ = child_.text
            ClientDateTime_ = re_.sub(String_cleanup_pat_, " ", ClientDateTime_).strip()
            ClientDateTime_ = self.gds_validate_string(ClientDateTime_, node, 'ClientDateTime')
            self.ClientDateTime = ClientDateTime_
        elif nodeName_ == 'ApplicationLogin':
            ApplicationLogin_ = child_.text
            ApplicationLogin_ = self.gds_validate_string(ApplicationLogin_, node, 'ApplicationLogin')
            self.ApplicationLogin = ApplicationLogin_
        elif nodeName_ == 'ConnectionTicket':
            ConnectionTicket_ = child_.text
            ConnectionTicket_ = self.gds_validate_string(ConnectionTicket_, node, 'ConnectionTicket')
            self.ConnectionTicket = ConnectionTicket_
        elif nodeName_ == 'InstallationID':
            InstallationID_ = child_.text
            InstallationID_ = self.gds_validate_string(InstallationID_, node, 'InstallationID')
            self.InstallationID = InstallationID_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
        elif nodeName_ == 'AppID':
            AppID_ = child_.text
            AppID_ = self.gds_validate_string(AppID_, node, 'AppID')
            self.AppID = AppID_
        elif nodeName_ == 'AppVer':
            AppVer_ = child_.text
            AppVer_ = self.gds_validate_string(AppVer_, node, 'AppVer')
            self.AppVer = AppVer_
# end class SignonDesktopRqType


class SignonTicketRqType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, requestID=None, ClientDateTime=None, SessionTicket=None, AuthID=None, InstallationID=None, Language=None, AppID=None, AppVer=None):
        self.requestID = _cast(None, requestID)
        self.ClientDateTime = ClientDateTime
        self.SessionTicket = SessionTicket
        self.AuthID = AuthID
        self.InstallationID = InstallationID
        self.Language = Language
        self.AppID = AppID
        self.AppVer = AppVer
    def factory(*args_, **kwargs_):
        if SignonTicketRqType.subclass:
            return SignonTicketRqType.subclass(*args_, **kwargs_)
        else:
            return SignonTicketRqType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ClientDateTime(self): return self.ClientDateTime
    def set_ClientDateTime(self, ClientDateTime): self.ClientDateTime = ClientDateTime
    def get_SessionTicket(self): return self.SessionTicket
    def set_SessionTicket(self, SessionTicket): self.SessionTicket = SessionTicket
    def get_AuthID(self): return self.AuthID
    def set_AuthID(self, AuthID): self.AuthID = AuthID
    def get_InstallationID(self): return self.InstallationID
    def set_InstallationID(self, InstallationID): self.InstallationID = InstallationID
    def get_Language(self): return self.Language
    def set_Language(self, Language): self.Language = Language
    def get_AppID(self): return self.AppID
    def set_AppID(self, AppID): self.AppID = AppID
    def get_AppVer(self): return self.AppVer
    def set_AppVer(self, AppVer): self.AppVer = AppVer
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonTicketRqType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonTicketRqType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonTicketRqType'):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonTicketRqType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ClientDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sClientDateTime>%s</%sClientDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ClientDateTime).encode(ExternalEncoding), input_name='ClientDateTime'), namespace_, eol_))
        if self.SessionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSessionTicket>%s</%sSessionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.SessionTicket).encode(ExternalEncoding), input_name='SessionTicket'), namespace_, eol_))
        if self.AuthID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAuthID>%s</%sAuthID>%s' % (namespace_, self.gds_format_string(quote_xml(self.AuthID).encode(ExternalEncoding), input_name='AuthID'), namespace_, eol_))
        if self.InstallationID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInstallationID>%s</%sInstallationID>%s' % (namespace_, self.gds_format_string(quote_xml(self.InstallationID).encode(ExternalEncoding), input_name='InstallationID'), namespace_, eol_))
        if self.Language is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLanguage>%s</%sLanguage>%s' % (namespace_, self.gds_format_string(quote_xml(self.Language).encode(ExternalEncoding), input_name='Language'), namespace_, eol_))
        if self.AppID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppID>%s</%sAppID>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppID).encode(ExternalEncoding), input_name='AppID'), namespace_, eol_))
        if self.AppVer is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAppVer>%s</%sAppVer>%s' % (namespace_, self.gds_format_string(quote_xml(self.AppVer).encode(ExternalEncoding), input_name='AppVer'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ClientDateTime is not None or
            self.SessionTicket is not None or
            self.AuthID is not None or
            self.InstallationID is not None or
            self.Language is not None or
            self.AppID is not None or
            self.AppVer is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonTicketRqType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ClientDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ClientDateTime=%s,\n' % quote_python(self.ClientDateTime).encode(ExternalEncoding))
        if self.SessionTicket is not None:
            showIndent(outfile, level)
            outfile.write('SessionTicket=%s,\n' % quote_python(self.SessionTicket).encode(ExternalEncoding))
        if self.AuthID is not None:
            showIndent(outfile, level)
            outfile.write('AuthID=%s,\n' % quote_python(self.AuthID).encode(ExternalEncoding))
        if self.InstallationID is not None:
            showIndent(outfile, level)
            outfile.write('InstallationID=%s,\n' % quote_python(self.InstallationID).encode(ExternalEncoding))
        if self.Language is not None:
            showIndent(outfile, level)
            outfile.write('Language=%s,\n' % quote_python(self.Language).encode(ExternalEncoding))
        if self.AppID is not None:
            showIndent(outfile, level)
            outfile.write('AppID=%s,\n' % quote_python(self.AppID).encode(ExternalEncoding))
        if self.AppVer is not None:
            showIndent(outfile, level)
            outfile.write('AppVer=%s,\n' % quote_python(self.AppVer).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ClientDateTime':
            ClientDateTime_ = child_.text
            ClientDateTime_ = re_.sub(String_cleanup_pat_, " ", ClientDateTime_).strip()
            ClientDateTime_ = self.gds_validate_string(ClientDateTime_, node, 'ClientDateTime')
            self.ClientDateTime = ClientDateTime_
        elif nodeName_ == 'SessionTicket':
            SessionTicket_ = child_.text
            SessionTicket_ = self.gds_validate_string(SessionTicket_, node, 'SessionTicket')
            self.SessionTicket = SessionTicket_
        elif nodeName_ == 'AuthID':
            AuthID_ = child_.text
            AuthID_ = self.gds_validate_string(AuthID_, node, 'AuthID')
            self.AuthID = AuthID_
        elif nodeName_ == 'InstallationID':
            InstallationID_ = child_.text
            InstallationID_ = self.gds_validate_string(InstallationID_, node, 'InstallationID')
            self.InstallationID = InstallationID_
        elif nodeName_ == 'Language':
            Language_ = child_.text
            Language_ = self.gds_validate_string(Language_, node, 'Language')
            self.Language = Language_
        elif nodeName_ == 'AppID':
            AppID_ = child_.text
            AppID_ = self.gds_validate_string(AppID_, node, 'AppID')
            self.AppID = AppID_
        elif nodeName_ == 'AppVer':
            AppVer_ = child_.text
            AppVer_ = self.gds_validate_string(AppVer_, node, 'AppVer')
            self.AppVer = AppVer_
# end class SignonTicketRqType


class SignonAppCertRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, ServerDateTime=None, SessionTicket=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.ServerDateTime = ServerDateTime
        self.SessionTicket = SessionTicket
    def factory(*args_, **kwargs_):
        if SignonAppCertRsType.subclass:
            return SignonAppCertRsType.subclass(*args_, **kwargs_)
        else:
            return SignonAppCertRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServerDateTime(self): return self.ServerDateTime
    def set_ServerDateTime(self, ServerDateTime): self.ServerDateTime = ServerDateTime
    def get_SessionTicket(self): return self.SessionTicket
    def set_SessionTicket(self, SessionTicket): self.SessionTicket = SessionTicket
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonAppCertRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonAppCertRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonAppCertRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonAppCertRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServerDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServerDateTime>%s</%sServerDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServerDateTime).encode(ExternalEncoding), input_name='ServerDateTime'), namespace_, eol_))
        if self.SessionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSessionTicket>%s</%sSessionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.SessionTicket).encode(ExternalEncoding), input_name='SessionTicket'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ServerDateTime is not None or
            self.SessionTicket is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonAppCertRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServerDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ServerDateTime=%s,\n' % quote_python(self.ServerDateTime).encode(ExternalEncoding))
        if self.SessionTicket is not None:
            showIndent(outfile, level)
            outfile.write('SessionTicket=%s,\n' % quote_python(self.SessionTicket).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServerDateTime':
            ServerDateTime_ = child_.text
            ServerDateTime_ = re_.sub(String_cleanup_pat_, " ", ServerDateTime_).strip()
            ServerDateTime_ = self.gds_validate_string(ServerDateTime_, node, 'ServerDateTime')
            self.ServerDateTime = ServerDateTime_
        elif nodeName_ == 'SessionTicket':
            SessionTicket_ = child_.text
            SessionTicket_ = self.gds_validate_string(SessionTicket_, node, 'SessionTicket')
            self.SessionTicket = SessionTicket_
# end class SignonAppCertRsType


class SignonDesktopRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, ServerDateTime=None, SessionTicket=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.ServerDateTime = ServerDateTime
        self.SessionTicket = SessionTicket
    def factory(*args_, **kwargs_):
        if SignonDesktopRsType.subclass:
            return SignonDesktopRsType.subclass(*args_, **kwargs_)
        else:
            return SignonDesktopRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServerDateTime(self): return self.ServerDateTime
    def set_ServerDateTime(self, ServerDateTime): self.ServerDateTime = ServerDateTime
    def get_SessionTicket(self): return self.SessionTicket
    def set_SessionTicket(self, SessionTicket): self.SessionTicket = SessionTicket
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonDesktopRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonDesktopRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonDesktopRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonDesktopRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServerDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServerDateTime>%s</%sServerDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServerDateTime).encode(ExternalEncoding), input_name='ServerDateTime'), namespace_, eol_))
        if self.SessionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSessionTicket>%s</%sSessionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.SessionTicket).encode(ExternalEncoding), input_name='SessionTicket'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ServerDateTime is not None or
            self.SessionTicket is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonDesktopRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServerDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ServerDateTime=%s,\n' % quote_python(self.ServerDateTime).encode(ExternalEncoding))
        if self.SessionTicket is not None:
            showIndent(outfile, level)
            outfile.write('SessionTicket=%s,\n' % quote_python(self.SessionTicket).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServerDateTime':
            ServerDateTime_ = child_.text
            ServerDateTime_ = re_.sub(String_cleanup_pat_, " ", ServerDateTime_).strip()
            ServerDateTime_ = self.gds_validate_string(ServerDateTime_, node, 'ServerDateTime')
            self.ServerDateTime = ServerDateTime_
        elif nodeName_ == 'SessionTicket':
            SessionTicket_ = child_.text
            SessionTicket_ = self.gds_validate_string(SessionTicket_, node, 'SessionTicket')
            self.SessionTicket = SessionTicket_
# end class SignonDesktopRsType


class SignonTicketRsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, statusSeverity=None, requestID=None, statusMessage=None, statusCode=None, ServerDateTime=None, SessionTicket=None):
        self.statusSeverity = _cast(None, statusSeverity)
        self.requestID = _cast(None, requestID)
        self.statusMessage = _cast(None, statusMessage)
        self.statusCode = _cast(None, statusCode)
        self.ServerDateTime = ServerDateTime
        self.SessionTicket = SessionTicket
    def factory(*args_, **kwargs_):
        if SignonTicketRsType.subclass:
            return SignonTicketRsType.subclass(*args_, **kwargs_)
        else:
            return SignonTicketRsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ServerDateTime(self): return self.ServerDateTime
    def set_ServerDateTime(self, ServerDateTime): self.ServerDateTime = ServerDateTime
    def get_SessionTicket(self): return self.SessionTicket
    def set_SessionTicket(self, SessionTicket): self.SessionTicket = SessionTicket
    def get_statusSeverity(self): return self.statusSeverity
    def set_statusSeverity(self, statusSeverity): self.statusSeverity = statusSeverity
    def validate_STRTYPE(self, value):
        # Validate type STRTYPE, a restriction on xsd:string.
        pass
    def get_requestID(self): return self.requestID
    def set_requestID(self, requestID): self.requestID = requestID
    def get_statusMessage(self): return self.statusMessage
    def set_statusMessage(self, statusMessage): self.statusMessage = statusMessage
    def get_statusCode(self): return self.statusCode
    def set_statusCode(self, statusCode): self.statusCode = statusCode
    def validate_INTTYPE(self, value):
        # Validate type INTTYPE, a restriction on xsd:integer.
        pass
    def export(self, outfile, level, namespace_='', name_='SignonTicketRsType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SignonTicketRsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SignonTicketRsType'):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            outfile.write(' statusSeverity=%s' % (quote_attrib(self.statusSeverity), ))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            outfile.write(' requestID=%s' % (quote_attrib(self.requestID), ))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            outfile.write(' statusMessage=%s' % (quote_attrib(self.statusMessage), ))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            outfile.write(' statusCode=%s' % (quote_attrib(self.statusCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SignonTicketRsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ServerDateTime is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sServerDateTime>%s</%sServerDateTime>%s' % (namespace_, self.gds_format_string(quote_xml(self.ServerDateTime).encode(ExternalEncoding), input_name='ServerDateTime'), namespace_, eol_))
        if self.SessionTicket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSessionTicket>%s</%sSessionTicket>%s' % (namespace_, self.gds_format_string(quote_xml(self.SessionTicket).encode(ExternalEncoding), input_name='SessionTicket'), namespace_, eol_))
    def hasContent_(self):
        if (
            self.ServerDateTime is not None or
            self.SessionTicket is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='SignonTicketRsType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.statusSeverity is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            showIndent(outfile, level)
            outfile.write('statusSeverity = "%s",\n' % (self.statusSeverity,))
        if self.requestID is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            showIndent(outfile, level)
            outfile.write('requestID = "%s",\n' % (self.requestID,))
        if self.statusMessage is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            showIndent(outfile, level)
            outfile.write('statusMessage = "%s",\n' % (self.statusMessage,))
        if self.statusCode is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            showIndent(outfile, level)
            outfile.write('statusCode = %d,\n' % (self.statusCode,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.ServerDateTime is not None:
            showIndent(outfile, level)
            outfile.write('ServerDateTime=%s,\n' % quote_python(self.ServerDateTime).encode(ExternalEncoding))
        if self.SessionTicket is not None:
            showIndent(outfile, level)
            outfile.write('SessionTicket=%s,\n' % quote_python(self.SessionTicket).encode(ExternalEncoding))
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('statusSeverity', node)
        if value is not None and 'statusSeverity' not in already_processed:
            already_processed.append('statusSeverity')
            self.statusSeverity = value
            self.validate_STRTYPE(self.statusSeverity)    # validate type STRTYPE
        value = find_attr_value_('requestID', node)
        if value is not None and 'requestID' not in already_processed:
            already_processed.append('requestID')
            self.requestID = value
            self.validate_STRTYPE(self.requestID)    # validate type STRTYPE
        value = find_attr_value_('statusMessage', node)
        if value is not None and 'statusMessage' not in already_processed:
            already_processed.append('statusMessage')
            self.statusMessage = value
            self.validate_STRTYPE(self.statusMessage)    # validate type STRTYPE
        value = find_attr_value_('statusCode', node)
        if value is not None and 'statusCode' not in already_processed:
            already_processed.append('statusCode')
            try:
                self.statusCode = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            self.validate_INTTYPE(self.statusCode)    # validate type INTTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ServerDateTime':
            ServerDateTime_ = child_.text
            ServerDateTime_ = re_.sub(String_cleanup_pat_, " ", ServerDateTime_).strip()
            ServerDateTime_ = self.gds_validate_string(ServerDateTime_, node, 'ServerDateTime')
            self.ServerDateTime = ServerDateTime_
        elif nodeName_ == 'SessionTicket':
            SessionTicket_ = child_.text
            SessionTicket_ = self.gds_validate_string(SessionTicket_, node, 'SessionTicket')
            self.SessionTicket = SessionTicket_
# end class SignonTicketRsType


class PaymentTxnIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PaymentTxnIDType.subclass:
            return PaymentTxnIDType.subclass(*args_, **kwargs_)
        else:
            return PaymentTxnIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='PaymentTxnIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentTxnIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentTxnIDType'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentTxnIDType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PaymentTxnIDType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PaymentTxnIDType


class PaymentTxnLineIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if PaymentTxnLineIDType.subclass:
            return PaymentTxnLineIDType.subclass(*args_, **kwargs_)
        else:
            return PaymentTxnLineIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='PaymentTxnLineIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PaymentTxnLineIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PaymentTxnLineIDType'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='PaymentTxnLineIDType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='PaymentTxnLineIDType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PaymentTxnLineIDType


class TxnIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TxnIDType.subclass:
            return TxnIDType.subclass(*args_, **kwargs_)
        else:
            return TxnIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='TxnIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TxnIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TxnIDType'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TxnIDType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TxnIDType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TxnIDType


class TxnLineIDType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TxnLineIDType.subclass:
            return TxnLineIDType.subclass(*args_, **kwargs_)
        else:
            return TxnLineIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='TxnLineIDType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TxnLineIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TxnLineIDType'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TxnLineIDType', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TxnLineIDType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TxnLineIDType


class TxnLineIDType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TxnLineIDType1.subclass:
            return TxnLineIDType1.subclass(*args_, **kwargs_)
        else:
            return TxnLineIDType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='TxnLineIDType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TxnLineIDType1')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TxnLineIDType1'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TxnLineIDType1', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TxnLineIDType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TxnLineIDType1


class TxnIDType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, useMacro=None, valueOf_=None):
        self.useMacro = _cast(None, useMacro)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if TxnIDType1.subclass:
            return TxnIDType1.subclass(*args_, **kwargs_)
        else:
            return TxnIDType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_useMacro(self): return self.useMacro
    def set_useMacro(self, useMacro): self.useMacro = useMacro
    def validate_MACROTYPE(self, value):
        # Validate type MACROTYPE, a restriction on xsd:string.
        pass
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='TxnIDType1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TxnIDType1')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TxnIDType1'):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            outfile.write(' useMacro=%s' % (quote_attrib(self.useMacro), ))
    def exportChildren(self, outfile, level, namespace_='', name_='TxnIDType1', fromsubclass_=False, pretty_print=True):
        pass
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='TxnIDType1'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.useMacro is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            showIndent(outfile, level)
            outfile.write('useMacro = "%s",\n' % (self.useMacro,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('useMacro', node)
        if value is not None and 'useMacro' not in already_processed:
            already_processed.append('useMacro')
            self.useMacro = value
            self.validate_MACROTYPE(self.useMacro)    # validate type MACROTYPE
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TxnIDType1


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'QBXML'
        rootClass = QBXML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_=rootTag,
        namespacedef_='http://developer.intuit.com/',
        pretty_print=True)
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'QBXML'
        rootClass = QBXML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('<?xml version="1.0" ?>\n')
    rootObj.export(sys.stdout, 0, name_="QBXML",
        namespacedef_='http://developer.intuit.com/')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'QBXML'
        rootClass = QBXML
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    sys.stdout.write('#from qbxmlops120 import *\n\n')
    sys.stdout.write('import qbxmlops120 as model_\n\n')
    sys.stdout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
    sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AVSStreet",
    "AVSZip",
    "AccountMetaData",
    "AccountNumber",
    "AccountQueryRqType",
    "AccountRef",
    "AccountantCopy",
    "AcquiredAs",
    "AdditionalContactRef",
    "AdditionalNotes",
    "AdditionalNotesMod",
    "AdditionalNotesRet",
    "Addr1",
    "Addr2",
    "Addr3",
    "Addr4",
    "Addr5",
    "Address",
    "AddressBlock",
    "AltContact",
    "AltPhone",
    "AssetAccountRef",
    "AssetDesc",
    "AssetNumber",
    "AuthorizationCode",
    "BarCode",
    "BarCodeValue",
    "BillAddress",
    "BillAddressBlock",
    "BillingRateMetaData",
    "COGSAccountRef",
    "CardSecurityCodeMatch",
    "Cc",
    "CheckNumber",
    "City",
    "ClassMetaData",
    "ClassRef",
    "ClientTransID",
    "CommercialCardCode",
    "CompanyAddressBlockForCustomer",
    "CompanyAddressForCustomer",
    "CompanyName",
    "CompanyQueryRqType",
    "CompanyQueryRsType",
    "CompanyRet",
    "CompanyType",
    "CompanyWebSite",
    "Contact",
    "ContactName",
    "ContactValue",
    "Contacts",
    "ContactsMod",
    "ContactsRet",
    "Country",
    "CreditCardAddress",
    "CreditCardInfo",
    "CreditCardNumber",
    "CreditCardPostalCode",
    "CreditCardTransID",
    "CreditCardTxnInfo",
    "CreditCardTxnInputInfo",
    "CreditCardTxnResultInfo",
    "CreditCardTxnType",
    "CurrencyRef",
    "CustomerAdd",
    "CustomerAddRqType",
    "CustomerAddRsType",
    "CustomerMod",
    "CustomerModRqType",
    "CustomerModRsType",
    "CustomerMsgMetaData",
    "CustomerMsgRef",
    "CustomerQueryRqType",
    "CustomerQueryRsType",
    "CustomerRef",
    "CustomerRet",
    "CustomerSalesTaxCodeRef",
    "CustomerTypeMetaData",
    "CustomerTypeRef",
    "DataExt",
    "DataExtName",
    "DataExtRet",
    "DataExtType",
    "DeliveryMethod",
    "DepositToAccountRef",
    "Desc",
    "DiscountLineAdd",
    "DiscountLineRet",
    "Domain",
    "EIN",
    "EditSequence",
    "Email",
    "EntityMetaData",
    "ErrorRecovery",
    "ExpenseAccountRef",
    "ExpirationMonth",
    "FOB",
    "Fax",
    "FirstMonthFiscalYear",
    "FirstMonthIncomeTaxYear",
    "FirstName",
    "FixedAssetSalesInfo",
    "FullName",
    "HostQueryRqType",
    "HostQueryRsType",
    "HostRet",
    "IncludeRetElement",
    "IncomeAccountRef",
    "InventorySiteLocationRef",
    "InventorySiteRef",
    "ItemDesc",
    "ItemDiscountRet",
    "ItemFixedAssetRet",
    "ItemGroupLine",
    "ItemGroupRef",
    "ItemGroupRet",
    "ItemInventoryAdd",
    "ItemInventoryAddRqType",
    "ItemInventoryAddRsType",
    "ItemInventoryAssemblyLine",
    "ItemInventoryAssemblyRet",
    "ItemInventoryMod",
    "ItemInventoryModRqType",
    "ItemInventoryModRsType",
    "ItemInventoryQueryRqType",
    "ItemInventoryQueryRsType",
    "ItemInventoryRef",
    "ItemInventoryRet",
    "ItemMetaData",
    "ItemNonInventoryRet",
    "ItemOtherChargeRet",
    "ItemPaymentRet",
    "ItemQueryRqType",
    "ItemQueryRsType",
    "ItemRef",
    "ItemSalesTaxGroupRet",
    "ItemSalesTaxRef",
    "ItemSalesTaxRet",
    "ItemServiceRet",
    "ItemSubtotalRet",
    "JobDesc",
    "JobStatus",
    "JobTitle",
    "JobTypeMetaData",
    "JobTypeRef",
    "LastName",
    "LegalAddress",
    "LegalCompanyName",
    "ListMetaData",
    "Location",
    "LotNumber",
    "MajorVersion",
    "ManufacturerPartNumber",
    "Memo",
    "MerchantAccountNumber",
    "MiddleName",
    "MinorVersion",
    "Mobile",
    "Name",
    "NameOnCard",
    "Note",
    "Notes",
    "Other",
    "Other1",
    "Other2",
    "OverrideItemAccountRef",
    "OverrideUOMSetRef",
    "PONumber",
    "Pager",
    "ParentRef",
    "PaymentMethodMetaData",
    "PaymentMethodRef",
    "PaymentStatus",
    "PaymentTxnIDType",
    "PaymentTxnLineIDType",
    "PayrollItemMetaData",
    "Phone",
    "PostalCode",
    "PrefVendorRef",
    "PreferredDeliveryMethod",
    "PreferredPaymentMethodRef",
    "PriceLevelMetaData",
    "PriceLevelRef",
    "PrintAs",
    "ProductName",
    "PurchaseDesc",
    "PurchaseTaxCodeRef",
    "QBFileMode",
    "QBXML",
    "QBXMLMsgsRq",
    "QBXMLMsgsRs",
    "ReconBatchID",
    "RefNumber",
    "ResaleNumber",
    "ResultMessage",
    "SSN",
    "SalesAndPurchase",
    "SalesDesc",
    "SalesOrPurchase",
    "SalesReceiptAdd",
    "SalesReceiptAddRqType",
    "SalesReceiptAddRsType",
    "SalesReceiptLineAdd",
    "SalesReceiptLineGroupAdd",
    "SalesReceiptLineGroupMod",
    "SalesReceiptLineGroupRet",
    "SalesReceiptLineMod",
    "SalesReceiptLineRet",
    "SalesReceiptMod",
    "SalesReceiptModRqType",
    "SalesReceiptModRsType",
    "SalesReceiptQueryRqType",
    "SalesReceiptQueryRsType",
    "SalesReceiptRet",
    "SalesRepMetaData",
    "SalesRepRef",
    "SalesTaxCodeMetaData",
    "SalesTaxCodeRef",
    "SalesTaxCountry",
    "SalesTaxLineAdd",
    "SalesTaxLineRet",
    "SalesTaxReturnLineRef",
    "Salutation",
    "SerialNumber",
    "Service",
    "ServiceStatus",
    "ShipAddress",
    "ShipAddressBlock",
    "ShipMethodMetaData",
    "ShipMethodRef",
    "ShipToAddress",
    "ShippingLineAdd",
    "ShippingLineRet",
    "SignonAppCertRqType",
    "SignonAppCertRsType",
    "SignonDesktopRqType",
    "SignonDesktopRsType",
    "SignonMsgsRq",
    "SignonMsgsRs",
    "SignonTicketRqType",
    "SignonTicketRsType",
    "SpecialItemType",
    "State",
    "SubscribedServices",
    "SupportedQBXMLVersion",
    "TaxForm",
    "TaxRegistrationNumber",
    "TaxVendorRef",
    "TemplateMetaData",
    "TemplateRef",
    "TermsMetaData",
    "TermsRef",
    "ToDoMetaData",
    "TransactionMode",
    "TxnIDType",
    "TxnIDType1",
    "TxnLineIDType",
    "TxnLineIDType1",
    "UnitOfMeasure",
    "UnitOfMeasureSetRef",
    "VehicleMetaData",
    "VendorOrPayeeName",
    "VendorTypeMetaData"
    ]
